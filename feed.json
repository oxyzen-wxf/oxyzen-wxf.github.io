{
    "version": "https://jsonfeed.org/version/1",
    "title": null,
    "subtitle": "人生当苦无妨，良人当归即好!",
    "icon": "https://oxyzen-wxf.github.io/images/favicon.ico",
    "description": "日常学习 & 复习记录",
    "home_page_url": "https://oxyzen-wxf.github.io",
    "items": [
        {
            "id": "https://oxyzen-wxf.github.io/computer-science/java/javaframe/springsecurity-1/",
            "url": "https://oxyzen-wxf.github.io/computer-science/java/javaframe/springsecurity-1/",
            "title": "",
            "date_published": "2022-06-03T08:55:50.886Z",
            "content_html": "<h1 id=\"springsecurity草稿\"><a class=\"anchor\" href=\"#springsecurity草稿\">#</a> SpringSecurity 草稿</h1>\n<h2 id=\"springsecurity-简单介绍\"><a class=\"anchor\" href=\"#springsecurity-简单介绍\">#</a> SpringSecurity 简单介绍</h2>\n<p>Spring Security 正是 Spring 家族中的 成员。Spring Security 基于 Spring 框架，提供了一套 Web 应用安全性的完整解决方案。</p>\n<p>主要区域是 “<mark><strong>认证</strong></mark>” 和 “<strong><mark>授权</mark></strong>”（或者访问控 制），一般来说，Web 应用的安全性包括 **<mark> 用户认证（Authentication）</mark><strong>和</strong><mark>用户授权 （Authorization）</mark>** 两个部分，这两点也是 Spring Security 重要核心功能。</p>\n<ul>\n<li>用户认证指的是：验证某个用户是否为系统中的合法主体，也就是说用户能否访问 该系统。用户认证一般要求用户提供用户名和密码。系统通过校验用户名和密码来完成认 证过程。<strong><mark>通俗点说就是系统认为用户是否能登录</mark></strong></li>\n<li>用户授权指的是验证某个用户是否有权限执行某个操作。在一个系统中，不同用户 所具有的权限是不同的。比如对一个文件来说，有的用户只能进行读取，而有的用户可以 进行修改。一般来说，系统会为不同的用户分配不同的角色，而每个角色则对应一系列的 权限。<strong><mark>通俗点讲就是系统判断用户是否有权限去做某些事情。</mark></strong></li>\n</ul>\n<p><strong>模块划分</strong></p>\n<p><img data-src=\"../../../../assets/image-20210522124518511.png\" alt=\"image-20210522124518511\" /></p>\n<h2 id=\"入门案例\"><a class=\"anchor\" href=\"#入门案例\">#</a> 入门案例</h2>\n<p>创建 springboot 工程，引入 springsecurity 坐标，随便写一个接口，就会跳转到 springsecurity 自带的登录页面，因为 springboot 已经自动配置整合了 springsecurity</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!--        spring security--></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-starter-security<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>创建 controller</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello security\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>访问 /hello 请求将自动跳转到 login 页面，（默认账号 user，密码将在控制台输入随机密码）</p>\n<p><img data-src=\"../../../../assets/image-20210522124534181.png\" alt=\"image-20210522124534181\" /></p>\n<p><img data-src=\"../../../../assets/image-20210522124544157.png\" alt=\"image-20210522124544157\" /></p>\n<pre><code>User\nUserDetails\nUserDetailsService\nWebSecurityConfigurerAdapter\n</code></pre>\n<p>springsecurity 配置用户名密码的三种方式</p>\n<ul>\n<li>\n<p>配置文件设置用户名密码</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">spring</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token attr-name\">  security</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token attr-name\">    user</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token attr-name\">      name</span><span class=\"token punctuation\">:</span> <span class=\"token attr-value\">user</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token attr-name\">      password</span><span class=\"token punctuation\">:</span> <span class=\"token attr-value\">pwd</span></pre></td></tr></table></figure></li>\n<li>\n<p>配置类设置用户名密码</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SecurityConfig</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">WebSecurityConfigurerAdapter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthenticationManagerBuilder</span> auth<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        auth<span class=\"token punctuation\">.</span><span class=\"token function\">inMemoryAuthentication</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">withUser</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"username\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">password</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"password\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">roles</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"roles\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>实现接口完成数据库查询获取用户名密码方式（<strong>此方式是开发中常用方式。</strong>）</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 去实现 UserDetailsService 接口</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SecurityUserDetailService</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">UserDetailsService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 使用 BCrypt 进行加密，需要将该类填进到 spring 容器中</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PasswordEncoder</span> passwordEncoder<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">UserDetails</span> <span class=\"token function\">loadUserByUsername</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> accountName<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">UsernameNotFoundException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token comment\">// 角色必填不能为 null</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">'username'</span><span class=\"token punctuation\">,</span> passwordEncoder<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token string\">'password'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">AuthorityUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">commaSeparatedStringToAuthorityList</span><span class=\"token punctuation\">(</span>role2 <span class=\"token operator\">+</span> <span class=\"token string\">\",ROLE_admin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">UserDetailsService</span> userDetailsService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">PasswordEncoder</span> passwordEncoder<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 在 SecurityConfig 配置类中注入加密密码的 PasswordEncoder，</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 和实现的校验用户名密码的 UserDetailsService</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthenticationManagerBuilder</span> auth<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">configure</span><span class=\"token punctuation\">(</span>auth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        auth</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token comment\">// 设置 UserDetailsService</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">userDetailsService</span><span class=\"token punctuation\">(</span>userDetailsService<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token comment\">// 使用 BCrypt 进行加密</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">passwordEncoder</span><span class=\"token punctuation\">(</span>passwordEncoder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"websecurityconfigureradapter\"><a class=\"anchor\" href=\"#websecurityconfigureradapter\">#</a> WebSecurityConfigurerAdapter</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 重写此方法可以自定义添加登录用户名密码来交给 springsecurity 进行身份验证</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 和设置密码加密方式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">AuthenticationManagerBuilder</span> auth<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">configure</span><span class=\"token punctuation\">(</span>auth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        auth</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token comment\">// 设置 UserDetailsService</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">userDetailsService</span><span class=\"token punctuation\">(</span>userDetailsService<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token comment\">// 使用 BCrypt 进行加密</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">passwordEncoder</span><span class=\"token punctuation\">(</span>passwordEncoder<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 重写此方法用来配置请求过程中的一些配置</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 权限信息来自登录经过 loadUserByUsername 方法返回 User 中的权限</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">void</span> <span class=\"token function\">configure</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpSecurity</span> httpSecurity<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        httpSecurity<span class=\"token punctuation\">.</span><span class=\"token function\">formLogin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            \t<span class=\"token comment\">// 前后端不分离使用</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">loginPage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"指定登录的html页\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">loginProcessingUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"指定登录url访问地址\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">successForwardUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"指定登录成功跳转地址\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">authorizeRequests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接口地址url\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">permitAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 表示那些路径地址放行，不需要认证</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接口地址url\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAuthority</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"权限\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 当前登录用户只有拥有了 hasAuthority () 方法中的权限才能进行访问</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接口地址url\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAnyAuthority</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[权限1，权限2]\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 当前登录用户只有拥有了 hasAnyAuthority () 方法中的任意一权限就可以访问</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接口地址url\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"角色\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 当前登录用户只有拥有了 hasRole () 方法中的角色即可访问</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"接口地址url\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasAnyRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[角色1,角色2]\"</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 当前登录用户只有拥有了 hasAnyRole () 方法中的任意角色即可访问</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">anyRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">authenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 剩下的所有 url 都需要认证授权</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        httpSecurity<span class=\"token punctuation\">.</span><span class=\"token function\">exceptionHandling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">accessDeniedPage</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"403没有权限访问页面路径url\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 前后端不分离使用</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                                    \t\t      httpSecurity<span class=\"token punctuation\">.</span><span class=\"token function\">exceptionHandling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">accessDeniedHandler</span><span class=\"token punctuation\">(</span>securityAccessDeniedHandler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 适用于前后端分离开发使用，但是需要实现对应的 handler 接口然后注入到配置类中使用。</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token class-name\">ExpressionUrlAuthorizationConfigurer</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">HttpSecurity</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">.</span>ExpressionInterceptUrlRegistry config <span class=\"token operator\">=</span> httpSecurity</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token comment\">// 禁用 CSRF</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">csrf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">disable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">exceptionHandling</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\">// 认证失败处理</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">authenticationEntryPoint</span><span class=\"token punctuation\">(</span>securityAuthenticationEntryPoint<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token comment\">// 无权限处理</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">accessDeniedHandler</span><span class=\"token punctuation\">(</span>securityAccessDeniedHandler<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token comment\">// 不创建 session 使用 token 不需要 session</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">sessionManagement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">sessionCreationPolicy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SessionCreationPolicy</span><span class=\"token punctuation\">.</span>STATELESS<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">and</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">authorizeRequests</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                <span class=\"token comment\">// 登录 url 不验证</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/sys/login\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">permitAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/swagger-ui/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">permitAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/swagger-resources/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">permitAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/v3/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">permitAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                <span class=\"token comment\">// OPTIONS 请求不验证</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">antMatchers</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpMethod</span><span class=\"token punctuation\">.</span>OPTIONS<span class=\"token punctuation\">,</span> <span class=\"token string\">\"/**\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">permitAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// 剩下所有请求都需要认证</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        config<span class=\"token punctuation\">.</span><span class=\"token function\">anyRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">authenticated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token comment\">// 禁用缓存</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        httpSecurity<span class=\"token punctuation\">.</span><span class=\"token function\">headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">cacheControl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">// 添加 JWT filter</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        httpSecurity</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token punctuation\">.</span><span class=\"token function\">addFilterBefore</span><span class=\"token punctuation\">(</span>securityAuthenticationTokenFilter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">UsernamePasswordAuthenticationFilter</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>权限角色底层源代码</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hasAuthority</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> authority<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"hasAuthority('\"</span> <span class=\"token operator\">+</span> authority <span class=\"token operator\">+</span> <span class=\"token string\">\"')\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hasAnyAuthority</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> authorities<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> anyAuthorities <span class=\"token operator\">=</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">arrayToDelimitedString</span><span class=\"token punctuation\">(</span>authorities<span class=\"token punctuation\">,</span> <span class=\"token string\">\"','\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"hasAnyAuthority('\"</span> <span class=\"token operator\">+</span> anyAuthorities <span class=\"token operator\">+</span> <span class=\"token string\">\"')\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hasRole</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> role<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">notNull</span><span class=\"token punctuation\">(</span>role<span class=\"token punctuation\">,</span> <span class=\"token string\">\"role cannot be null\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token class-name\">Assert</span><span class=\"token punctuation\">.</span><span class=\"token function\">isTrue</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>role<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ROLE_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token string\">\"role should not start with 'ROLE_' since it is automatically inserted. Got '\"</span> <span class=\"token operator\">+</span> role <span class=\"token operator\">+</span> <span class=\"token string\">\"'\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"hasRole('ROLE_\"</span> <span class=\"token operator\">+</span> role <span class=\"token operator\">+</span> <span class=\"token string\">\"')\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 角色与权限不同的是他会在角色前面加上 ROLE_前缀，所以在我们赋予登录角色的时候也应该添加上 ROLE_前缀。</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hasAnyRole</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> authorities<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t\t<span class=\"token class-name\">String</span> anyAuthorities <span class=\"token operator\">=</span> <span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">arrayToDelimitedString</span><span class=\"token punctuation\">(</span>authorities<span class=\"token punctuation\">,</span> <span class=\"token string\">\"','ROLE_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"hasAnyRole('ROLE_\"</span> <span class=\"token operator\">+</span> anyAuthorities <span class=\"token operator\">+</span> <span class=\"token string\">\"')\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"userdetailsservice\"><a class=\"anchor\" href=\"#userdetailsservice\">#</a> UserDetailsService</h2>\n<h2 id=\"userdetails\"><a class=\"anchor\" href=\"#userdetails\">#</a> UserDetails</h2>\n<h2 id=\"user\"><a class=\"anchor\" href=\"#user\">#</a> User</h2>\n<h2 id=\"springsecurity注解\"><a class=\"anchor\" href=\"#springsecurity注解\">#</a> SpringSecurity 注解</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 开启 SpringSecurity 注解配置的注解，放在启动类或者配置类上都可以</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 参数 prePostEnabled 开启 @PostAuthorize 注解使用，参数 securedEnabled 开启 @Secured 注解使用</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token annotation punctuation\">@EnableGlobalMethodSecurity</span><span class=\"token punctuation\">(</span>prePostEnabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> securedEnabled <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// @Secured 注解使用</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Secured</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"ROLE_admin\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ROLE_user\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hello1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello word!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// @PreAuthorize 注解使用</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 注解加在请求接口上</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 可以使用 hasRole，hasAnyRole,hasAuthority,hasAnyAuthority</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// 分别是对指定角色权限就行放行，没有角色权限将无法访问接口</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 角色不用加前缀了因为 hasRole 方法内部已经拼接好了前缀</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/hello\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@PreAuthorize</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hasRole('USER')\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello word\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token comment\">// @PostAuthorize 注解使用</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t<span class=\"token comment\">// 注解方法与上面两个基本相同但是他是在执行方法之后就行校验，也就是输出语句还会执行</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token annotation punctuation\">@PostAuthorize</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hasAnyAuthority('admin')\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">hello1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello word!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>\t<span class=\"token comment\">// @PostFilter 注解使用</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\t<span class=\"token comment\">// 此注解是对返回的数组进行指定的过滤</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\t<span class=\"token comment\">//filterObject 内置的对象相当于数组中的 User 对象，通过.username 属性过滤 username == 'admin1' 返回</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token annotation punctuation\">@PostFilter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filterObject.username == 'admin1'\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">hello1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">User</span><span class=\"token punctuation\">></span></span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        users<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wxf\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        users<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"admin2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"wxf\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token keyword\">return</span> users<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>\t<span class=\"token comment\">// @PreFilter 注解使用</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\t<span class=\"token comment\">// 此注解则是对请求参数数组进行指定过滤 </span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token annotation punctuation\">@PreFilter</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"filterObject.id % 2 == 0\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"用户注销\"><a class=\"anchor\" href=\"#用户注销\">#</a> 用户注销</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 配置在我们的 configure (HttpSecurity httpSecurity) 方法中</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\thttpSecurity<span class=\"token punctuation\">.</span><span class=\"token function\">logout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">logoutUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"logout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">logoutSuccessUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"注销之后跳转页面\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">permitAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 前后端不分离使用        </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    httpSecurity<span class=\"token punctuation\">.</span><span class=\"token function\">logout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">logoutUrl</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"logout\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">logoutSuccessHandler</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"自定义拦截器处理注销的操作\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">permitAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 适用于前后端分离开发使用</span></pre></td></tr></table></figure><h2 id=\"记住我\"><a class=\"anchor\" href=\"#记住我\">#</a> 记住我</h2>\n<p><img data-src=\"../../../../assets/image-20210522124629502.png\" alt=\"image-20210522124629502\" /></p>\n<p><img data-src=\"../../../../assets/image-20210522124637246.png\" alt=\"image-20210522124637246\" /></p>\n<p><img data-src=\"../../../../assets/image-20210522124646754.png\" alt=\"image-20210522124646754\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">PersistentTokenRepository</span> <span class=\"token function\">persistentTokenRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">JdbcTokenRepositoryImpl</span> tokenRepository <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">JdbcTokenRepositoryImpl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        tokenRepository<span class=\"token punctuation\">.</span><span class=\"token function\">setDataSource</span><span class=\"token punctuation\">(</span>dataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        tokenRepository<span class=\"token punctuation\">.</span><span class=\"token function\">setCreateTableOnStartup</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 系统在启动的时候生成 “记住我” 的数据表（只能使用一次）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> tokenRepository<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    httpSecurity<span class=\"token punctuation\">.</span><span class=\"token function\">rememberMe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">tokenRepository</span><span class=\"token punctuation\">(</span><span class=\"token function\">persistentTokenRepository</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">tokenValiditySeconds</span><span class=\"token punctuation\">(</span><span class=\"token number\">6000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">userDetailsService</span><span class=\"token punctuation\">(</span>userDetailsService<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://oxyzen-wxf.github.io/database/mysql/mysql-3/",
            "url": "https://oxyzen-wxf.github.io/database/mysql/mysql-3/",
            "title": "Mysql之排名",
            "date_published": "2021-08-26T05:44:55.000Z",
            "content_html": "<h2 id=\"学会在mysql中实现rank高级排名函数所有取前几名问题全部解决\"><a class=\"anchor\" href=\"#学会在mysql中实现rank高级排名函数所有取前几名问题全部解决\">#</a> 学会在 MySQL 中实现 Rank 高级排名函数，所有取前几名问题全部解决.</h2>\n<p>MySQL 中没有 Rank 排名函数，当我们需要查询排名时，只能使用 MySQL 数据库中的基本查询语句来查询普通排名。尽管如此，可不要小瞧基础而简单的查询语句，我们可以利用其来达到 Rank 函数一样的高级排名效果。</p>\n<p>在这里我用一个简单例子来实现排名的查询：</p>\n<p>首先我们先创建一个我们需要进行高级排名查询的 players 表，</p>\n<pre><code class=\"language-mysql\">CREATE TABLE `players` (\n  `pid` int(2) NOT NULL AUTO_INCREMENT,\n  `name` varchar(50) NOT NULL,\n  `age` int(2) NOT NULL,\n  PRIMARY KEY (`pid`),\n  UNIQUE KEY `name` (`name`)\n) ENGINE=InnoDB  DEFAULT CHARSET=latin1;\n</code></pre>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> <span class=\"token punctuation\">`</span>players<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>pid<span class=\"token punctuation\">`</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">`</span>age<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Samual'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Vino'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'John'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Andy'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">22</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Brian'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Dew'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Kris'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'William'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'George'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Peter'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">19</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Tom'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Andre'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"1-在mysql中实现rank普通排名函数\"><a class=\"anchor\" href=\"#1-在mysql中实现rank普通排名函数\">#</a> <strong>1、在 MySQL 中实现 Rank 普通排名函数</strong></h3>\n<p>在这里，我们希望获得一个排名字段的列，以及 age 的升序排列。所以我们的查询语句将是：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> pid<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> <span class=\"token variable\">@curRank</span> :<span class=\"token operator\">=</span> <span class=\"token variable\">@curRank</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token keyword\">AS</span> rank</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> players p<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@curRank</span> :<span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span> q</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> age</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">|</span> PID <span class=\"token operator\">|</span>    NAME <span class=\"token operator\">|</span> AGE <span class=\"token operator\">|</span> RANK <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">|</span><span class=\"token comment\">-----|---------|-----|------|</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">|</span>  <span class=\"token number\">10</span> <span class=\"token operator\">|</span>   Peter <span class=\"token operator\">|</span>  <span class=\"token number\">19</span> <span class=\"token operator\">|</span>    <span class=\"token number\">1</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">|</span>  <span class=\"token number\">12</span> <span class=\"token operator\">|</span>   Andre <span class=\"token operator\">|</span>  <span class=\"token number\">20</span> <span class=\"token operator\">|</span>    <span class=\"token number\">2</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">2</span> <span class=\"token operator\">|</span>    Vino <span class=\"token operator\">|</span>  <span class=\"token number\">20</span> <span class=\"token operator\">|</span>    <span class=\"token number\">3</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">3</span> <span class=\"token operator\">|</span>    John <span class=\"token operator\">|</span>  <span class=\"token number\">20</span> <span class=\"token operator\">|</span>    <span class=\"token number\">4</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">|</span>  <span class=\"token number\">11</span> <span class=\"token operator\">|</span>     Tom <span class=\"token operator\">|</span>  <span class=\"token number\">20</span> <span class=\"token operator\">|</span>    <span class=\"token number\">5</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">5</span> <span class=\"token operator\">|</span>   Brian <span class=\"token operator\">|</span>  <span class=\"token number\">21</span> <span class=\"token operator\">|</span>    <span class=\"token number\">6</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">4</span> <span class=\"token operator\">|</span>    Andy <span class=\"token operator\">|</span>  <span class=\"token number\">22</span> <span class=\"token operator\">|</span>    <span class=\"token number\">7</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">9</span> <span class=\"token operator\">|</span>  George <span class=\"token operator\">|</span>  <span class=\"token number\">23</span> <span class=\"token operator\">|</span>    <span class=\"token number\">8</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">6</span> <span class=\"token operator\">|</span>     Dew <span class=\"token operator\">|</span>  <span class=\"token number\">24</span> <span class=\"token operator\">|</span>    <span class=\"token number\">9</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">7</span> <span class=\"token operator\">|</span>    Kris <span class=\"token operator\">|</span>  <span class=\"token number\">25</span> <span class=\"token operator\">|</span>   <span class=\"token number\">10</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">1</span> <span class=\"token operator\">|</span>  Samual <span class=\"token operator\">|</span>  <span class=\"token number\">25</span> <span class=\"token operator\">|</span>   <span class=\"token number\">11</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">8</span> <span class=\"token operator\">|</span> William <span class=\"token operator\">|</span>  <span class=\"token number\">26</span> <span class=\"token operator\">|</span>   <span class=\"token number\">12</span> <span class=\"token operator\">|</span></pre></td></tr></table></figure><p>要在 mysql 中声明一个变量，你必须在变量名之前使用 @符号。FROM 子句中的 (@curRank := 0) 部分允许我们进行变量初始化，而不需要单独的 SET 命令。当然，也可以使用 SET，但它会处理两个查询：</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SET</span> <span class=\"token variable\">@curRank</span> :<span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span> pid<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> <span class=\"token variable\">@curRank</span> :<span class=\"token operator\">=</span> <span class=\"token variable\">@curRank</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token keyword\">AS</span> rank</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">FROM</span> players</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> age</pre></td></tr></table></figure><h3 id=\"2-查询以降序排列\"><a class=\"anchor\" href=\"#2-查询以降序排列\">#</a> <strong>2、查询以降序排列</strong></h3>\n<p>首要按 age 的降序排列，其次按 name 进行排列，只需修改查询语句加上 ORDER BY 和 DESC 以及列名即可。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> pid<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> <span class=\"token variable\">@curRank</span> :<span class=\"token operator\">=</span> <span class=\"token variable\">@curRank</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token keyword\">AS</span> rank</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">FROM</span> players p<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@curRank</span> :<span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span> q</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> age <span class=\"token keyword\">DESC</span><span class=\"token punctuation\">,</span> name</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">|</span> PID <span class=\"token operator\">|</span>    NAME <span class=\"token operator\">|</span> AGE <span class=\"token operator\">|</span> RANK <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">|</span><span class=\"token comment\">-----|---------|-----|------|</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">8</span> <span class=\"token operator\">|</span> William <span class=\"token operator\">|</span>  <span class=\"token number\">26</span> <span class=\"token operator\">|</span>    <span class=\"token number\">1</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">7</span> <span class=\"token operator\">|</span>    Kris <span class=\"token operator\">|</span>  <span class=\"token number\">25</span> <span class=\"token operator\">|</span>    <span class=\"token number\">2</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">1</span> <span class=\"token operator\">|</span>  Samual <span class=\"token operator\">|</span>  <span class=\"token number\">25</span> <span class=\"token operator\">|</span>    <span class=\"token number\">3</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">6</span> <span class=\"token operator\">|</span>     Dew <span class=\"token operator\">|</span>  <span class=\"token number\">24</span> <span class=\"token operator\">|</span>    <span class=\"token number\">4</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">9</span> <span class=\"token operator\">|</span>  George <span class=\"token operator\">|</span>  <span class=\"token number\">23</span> <span class=\"token operator\">|</span>    <span class=\"token number\">5</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">4</span> <span class=\"token operator\">|</span>    Andy <span class=\"token operator\">|</span>  <span class=\"token number\">22</span> <span class=\"token operator\">|</span>    <span class=\"token number\">6</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">5</span> <span class=\"token operator\">|</span>   Brian <span class=\"token operator\">|</span>  <span class=\"token number\">21</span> <span class=\"token operator\">|</span>    <span class=\"token number\">7</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">|</span>  <span class=\"token number\">12</span> <span class=\"token operator\">|</span>   Andre <span class=\"token operator\">|</span>  <span class=\"token number\">20</span> <span class=\"token operator\">|</span>    <span class=\"token number\">8</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">3</span> <span class=\"token operator\">|</span>    John <span class=\"token operator\">|</span>  <span class=\"token number\">20</span> <span class=\"token operator\">|</span>    <span class=\"token number\">9</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">|</span>  <span class=\"token number\">11</span> <span class=\"token operator\">|</span>     Tom <span class=\"token operator\">|</span>  <span class=\"token number\">20</span> <span class=\"token operator\">|</span>   <span class=\"token number\">10</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">2</span> <span class=\"token operator\">|</span>    Vino <span class=\"token operator\">|</span>  <span class=\"token number\">20</span> <span class=\"token operator\">|</span>   <span class=\"token number\">11</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">|</span>  <span class=\"token number\">10</span> <span class=\"token operator\">|</span>   Peter <span class=\"token operator\">|</span>  <span class=\"token number\">19</span> <span class=\"token operator\">|</span>   <span class=\"token number\">12</span> <span class=\"token operator\">|</span></pre></td></tr></table></figure><h3 id=\"3-在mysql中实现rank普通并列排名函数\"><a class=\"anchor\" href=\"#3-在mysql中实现rank普通并列排名函数\">#</a> <strong>3、在 MySQL 中实现 Rank 普通并列排名函数</strong></h3>\n<p>现在，如果我们希望为并列数据的行赋予相同的排名，则意味着那些在排名比较列中具有相同值的行应在 MySQL 中计算排名时保持相同的排名 (例如在我们的例子中的 age)。为此，我们使用了一个额外的变量。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> pid<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CASE</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">WHEN</span> <span class=\"token variable\">@prevRank</span> <span class=\"token operator\">=</span> age <span class=\"token keyword\">THEN</span> <span class=\"token variable\">@curRank</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">WHEN</span> <span class=\"token variable\">@prevRank</span> :<span class=\"token operator\">=</span> age <span class=\"token keyword\">THEN</span> <span class=\"token variable\">@curRank</span> :<span class=\"token operator\">=</span> <span class=\"token variable\">@curRank</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">END</span> <span class=\"token keyword\">AS</span> rank</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">FROM</span> players p<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@curRank</span> :<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@prevRank</span> :<span class=\"token operator\">=</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">)</span> r</pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> age</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">|</span> PID <span class=\"token operator\">|</span>    NAME <span class=\"token operator\">|</span> AGE <span class=\"token operator\">|</span> RANK <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">|</span><span class=\"token comment\">-----|---------|-----|------|</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">|</span>  <span class=\"token number\">10</span> <span class=\"token operator\">|</span>   Peter <span class=\"token operator\">|</span>  <span class=\"token number\">19</span> <span class=\"token operator\">|</span>    <span class=\"token number\">1</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">|</span>  <span class=\"token number\">12</span> <span class=\"token operator\">|</span>   Andre <span class=\"token operator\">|</span>  <span class=\"token number\">20</span> <span class=\"token operator\">|</span>    <span class=\"token number\">2</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">2</span> <span class=\"token operator\">|</span>    Vino <span class=\"token operator\">|</span>  <span class=\"token number\">20</span> <span class=\"token operator\">|</span>    <span class=\"token number\">2</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">3</span> <span class=\"token operator\">|</span>    John <span class=\"token operator\">|</span>  <span class=\"token number\">20</span> <span class=\"token operator\">|</span>    <span class=\"token number\">2</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">|</span>  <span class=\"token number\">11</span> <span class=\"token operator\">|</span>     Tom <span class=\"token operator\">|</span>  <span class=\"token number\">20</span> <span class=\"token operator\">|</span>    <span class=\"token number\">2</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">5</span> <span class=\"token operator\">|</span>   Brian <span class=\"token operator\">|</span>  <span class=\"token number\">21</span> <span class=\"token operator\">|</span>    <span class=\"token number\">3</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">4</span> <span class=\"token operator\">|</span>    Andy <span class=\"token operator\">|</span>  <span class=\"token number\">22</span> <span class=\"token operator\">|</span>    <span class=\"token number\">4</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">9</span> <span class=\"token operator\">|</span>  George <span class=\"token operator\">|</span>  <span class=\"token number\">23</span> <span class=\"token operator\">|</span>    <span class=\"token number\">5</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">6</span> <span class=\"token operator\">|</span>     Dew <span class=\"token operator\">|</span>  <span class=\"token number\">24</span> <span class=\"token operator\">|</span>    <span class=\"token number\">6</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">7</span> <span class=\"token operator\">|</span>    Kris <span class=\"token operator\">|</span>  <span class=\"token number\">25</span> <span class=\"token operator\">|</span>    <span class=\"token number\">7</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">1</span> <span class=\"token operator\">|</span>  Samual <span class=\"token operator\">|</span>  <span class=\"token number\">25</span> <span class=\"token operator\">|</span>    <span class=\"token number\">7</span> <span class=\"token operator\">|</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token operator\">|</span>   <span class=\"token number\">8</span> <span class=\"token operator\">|</span> William <span class=\"token operator\">|</span>  <span class=\"token number\">26</span> <span class=\"token operator\">|</span>    <span class=\"token number\">8</span> <span class=\"token operator\">|</span></pre></td></tr></table></figure><p>如上所示，具有相同数据和排行的两行或多行，它们都会获得相同的排名。玩家 Andre, Vino, John 和 Tom 都有相同的 age，所以他们排名并列第二。下一个最高 age 的玩家 (Brian) 排名第 3。这个查询相当于 MSSQL 和 ORACLE 中的 **DENSE_RANK ()** 函数。</p>\n<h3 id=\"4-在mysql中实现rank高级并列排名函数\"><a class=\"anchor\" href=\"#4-在mysql中实现rank高级并列排名函数\">#</a> <strong>4、在 MySQL 中实现 Rank 高级并列排名函数</strong></h3>\n<p>当使用 RANK () 函数时，如果两个或以上的行排名并列，则相同的行都会有相同的排名，但是实际排名中存在有关系的差距。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> pid<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span> rank <span class=\"token keyword\">FROM</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">SELECT</span> pid<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token variable\">@curRank</span> :<span class=\"token operator\">=</span> <span class=\"token keyword\">IF</span><span class=\"token punctuation\">(</span><span class=\"token variable\">@prevRank</span> <span class=\"token operator\">=</span> age<span class=\"token punctuation\">,</span> <span class=\"token variable\">@curRank</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@incRank</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">AS</span> rank<span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token variable\">@incRank</span> :<span class=\"token operator\">=</span> <span class=\"token variable\">@incRank</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token variable\">@prevRank</span> :<span class=\"token operator\">=</span> age</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">FROM</span> players p<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token variable\">@curRank</span> :<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@prevRank</span> :<span class=\"token operator\">=</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">@incRank</span> :<span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span> r </pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> age<span class=\"token punctuation\">)</span> s</pre></td></tr></table></figure><p>这是一个查询中的子查询。我们使用三个变量 (@incRank，@prevRank，@curRank) 来计算关系的情况下，在查询结果中我们已经补全了因为并列而导致的排名空位。我们已经封闭子查询到查询。这个查询相当于 MSSQL 和 ORACLE 中的 **RANK ()** 函数。</p>\n<pre><code class=\"language-text\">| PID |    NAME | AGE | RANK |\n|-----|---------|-----|------|\n|  10 |   Peter |  19 |    1 |\n|  12 |   Andre |  20 |    2 |\n|   2 |    Vino |  20 |    2 |\n|   3 |    John |  20 |    2 |\n|  11 |     Tom |  20 |    2 |\n|   5 |   Brian |  21 |    6 |\n|   4 |    Andy |  22 |    7 |\n|   9 |  George |  23 |    8 |\n|   6 |     Dew |  24 |    9 |\n|   7 |    Kris |  25 |   10 |\n|   1 |  Samual |  25 |   10 |\n|   8 | William |  26 |   12 |\n</code></pre>\n<p>在这里我们可以看到，Andre，Vino，John 和 Tom 都有相同的 age，所以他们排名并列第二。下一个最高年龄的球员 (Brian) 排名第 6，而不是第 3，因为有 4 个人并列排名在第 2。</p>\n<p>好的，我希望在这些例子后，能让你了解 RANK () 和 DENSE_RANK () 之间的区别，并且知道在哪里应使用哪个查询来获取 MySQL 中的 rank 函数。</p>\n",
            "tags": [
                "计算机科学",
                "数据库",
                "Mysql",
                "Mysql"
            ]
        },
        {
            "id": "https://oxyzen-wxf.github.io/worknote/interface-safety-1/",
            "url": "https://oxyzen-wxf.github.io/worknote/interface-safety-1/",
            "title": "接口安全性",
            "date_published": "2021-08-10T03:44:55.000Z",
            "content_html": "<h2 id=\"接口安全性的实现\"><a class=\"anchor\" href=\"#接口安全性的实现\">#</a> 接口安全性的实现</h2>\n<h3 id=\"缘由\"><a class=\"anchor\" href=\"#缘由\">#</a> 缘由</h3>\n<div class=\"note info\">\n<p>在前后端分离的时代，前端访问后端在进行 http 协议传输的时候，如果涉及到安全性比较高的请求的时候，我们就应该对前端传过来的请求体数据进行加密传输，后端进行解密处理。</p>\n<p>本文基于 SpringBoot 针对消息体进行解密，目前仅支持请求消息解密。（响应消息过大情况下，加密会带来严重的性能问题。）</p>\n</div>\n<h3 id=\"流程如下\"><a class=\"anchor\" href=\"#流程如下\">#</a> <strong>流程如下：</strong></h3>\n<p>使用 DES cbc 模式对称加密请求体。要求客户端请求前加对消息体进行加密，服务器端通过 SpringMVC Advice 拦截请求解密后，传给 controller 的方法。</p>\n<h3 id=\"controlleradvice与requestbodyadviceadapter\"><a class=\"anchor\" href=\"#controlleradvice与requestbodyadviceadapter\">#</a> @ControllerAdvice 与 RequestBodyAdviceAdapter</h3>\n<p><strong>@ControllerAdvice</strong> 注解可以扫描针对 Controller 层的扩展组件。通过 **@Sort<strong> 注解可以使其支持顺序加载。<br />\n<strong>RequestBodyAdviceAdapter</strong> 是</strong> RequestBodyAdvice** 适配器类，可以方便的扩展所需要的方法。</p>\n<p><strong>RequestBodyAdvice</strong> 功能如下：<br />\n<strong>允许在请求消息体在被读取及调用 convert 转换成实体之前做一些个人化操作</strong>，作用于含有 **@RequestBody<strong> 注解的请求。实现此接口的类，需要在</strong> RequestMappingHandlerAdapter<strong> 中配置或通过</strong> @ControllerAdvice** 注解配置。</p>\n<h3 id=\"具体使用\"><a class=\"anchor\" href=\"#具体使用\">#</a> 具体使用</h3>\n<h4 id=\"加密解密工具类\"><a class=\"anchor\" href=\"#加密解密工具类\">#</a> 加密解密工具类</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DesCbcUtil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 加解密统一使用的编码方式</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> encoding <span class=\"token operator\">=</span> <span class=\"token string\">\"UTF-8\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     * 3DES 加密</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * @param plainText 普通文本</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     * @return 加密后的文本，失败返回 null</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> plainText<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> secretKey<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> iv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token class-name\">DESedeKeySpec</span> deSedeKeySpec <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DESedeKeySpec</span><span class=\"token punctuation\">(</span>secretKey<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token class-name\">SecretKeyFactory</span> secretKeyFactory <span class=\"token operator\">=</span> <span class=\"token class-name\">SecretKeyFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"desede\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token class-name\">Key</span> desKey <span class=\"token operator\">=</span> secretKeyFactory<span class=\"token punctuation\">.</span><span class=\"token function\">generateSecret</span><span class=\"token punctuation\">(</span>deSedeKeySpec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token class-name\">Cipher</span> cipher <span class=\"token operator\">=</span> <span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"desede/CBC/PKCS5Padding\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token class-name\">IvParameterSpec</span> ips <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IvParameterSpec</span><span class=\"token punctuation\">(</span>iv<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            cipher<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">.</span>ENCRYPT_MODE<span class=\"token punctuation\">,</span> desKey<span class=\"token punctuation\">,</span> ips<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> encryptData <span class=\"token operator\">=</span> cipher<span class=\"token punctuation\">.</span><span class=\"token function\">doFinal</span><span class=\"token punctuation\">(</span>plainText<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span>encoding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            result <span class=\"token operator\">=</span> <span class=\"token class-name\">Base64Utils</span><span class=\"token punctuation\">.</span><span class=\"token function\">encodeToString</span><span class=\"token punctuation\">(</span>encryptData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DesCbcUtil encode error : &#123;&#125;\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     * 3DES 解密</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     * @param encryptText 加密文本</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     * @return 解密后明文，失败返回 null</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> encryptText<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> secretKey<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> iv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">String</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token class-name\">DESedeKeySpec</span> spec <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DESedeKeySpec</span><span class=\"token punctuation\">(</span>secretKey<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token class-name\">SecretKeyFactory</span> secretKeyFactory <span class=\"token operator\">=</span> <span class=\"token class-name\">SecretKeyFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"desede\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token class-name\">Key</span> desKey <span class=\"token operator\">=</span> secretKeyFactory<span class=\"token punctuation\">.</span><span class=\"token function\">generateSecret</span><span class=\"token punctuation\">(</span>spec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            <span class=\"token class-name\">Cipher</span> cipher <span class=\"token operator\">=</span> <span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">.</span><span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"desede/CBC/PKCS5Padding\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token class-name\">IvParameterSpec</span> ips <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">IvParameterSpec</span><span class=\"token punctuation\">(</span>iv<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            cipher<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Cipher</span><span class=\"token punctuation\">.</span>DECRYPT_MODE<span class=\"token punctuation\">,</span> desKey<span class=\"token punctuation\">,</span> ips<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> decryptData <span class=\"token operator\">=</span> cipher<span class=\"token punctuation\">.</span><span class=\"token function\">doFinal</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Base64Utils</span><span class=\"token punctuation\">.</span><span class=\"token function\">decodeFromString</span><span class=\"token punctuation\">(</span>encryptText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            result <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span>decryptData<span class=\"token punctuation\">,</span> encoding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DesCbcUtil decode error : &#123;&#125;\"</span><span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"自定义注解\"><a class=\"anchor\" href=\"#自定义注解\">#</a> 自定义注解</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Retention</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RetentionPolicy</span><span class=\"token punctuation\">.</span>RUNTIME<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Target</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>TYPE<span class=\"token punctuation\">,</span> <span class=\"token class-name\">ElementType</span><span class=\"token punctuation\">.</span>METHOD<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token annotation punctuation\">@interface</span> <span class=\"token class-name\">SecretBody</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"配置类secretproperties\"><a class=\"anchor\" href=\"#配置类secretproperties\">#</a> 配置类 SecretProperties</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"faster.secret\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Data</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SecretProperties</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>     * 是否开启</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> enabled<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>     * 是否扫描注解</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> scanAnnotation<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     * 扫描自定义注解</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Annotation</span><span class=\"token punctuation\">></span></span> annotationClass <span class=\"token operator\">=</span> <span class=\"token class-name\">SecretBody</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * 3des 密钥长度不得小于 24</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> desSecretKey <span class=\"token operator\">=</span> <span class=\"token string\">\"b2c17b46e2b1415392aab5a82869856c\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     * 3des IV 向量必须为 8 位</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> desIv <span class=\"token operator\">=</span> <span class=\"token string\">\"61960842\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"返回消息体的secrethttpmessage\"><a class=\"anchor\" href=\"#返回消息体的secrethttpmessage\">#</a> 返回消息体的 SecretHttpMessage</h4>\n<p><strong>需要实现 HttpInputMessage</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@AllArgsConstructor</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@NoArgsConstructor</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SecretHttpMessage</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">HttpInputMessage</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">InputStream</span> body<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">HttpHeaders</span> httpHeaders<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">InputStream</span> <span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HttpHeaders</span> <span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>httpHeaders<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"核心secretrequestadvice\"><a class=\"anchor\" href=\"#核心secretrequestadvice\">#</a> 核心 SecretRequestAdvice</h4>\n<p>其实主要核心就是这个类，去继承 RequestBodyAdvice 的适配器 RequestBodyAdviceAdapter，重写 beforeBodyRead 方法，直接翻译也可以明白该方法的意思，就是在请求体读取之前做的事，我们就可以在这个方法对前端传来的加密数据进行统一的解密操作。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@ControllerAdvice</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@ConditionalOnProperty</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"faster.secret\"</span><span class=\"token punctuation\">,</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"enabled\"</span><span class=\"token punctuation\">,</span> havingValue <span class=\"token operator\">=</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@EnableConfigurationProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">SecretProperties</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Order</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SecretRequestAdvice</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">RequestBodyAdviceAdapter</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">SecretProperties</span> secretProperties<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 是否支持加密消息体</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>     * @param methodParameter methodParameter</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>     * @return true/false</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">supportSecretRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodParameter</span> methodParameter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>secretProperties<span class=\"token punctuation\">.</span><span class=\"token function\">isScanAnnotation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 判断 class 是否存在注解</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>methodParameter<span class=\"token punctuation\">.</span><span class=\"token function\">getContainingClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotation</span><span class=\"token punctuation\">(</span>secretProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotationClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 判断方法是否存在注解</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> methodParameter<span class=\"token punctuation\">.</span><span class=\"token function\">getMethodAnnotation</span><span class=\"token punctuation\">(</span>secretProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getAnnotationClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">supports</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">MethodParameter</span> methodParameter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Type</span> targetType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpMessageConverter</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> converterType<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">HttpInputMessage</span> <span class=\"token function\">beforeBodyRead</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpInputMessage</span> inputMessage<span class=\"token punctuation\">,</span> <span class=\"token class-name\">MethodParameter</span> parameter<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Type</span> targetType<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Class</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">HttpMessageConverter</span><span class=\"token punctuation\">&lt;</span><span class=\"token operator\">?</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span> converterType<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 如果支持加密消息，进行消息解密。</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">boolean</span> supportSafeMessage <span class=\"token operator\">=</span> <span class=\"token function\">supportSecretRequest</span><span class=\"token punctuation\">(</span>parameter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token class-name\">String</span> httpBody<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>supportSafeMessage<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            httpBody <span class=\"token operator\">=</span> <span class=\"token function\">decryptBody</span><span class=\"token punctuation\">(</span>inputMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>httpBody <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpMessageNotReadableException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"request body decrypt error\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            httpBody <span class=\"token operator\">=</span> <span class=\"token class-name\">StreamUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyToString</span><span class=\"token punctuation\">(</span>inputMessage<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Charset</span><span class=\"token punctuation\">.</span><span class=\"token function\">defaultCharset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token comment\">// 返回处理后的消息体给 messageConvert</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SecretHttpMessage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ByteArrayInputStream</span><span class=\"token punctuation\">(</span>httpBody<span class=\"token punctuation\">.</span><span class=\"token function\">getBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> inputMessage<span class=\"token punctuation\">.</span><span class=\"token function\">getHeaders</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     * 解密消息体，3des 解析（cbc 模式）</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>     * @param inputMessage 消息体</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>     * @return 明文</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">decryptBody</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HttpInputMessage</span> inputMessage<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>        <span class=\"token class-name\">InputStream</span> encryptStream <span class=\"token operator\">=</span> inputMessage<span class=\"token punctuation\">.</span><span class=\"token function\">getBody</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>        <span class=\"token class-name\">String</span> encryptBody <span class=\"token operator\">=</span> <span class=\"token class-name\">StreamUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyToString</span><span class=\"token punctuation\">(</span>encryptStream<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Charset</span><span class=\"token punctuation\">.</span><span class=\"token function\">defaultCharset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token class-name\">DesCbcUtil</span><span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>encryptBody<span class=\"token punctuation\">,</span> secretProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getDesSecretKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> secretProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getDesIv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"测试\"><a class=\"anchor\" href=\"#测试\">#</a> 测试</h3>\n<p>使用以下注解即可快速开启全部请求的服务器端消息体解密功能。</p>\n<pre><code class=\"language-yam\">faster:\n  secret:\n    enabled: true\n</code></pre>\n<h4 id=\"局部解密\"><a class=\"anchor\" href=\"#局部解密\">#</a> 局部解密</h4>\n<p>使用 scan-annotation 可开启注解所标注的 Conrtoller 的类或其方法的解密功能。将要解密的方法或类上添加 @SecretBody 注解。并开启以下配置：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">faster</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">secret</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">scan-annotation</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr></table></figure><p>可以使用 annotation-class 配置自己的自定义注解：</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">faster</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">secret</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">scan-annotation</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">annotation-class</span><span class=\"token punctuation\">:</span> cn.test.xxx</pre></td></tr></table></figure><h4 id=\"注解使用\"><a class=\"anchor\" href=\"#注解使用\">#</a> 注解使用</h4>\n<p>作用于整个类：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SecretBody</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>作用于方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">DemoController</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token annotation punctuation\">@PostMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"secretBody\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token annotation punctuation\">@SecretBody</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">secretBody</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestBody</span> <span class=\"token class-name\">UserEntity</span> userEntity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&#123;&#125;\"</span><span class=\"token punctuation\">,</span> userEntity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"密钥\"><a class=\"anchor\" href=\"#密钥\">#</a> 密钥</h3>\n<p>默认密钥如下，可以自行修改</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">faster</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">secret</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">enabled</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">des-secret-key</span><span class=\"token punctuation\">:</span> b2c17b46e2b1415392aab5a82869856c</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">des-iv</span><span class=\"token punctuation\">:</span> <span class=\"token number\">61960842</span></pre></td></tr></table></figure><h3 id=\"前端调用\"><a class=\"anchor\" href=\"#前端调用\">#</a> 前端调用</h3>\n<p>前端调用时，需先将要请求的消息体通过 DEScbc 模式加密消息体（如 json 字符串）后传输。一般在 http 工具的请求拦截器中进行处理。如为 json，仍然需要指定 content-type 为 application/json。</p>\n",
            "tags": [
                "工作日常笔记",
                "Java",
                "java",
                "Safety"
            ]
        },
        {
            "id": "https://oxyzen-wxf.github.io/database/mysql/mysql-2/",
            "url": "https://oxyzen-wxf.github.io/database/mysql/mysql-2/",
            "title": "Mysql高级优化之最左前缀匹配原则",
            "date_published": "2021-08-01T05:44:55.000Z",
            "content_html": "<div class=\"note info\">\n<p>本文链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbGpsMTUwL3AvMTI5MzQwNzEuaHRtbA==\">https://www.cnblogs.com/ljl150/p/12934071.html</span></p>\n</div>\n<p>** 最左前缀匹配原则：** 在 MySQL 建立联合索引时会遵守最左前缀匹配原则，即最左优先，在检索数据时从联合索引的最左边开始匹配。</p>\n<p>要想理解联合索引的最左匹配原则，先来理解下索引的底层原理。索引的底层是一颗 B + 树，那么联合索引的底层也就是一颗 B + 树，只不过联合索引的 B + 树节点中存储的是键值。由于构建一棵 B + 树只能根据一个值来确定索引关系，所以数据库依赖联合索引最左的字段来构建。</p>\n<p>举例：创建一个（a,b）的联合索引，那么它的索引树就是下图的样子。</p>\n<p><img data-src=\"../../../assets/image-20210806132410506.png\" alt=\"image-20210806132410506\" /></p>\n<p>可以看到 a 的值是有顺序的，1，1，2，2，3，3，而 b 的值是没有顺序的 1，2，1，4，1，2。但是我们又可发现 a 在等值的情况下，b 值又是按顺序排列的，但是这种顺序是相对的。这是因为 MySQL 创建联合索引的规则是首先会对联合索引的最左边第一个字段排序，在第一个字段的排序基础上，然后在对第二个字段进行排序。所以 b=2 这种查询条件没有办法利用索引。</p>\n<p>由于整个过程是基于 explain 结果分析的，那接下来在了解下 explain 中的 type 字段和 key_lef 字段。</p>\n<p><strong>1.type</strong>：<strong>联接类型。下面给出各种联接类型，按照从最佳类型到最坏类型进行排序:（重点看 ref,rang,index）</strong></p>\n<p>system：表只有一行记录（等于系统表），这是 const 类型的特例，平时不会出现，可以忽略不计<br />\n　　　　const：表示通过索引一次就找到了，const 用于比较 primary key 或者 unique 索引。因为只需匹配一行数据，所有很快。如果将主键置于 where 列表中，mysql 就能将该查询转换为一个 const<br />\n　　　　eq_ref：唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。常见于主键 或 唯一索引扫描。<br />\n　　　　注意：ALL 全表扫描的表记录最少的表如 t1 表<br />\n　　　　<strong>ref</strong>：非唯一性索引扫描，返回匹配某个单独值的所有行。本质是也是一种索引访问，它返回所有匹配某个单独值的行，然而他可能会找到多个符合条件的行，所以它应该属于查找和扫描的混合体。<br />\n　　　　<strong>range</strong>：只检索给定范围的行，使用一个索引来选择行。key 列显示使用了那个索引。一般就是在 where 语句中出现了 bettween、&lt;、&gt;、in 等的查询。这种索引列上的范围扫描比全索引扫描要好。只需要开始于某个点，结束于另一个点，不用扫描全部索引。<br />\n　　　　<strong>index</strong>：Full Index Scan，index 与 ALL 区别为 index 类型只遍历索引树。这通常为 ALL 块，应为索引文件通常比数据文件小。（Index 与 ALL 虽然都是读全表，但 index 是从索引中读取，而 ALL 是从硬盘读取）<br />\n　　　　ALL：Full Table Scan，遍历全表以找到匹配的行</p>\n<p><strong>2.key_len</strong>：<strong>显示 MySQL 实际决定使用的索引的长度。如果索引是 NULL，则长度为 NULL。如果不是 NULL，则为使用的索引的长度。所以通过此字段就可推断出使用了那个索引。</strong></p>\n<p>计算规则：</p>\n<p>1. 定长字段，int 占用 4 个字节，date 占用 3 个字节，char (n) 占用 n 个字符。</p>\n<p>2. 变长字段 varchar (n)，则占用 n 个字符 + 两个字节。</p>\n<p>3. 不同的字符集，一个字符占用的字节数是不同的。Latin1 编码的，一个字符占用一个字节，gdk 编码的，一个字符占用两个字节，utf-8 编码的，一个字符占用三个字节。</p>\n<p>（由于我数据库使用的是 Latin1 编码的格式，所以在后面的计算中，一个字符按一个字节算）</p>\n<p>4. 对于所有的索引字段，如果设置为 NULL，则还需要 1 个字节。</p>\n<p>接下来进入正题！！！</p>\n<p>示例：</p>\n<p>首先创建一个表</p>\n<p><img data-src=\"../../../assets/image-20210806132419596.png\" alt=\"image-20210806132419596\" /></p>\n<p>该表中对 id 列.name 列.age 列建立了一个联合索引 id_name_age_index，实际上相当于建立了三个索引（id）（id_name）（id_name_age）。</p>\n<p>下面介绍下可能会使用到该索引的几种情况：</p>\n<p><strong>1. 全值匹配查询时</strong></p>\n<p><img data-src=\"../../../assets/image-20210806132435068.png\" alt=\"image-20210806132435068\" /></p>\n<p>通过观察上面的结果图可知，where 后面的查询条件，不论是使用（id，age，name）（name，id，age）还是（age，name，id）顺序，在查询时都使用到了联合索引，可能有同学会疑惑，为什么底下两个的搜索条件明明没有按照联合索引从左到右进行匹配，却也使用到了联合索引？ 这是因为 MySQL 中有查询优化器 explain，所以 sql 语句中字段的顺序不需要和联合索引定义的字段顺序相同，查询优化器会判断纠正这条 SQL 语句以什么样的顺序执行效率高，最后才能生成真正的执行计划，所以不论以何种顺序都可使用到联合索引。另外通过观察上面三个图中的 key_len 字段，也可说明在搜索时使用的联合索引中的（id_name_age）索引，因为 id 为 int 型，允许 null，所以占 5 个字节，name 为 char (10)，允许 null，又使用的是 latin1 编码，所以占 11 个字节，age 为 int 型允许 null，所以也占用 5 个字节，所以该索引长度为 21（5+11+5），而上面 key_len 的值也正好为 21，可证明使用的（id_name_age）索引。</p>\n<p><strong>2. 匹配最左边的列时</strong></p>\n<p><img data-src=\"../../../assets/image-20210806132454794.png\" alt=\"image-20210806132454794\" /></p>\n<p>该搜索是遵循最左匹配原则的，通过 key 字段也可知，在搜索过程中使用到了联合索引，且使用的是联合索引中的（id）索引，因为 key_len 字段值为 5，而 id 索引的长度正好为 5（因为 id 为 int 型，允许 null，所以占 5 个字节）。</p>\n<p>!!<a href=\"../../../assets/image-20210806132510398.png\">image-20210806132510398</a></p>\n<p>由于 id 到 name 是从左边依次往右边匹配，这两个字段中的值都是有序的，所以也遵循最左匹配原则，通过 key 字段可知，在搜索过程中也使用到了联合索引，但使用的是联合索引中的（id_name）索引，因为 key_len 字段值为 16，而 (id_name) 索引的长度正好为 16（因为 id 为 int 型，允许 null，所以占 5 个字节，name 为 char (10)，允许 null，又使用的是 latin1 编码，所以占 11 个字节）。</p>\n<p><img data-src=\"../../../assets/image-20210806132522934.png\" alt=\"image-20210806132522934\" /></p>\n<p>由于上面三个搜索都是从最左边 id 依次向右开始匹配的，所以都用到了 id_name_age_index 联合索引。</p>\n<p>那如果不是依次匹配呢？</p>\n<p><img data-src=\"../../../assets/image-20210806132531559.png\" alt=\"image-20210806132531559\" /></p>\n<p>通过 key 字段可知，在搜索过程中也使用到了联合索引，但使用的是联合索引中的（id）索引，从 key_len 字段也可知。因为联合索引树是按照 id 字段创建的，但 age 相对于 id 来说是无序的，只有 id 只有序的，所以他只能使用联合索引中的 id 索引。</p>\n<p><img data-src=\"../../../assets/image-20210806132541647.png\" alt=\"image-20210806132541647\" /></p>\n<p>通过观察发现上面 key 字段发现在搜索中也使用了 id_name_age_index 索引，可能许多同学就会疑惑它并没有遵守最左匹配原则，按道理会索引失效，为什么也使用到了联合索引？因为没有从 id 开始匹配，且 name 单独来说是无序的，所以它确实不遵循最左匹配原则，然而从 type 字段可知，它虽然使用了联合索引，但是它是对整个索引树进行了扫描，正好匹配到该索引，与最左匹配原则无关，一般只要是某联合索引的一部分，但又不遵循最左匹配原则时，都可能会采用 index 类型的方式扫描，但它的效率远不如最做匹配原则的查询效率高，index 类型类型的扫描方式是从索引第一个字段一个一个的查找，直到找到符合的某个索引，与 all 不同的是，index 是对所有索引树进行扫描，而 all 是对整个磁盘的数据进行全表扫描。</p>\n<p><img data-src=\"../../../assets/image-20210806132555875.png\" alt=\"image-20210806132555875\" /></p>\n<p>这两个结果跟上面的是同样的道理，由于它们都没有从最左边开始匹配，所以没有用到联合索引，使用的都是 index 全索引扫描。</p>\n<p><strong>3. 匹配列前缀</strong></p>\n<p>如果 id 是字符型，那么前缀匹配用的是索引，中坠和后缀用的是全表扫描。</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> staffs <span class=\"token keyword\">where</span> id <span class=\"token operator\">like</span> <span class=\"token string\">'A%'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 前缀都是排好序的，使用的都是联合索引</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> staffs <span class=\"token keyword\">where</span> id <span class=\"token operator\">like</span> <span class=\"token string\">'%A%'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 全表查询</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">select</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">from</span> staffs <span class=\"token keyword\">where</span> id <span class=\"token operator\">like</span> <span class=\"token string\">'%A'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 全表查询</span></pre></td></tr></table></figure><p><strong>4. 匹配范围值</strong></p>\n<p><img data-src=\"../../../assets/image-20210806132626314.png\" alt=\"image-20210806132626314\" /></p>\n<p>在匹配的过程中遇到 &lt;&gt;= 号，就会停止匹配，但 id 本身就是有序的，所以通过 possible_keys 字段和 key_len 字段可知，在该搜索过程中使用了联合索引的 id 索引（因为 id 为 int 型，允许 null，所以占 5 个字节），且进行的是 rang 范围查询。</p>\n<p><img data-src=\"../../../assets/image-20210806132637786.png\" alt=\"image-20210806132637786\" /></p>\n<p>由于不遵循最左匹配原则，且在 id&lt;4 的范围中，age 是无序的，所以使用的是 index 全索引扫描。</p>\n<p><img data-src=\"../../../assets/image-20210806132651982.png\" alt=\"image-20210806132651982\" /></p>\n<p>不遵循最左匹配原则，但在数据库中 id&lt;2 的只有一条（id），所以在 id&lt;2 的范围中，age 是有序的，所以使用的是 rang 范围查询。</p>\n<p><img data-src=\"../../../assets/image-20210806132701701.png\" alt=\"image-20210806132701701\" /></p>\n<p>不遵循最左匹配原则，而 age 又是无序的，所以进行的全索引扫描。</p>\n<p><strong>5. 准确匹配第一列并范围匹配其他某一列</strong></p>\n<p><strong><img data-src=\"../../../assets/image-20210806132717318.png\" alt=\"image-20210806132717318\" /></strong></p>\n<p>由于搜索中有 id=1，所以在 id 范围内 age 是无序的，所以只使用了联合索引中的 id 索引。</p>\n",
            "tags": [
                "计算机科学",
                "数据库",
                "Mysql",
                "Mysql"
            ]
        },
        {
            "id": "https://oxyzen-wxf.github.io/database/mysql/mysql-1/",
            "url": "https://oxyzen-wxf.github.io/database/mysql/mysql-1/",
            "title": "Mysql高级优化",
            "date_published": "2021-08-01T05:44:55.000Z",
            "content_html": "<h2 id=\"sql性能下降原因\"><a class=\"anchor\" href=\"#sql性能下降原因\">#</a> Sql 性能下降原因</h2>\n<ul>\n<li>查询语句写的烂</li>\n<li>索引失效</li>\n<li>关联查询太多 join</li>\n<li>服务器调优及各个参数设置</li>\n</ul>\n<h2 id=\"sql执行加载顺序\"><a class=\"anchor\" href=\"#sql执行加载顺序\">#</a> Sql 执行加载顺序</h2>\n<p><strong>手写顺序</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">select</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">join</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">from</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">where</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">having</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">limit</span></pre></td></tr></table></figure><p><strong>机读顺序</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">from</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">on</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">join</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">where</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">group</span> <span class=\"token keyword\">by</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">having</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">select</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">distinct</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">order</span> <span class=\"token keyword\">by</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">limit</span></pre></td></tr></table></figure><p><img data-src=\"../../../assets/image-20210805122912335.png\" alt=\"image-20210805122912335\" /></p>\n<h2 id=\"七种join理论\"><a class=\"anchor\" href=\"#七种join理论\">#</a> 七种 JOIN 理论</h2>\n<p><strong>内连接</strong></p>\n<p><img data-src=\"../../../assets/image-20210805123151132.png\" alt=\"image-20210805123151132\" /></p>\n<p><strong>左连接</strong></p>\n<p><img data-src=\"../../../assets/image-20210805123237265.png\" alt=\"image-20210805123237265\" /></p>\n<p><strong>右连接</strong></p>\n<p><img data-src=\"../../../assets/image-20210805123308720.png\" alt=\"image-20210805123308720\" /></p>\n<p><strong>左连接获取 A 独有的部分，右连接获取 B 独有的部分</strong></p>\n<p><strong><img data-src=\"../../../assets/image-20210805123540577.png\" alt=\"image-20210805123540577\" /></strong><img data-src=\"../../../assets/image-20210805123626332.png\" alt=\"image-20210805123626332\" /></p>\n<p><strong>全连接</strong> \t\t\t\t<strong>排除公有部分</strong></p>\n<p><img data-src=\"../../../assets/image-20210805123758081.png\" alt=\"image-20210805123758081\" /></p>\n<h2 id=\"索引\"><a class=\"anchor\" href=\"#索引\">#</a> 索引</h2>\n<p>MySQL 官方对索引的定义为：<strong>索引</strong>（Index）是帮助 MySQL 高效获取数据的数据结构。<br />\n可以得到索引的本质：<strong>索引是数据结构。</strong></p>\n<p><img data-src=\"../../../assets/image-20210805124451577.png\" alt=\"image-20210805124451577\" /></p>\n<p><strong>你可以简单理解为 “排好序的快速查找数据结构 &quot;</strong></p>\n<p><img data-src=\"../../../assets/image-20210805125139349.png\" alt=\"image-20210805125139349\" /></p>\n<p><img data-src=\"../../../assets/image-20210805125310807.png\" alt=\"image-20210805125310807\" /></p>\n<p><strong>数据本身之外，数据库还维护着一个满足特定查找算法的数据结构，这些数据结构以某种方式指向数据，这样就可以在这些数据结构的基础上实现高级查找算法 这种数据结构就是索引。</strong></p>\n<p>一般来说索引本身也很大，不可能全部存储在内存中，因此索引往往以<strong>索引文件</strong>的形式存储的磁盘上</p>\n<p><strong>我们平常所说的索引，如果没有特别指明，都是指 B 树（多路搜索树，并不一定是二叉的）结构组织的索引。</strong></p>\n<h3 id=\"优势\"><a class=\"anchor\" href=\"#优势\">#</a> 优势</h3>\n<p><img data-src=\"../../../assets/image-20210805130138303.png\" alt=\"image-20210805130138303\" /></p>\n<h3 id=\"劣势\"><a class=\"anchor\" href=\"#劣势\">#</a> 劣势</h3>\n<p><img data-src=\"../../../assets/image-20210805130429015.png\" alt=\"image-20210805130429015\" /></p>\n<h3 id=\"单值索引\"><a class=\"anchor\" href=\"#单值索引\">#</a> 单值索引</h3>\n<p><img data-src=\"../../../assets/image-20210805130644773.png\" alt=\"image-20210805130644773\" /></p>\n<h3 id=\"唯一索引\"><a class=\"anchor\" href=\"#唯一索引\">#</a> 唯一索引</h3>\n<p><img data-src=\"../../../assets/image-20210805130929181.png\" alt=\"image-20210805130929181\" /></p>\n<h3 id=\"复合索引\"><a class=\"anchor\" href=\"#复合索引\">#</a> 复合索引</h3>\n<p><img data-src=\"../../../assets/image-20210805130935879.png\" alt=\"image-20210805130935879\" /></p>\n<h3 id=\"基础语法\"><a class=\"anchor\" href=\"#基础语法\">#</a> 基础语法</h3>\n<p><img data-src=\"../../../assets/image-20210805131117353.png\" alt=\"image-20210805131117353\" /></p>\n<p><img data-src=\"../../../assets/image-20210805131141253.png\" alt=\"image-20210805131141253\" /></p>\n<h3 id=\"索引结构\"><a class=\"anchor\" href=\"#索引结构\">#</a> 索引结构</h3>\n<p><img data-src=\"../../../assets/image-20210805131352631.png\" alt=\"image-20210805131352631\" /></p>\n<p><img data-src=\"../../../assets/image-20210805131550229.png\" alt=\"image-20210805131550229\" /></p>\n<p><img data-src=\"../../../assets/image-20210805131640448.png\" alt=\"image-20210805131640448\" /></p>\n<p><img data-src=\"../../../assets/image-20210805131755374.png\" alt=\"image-20210805131755374\" /></p>\n<h3 id=\"哪些情况建索引\"><a class=\"anchor\" href=\"#哪些情况建索引\">#</a> 哪些情况建索引</h3>\n<p><img data-src=\"../../../assets/image-20210805131930569.png\" alt=\"image-20210805131930569\" /></p>\n<h3 id=\"哪些情况不适合建索引\"><a class=\"anchor\" href=\"#哪些情况不适合建索引\">#</a> 哪些情况不适合建索引</h3>\n<p><img data-src=\"../../../assets/image-20210805132342399.png\" alt=\"image-20210805132342399\" /></p>\n<p><img data-src=\"../../../assets/image-20210805132429118.png\" alt=\"image-20210805132429118\" /></p>\n<h2 id=\"性能分析\"><a class=\"anchor\" href=\"#性能分析\">#</a> 性能分析</h2>\n<p><img data-src=\"../../../assets/image-20210805204702772.png\" alt=\"image-20210805204702772\" /></p>\n<h3 id=\"mysql常见瓶颈\"><a class=\"anchor\" href=\"#mysql常见瓶颈\">#</a> MySql 常见瓶颈</h3>\n<p><img data-src=\"../../../assets/image-20210805204758404.png\" alt=\"image-20210805204758404\" /></p>\n<h3 id=\"explain\"><a class=\"anchor\" href=\"#explain\">#</a> explain</h3>\n<h4 id=\"作用\"><a class=\"anchor\" href=\"#作用\">#</a> <strong>作用</strong></h4>\n<p><img data-src=\"../../../assets/image-20210805205128798.png\" alt=\"image-20210805205128798\" /></p>\n<h4 id=\"用法\"><a class=\"anchor\" href=\"#用法\">#</a> <strong>用法</strong></h4>\n<p>explain 加 sql</p>\n<h4 id=\"能干啥\"><a class=\"anchor\" href=\"#能干啥\">#</a> 能干啥</h4>\n<p><img data-src=\"../../../assets/image-20210805205745306.png\" alt=\"image-20210805205745306\" /></p>\n<p><img data-src=\"../../../assets/image-20210805210022111.png\" alt=\"image-20210805210022111\" /></p>\n<h5 id=\"id\"><a class=\"anchor\" href=\"#id\">#</a> id</h5>\n<p><strong>id 相同，执行顺序由上到下</strong></p>\n<p><strong>id 不相同，如果是子查询，id 的序号会递增，id 值越大优先级越高，越先被执行</strong></p>\n<p><img data-src=\"../../../assets/image-20210805210814146.png\" alt=\"image-20210805210814146\" /></p>\n<p><strong>id 相同不同</strong></p>\n<p><img data-src=\"../../../assets/image-20210805211118823.png\" alt=\"image-20210805211118823\" /></p>\n<p><img data-src=\"../../../assets/image-20210805211216844.png\" alt=\"image-20210805211216844\" /></p>\n<h5 id=\"select_type\"><a class=\"anchor\" href=\"#select_type\">#</a> <strong>select_type</strong></h5>\n<p><strong>有哪些</strong></p>\n<p><img data-src=\"../../../assets/image-20210805211514570.png\" alt=\"image-20210805211514570\" /></p>\n<p><img data-src=\"../../../assets/image-20210805211547749.png\" alt=\"image-20210805211547749\" /></p>\n<p><img data-src=\"../../../assets/image-20210805211615184.png\" alt=\"image-20210805211615184\" /></p>\n<p><img data-src=\"../../../assets/image-20210805211641890.png\" alt=\"image-20210805211641890\" /></p>\n<p><img data-src=\"../../../assets/image-20210805211650170.png\" alt=\"image-20210805211650170\" /></p>\n<p><img data-src=\"../../../assets/image-20210805211721648.png\" alt=\"image-20210805211721648\" /></p>\n<p><img data-src=\"../../../assets/image-20210805211808920.png\" alt=\"image-20210805211808920\" /></p>\n<h5 id=\"type\"><a class=\"anchor\" href=\"#type\">#</a> type</h5>\n<p><img data-src=\"../../../assets/image-20210805212052908.png\" alt=\"image-20210805212052908\" /></p>\n<p><img data-src=\"../../../assets/image-20210805212103795.png\" alt=\"image-20210805212103795\" /></p>\n<p><img data-src=\"../../../assets/image-20210805212242147.png\" alt=\"image-20210805212242147\" /></p>\n<p><strong>ALL:\t全表扫描</strong></p>\n<p><strong>system：\t表只有一行记录（等于系统表），这是 const 类型的特列，平时不会出现，这个也可以忽略不计</strong></p>\n<p><strong>const:\t表示通过索引一次就找到了，const 用于比较 primary key 或者 unique 索引，因为只匹配一行数据，所以很快如将主键置于 where 列表中，MySQL 就能将该查询转换为一个常量</strong></p>\n<p><img data-src=\"../../../assets/image-20210805212725787.png\" alt=\"image-20210805212725787\" /></p>\n<p><strong>先执行 t1，然后衍生表，由于 id=1 直接索引到，然后衍生表查询就相当于一张表一条记录所以是 system</strong></p>\n<p><strong>eq_ref:\t唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。常见子主键或唯一索引扫描</strong></p>\n<p><img data-src=\"../../../assets/image-20210805213007613.png\" alt=\"image-20210805213007613\" /></p>\n<p>**ref:\t**</p>\n<p>非唯一性索引扫描，返回匹配某个单独值的所有行.<br />\n 本质上也是一种索引访问，它返回所有匹配某个单独值的行，然而，它可能会找到多个符合条件的行，所以他应该属于查找和扫描的混合体</p>\n<p>**range: \t**</p>\n<p>只检索给定范围的行，使用一个索引来选择行。key 列显示使用了哪个索引，一般就是在你的 where 语句中出现了 between，&lt;、&gt;、in 等的查询这种范围扫描索引扫描比全表扫描要好，因为它只需要开始于索引的某一点，而结束语另一点，不用扫描全部索引。</p>\n<p><img data-src=\"../../../assets/image-20210805213917599.png\" alt=\"image-20210805213917599\" /></p>\n<p><strong>index</strong></p>\n<p>Full Index Scan，index 与 ALL 区别为 index 类型只遍历索引树。这通常比 ALL 快，因为索引文件通常比数据文小。<br />\n也就是说虽然 all 和 Index 都是读全表，但 index 是从索引中读取的，而 all 是从硬盘中读的）</p>\n<h5 id=\"possible_key\"><a class=\"anchor\" href=\"#possible_key\">#</a> <strong>possible_key</strong></h5>\n<p><img data-src=\"../../../assets/image-20210805214416395.png\" alt=\"image-20210805214416395\" /></p>\n<h5 id=\"key\"><a class=\"anchor\" href=\"#key\">#</a> <strong>key</strong></h5>\n<p><img data-src=\"../../../assets/image-20210805214538751.png\" alt=\"image-20210805214538751\" /></p>\n<p><img data-src=\"../../../assets/image-20210805214831663.png\" alt=\"image-20210805214831663\" /></p>\n<p><strong>覆盖索引？</strong></p>\n<h5 id=\"key_len\"><a class=\"anchor\" href=\"#key_len\">#</a> <strong>key_len</strong></h5>\n<p><img data-src=\"../../../assets/image-20210805215221927.png\" alt=\"image-20210805215221927\" /></p>\n<h5 id=\"ref\"><a class=\"anchor\" href=\"#ref\">#</a> <strong>ref</strong></h5>\n<p><img data-src=\"../../../assets/image-20210805215826908.png\" alt=\"image-20210805215826908\" /></p>\n<p><img data-src=\"../../../assets/image-20210805220306183.png\" alt=\"image-20210805220306183\" /></p>\n<h5 id=\"row\"><a class=\"anchor\" href=\"#row\">#</a> <strong>row</strong></h5>\n<p><img data-src=\"../../../assets/image-20210805220504648.png\" alt=\"image-20210805220504648\" /></p>\n<p><img data-src=\"../../../assets/image-20210805220810346.png\" alt=\"image-20210805220810346\" /></p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t^</p>\n<p>​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t|</p>\n<p><img data-src=\"../../../assets/image-20210805220756773.png\" alt=\"image-20210805220756773\" /></p>\n<h5 id=\"extra\"><a class=\"anchor\" href=\"#extra\">#</a> <strong>Extra</strong></h5>\n<p><img data-src=\"../../../assets/image-20210805221353703.png\" alt=\"image-20210805221353703\" /></p>\n<p><img data-src=\"../../../assets/image-20210805221810956.png\" alt=\"image-20210805221810956\" /></p>\n<p><img data-src=\"../../../assets/image-20210805221958646.png\" alt=\"image-20210805221958646\" /></p>\n<p><img data-src=\"../../../assets/image-20210805222414020.png\" alt=\"image-20210805222414020\" /></p>\n<p><img data-src=\"../../../assets/image-20210805222543614.png\" alt=\"image-20210805222543614\" /></p>\n<p><strong>覆盖索引：直接查询了索引数据，并没有回表，所以可能用到 key 为 null，而实际却用到了索引</strong></p>\n<p><img data-src=\"../../../assets/image-20210805222718253.png\" alt=\"image-20210805222718253\" /></p>\n<p><img data-src=\"../../../assets/image-20210805222913336.png\" alt=\"image-20210805222913336\" /></p>\n<p><img data-src=\"../../../assets/image-20210805222921848.png\" alt=\"image-20210805222921848\" /></p>\n<p><img data-src=\"../../../assets/image-20210805222936020.png\" alt=\"image-20210805222936020\" /></p>\n<p>下面两个比较少用</p>\n<p><img data-src=\"../../../assets/image-20210805223011966.png\" alt=\"image-20210805223011966\" /></p>\n<p><img data-src=\"../../../assets/image-20210805223319670.png\" alt=\"image-20210805223319670\" /></p>\n<p><img data-src=\"../../../assets/image-20210805223425602.png\" alt=\"image-20210805223425602\" /></p>\n<h2 id=\"案例优化\"><a class=\"anchor\" href=\"#案例优化\">#</a> 案例优化</h2>\n<h3 id=\"索引分析\"><a class=\"anchor\" href=\"#索引分析\">#</a> 索引分析</h3>\n<h4 id=\"单表\"><a class=\"anchor\" href=\"#单表\">#</a> 单表</h4>\n<h5 id=\"建sql\"><a class=\"anchor\" href=\"#建sql\">#</a> 建 sql</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token punctuation\">`</span>article<span class=\"token punctuation\">`</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">`</span>author_id<span class=\"token punctuation\">`</span> <span class=\"token keyword\">INT</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">`</span>category_id<span class=\"token punctuation\">`</span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">`</span>views<span class=\"token punctuation\">`</span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">`</span>comments<span class=\"token punctuation\">`</span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">`</span>title<span class=\"token punctuation\">`</span> <span class=\"token keyword\">VARBINARY</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">`</span>content<span class=\"token punctuation\">`</span> <span class=\"token keyword\">TEXT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> <span class=\"token punctuation\">`</span>article<span class=\"token punctuation\">`</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>author_id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">`</span>category_id<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">,</span><span class=\"token punctuation\">`</span>views<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">,</span><span class=\"token punctuation\">`</span>comments<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">,</span><span class=\"token punctuation\">`</span>title<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">,</span><span class=\"token punctuation\">`</span>content<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> ARTICLE<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"案例\"><a class=\"anchor\" href=\"#案例\">#</a> 案例</h5>\n<p><img data-src=\"../../../assets/image-20210806115552306.png\" alt=\"image-20210806115552306\" /></p>\n<p>#查询 category-id 为 1 且 comments 大于 1 的情况下，views 最多的 article-id.</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span>author_id <span class=\"token keyword\">FROM</span> article <span class=\"token keyword\">WHERE</span> category_id<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">AND</span> comments <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> views <span class=\"token keyword\">DESC</span>  <span class=\"token keyword\">limit</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><p><img data-src=\"../../../assets/image-20210806115614264.png\" alt=\"image-20210806115614264\" /></p>\n<h5 id=\"查看性能\"><a class=\"anchor\" href=\"#查看性能\">#</a> <strong>查看性能</strong></h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span>author_id <span class=\"token keyword\">FROM</span> article <span class=\"token keyword\">WHERE</span> category_id<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">AND</span> comments <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> views <span class=\"token keyword\">DESC</span>  <span class=\"token keyword\">limit</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><p><img data-src=\"../../../assets/image-20210806115714075.png\" alt=\"image-20210806115714075\" /></p>\n<h5 id=\"结论\"><a class=\"anchor\" href=\"#结论\">#</a> <strong>结论</strong>：</h5>\n<p>很显然，type 是 ALL，即最坏的情况.Extra 里还出现了 Using filesort，也是最坏的情况。优化是必须的。</p>\n<h5 id=\"开始优化\"><a class=\"anchor\" href=\"#开始优化\">#</a> 开始优化</h5>\n<p><strong>新建索引</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">INDEX</span> idx_article_ccv <span class=\"token keyword\">ON</span> article<span class=\"token punctuation\">(</span>category_id<span class=\"token punctuation\">,</span>comments<span class=\"token punctuation\">,</span>views<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 复合索引</span></pre></td></tr></table></figure><p><img data-src=\"../../../assets/image-20210806120142999.png\" alt=\"image-20210806120142999\" /></p>\n<p><strong>第一次优化</strong></p>\n<p><img data-src=\"../../../assets/image-20210806120317729.png\" alt=\"image-20210806120317729\" /></p>\n<p><strong>走索引了但是还有文件排序，原因是使用了 comments&gt;1 范围查找导致排序索引失效出现文件排序</strong></p>\n<p><strong>删除索引</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DROP</span> <span class=\"token keyword\">INDEX</span> idx_article_ccv <span class=\"token keyword\">ON</span> article</pre></td></tr></table></figure><p><img data-src=\"../../../assets/image-20210806121755618.png\" alt=\"image-20210806121755618\" /></p>\n<p><strong>新建索引</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">INDEX</span> idx_article_cv <span class=\"token keyword\">ON</span> article<span class=\"token punctuation\">(</span>category_id<span class=\"token punctuation\">,</span>views<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"../../../assets/image-20210806122003419.png\" alt=\"image-20210806122003419\" /></p>\n<p><strong>结果</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> id<span class=\"token punctuation\">,</span>author_id <span class=\"token keyword\">FROM</span> article <span class=\"token keyword\">WHERE</span> category_id<span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token operator\">AND</span> comments <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token keyword\">ORDER</span> <span class=\"token keyword\">BY</span> views <span class=\"token keyword\">DESC</span>  <span class=\"token keyword\">limit</span> <span class=\"token number\">1</span></pre></td></tr></table></figure><p><img data-src=\"../../../assets/image-20210806122043958.png\" alt=\"image-20210806122043958\" /></p>\n<p>既用到索引又没有出现 Using filesort</p>\n<p><strong>注意：</strong></p>\n<p><img data-src=\"../../../assets/image-20210806122148335.png\" alt=\"image-20210806122148335\" /></p>\n<h4 id=\"两表\"><a class=\"anchor\" href=\"#两表\">#</a> 两表</h4>\n<h5 id=\"建sql-2\"><a class=\"anchor\" href=\"#建sql-2\">#</a> 建 sql</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token punctuation\">`</span>class<span class=\"token punctuation\">`</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">`</span>card<span class=\"token punctuation\">`</span> <span class=\"token keyword\">INT</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token punctuation\">`</span>book<span class=\"token punctuation\">`</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">`</span>bookid<span class=\"token punctuation\">`</span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">`</span>card<span class=\"token punctuation\">`</span> <span class=\"token keyword\">INT</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> class<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> book<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"案例-2\"><a class=\"anchor\" href=\"#案例-2\">#</a> 案例</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> class <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> book <span class=\"token keyword\">on</span> book<span class=\"token punctuation\">.</span>card <span class=\"token operator\">=</span> class<span class=\"token punctuation\">.</span>card</pre></td></tr></table></figure><p><img data-src=\"../../../assets/image-20210806122850658.png\" alt=\"image-20210806122850658\" /></p>\n<p><strong>左右外连接加索引</strong></p>\n<p><strong>测试，先给右表 book 加索引，查看结果</strong></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> book <span class=\"token keyword\">ADD</span> <span class=\"token keyword\">INDEX</span> Y <span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>card<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"../../../assets/image-20210806123128017.png\" alt=\"image-20210806123128017\" /></p>\n<p><img data-src=\"../../../assets/image-20210806124216985.png\" alt=\"image-20210806124216985\" /></p>\n<p><strong>测试，给左表加索引，结果</strong></p>\n<p><img data-src=\"../../../assets/image-20210806123719408.png\" alt=\"image-20210806123719408\" /></p>\n<p><strong>左连接因为左表要全部出现</strong></p>\n<h5 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h5>\n<p>左连接索引建到右表，右连接则相反，给主表的相反表建索引</p>\n<h4 id=\"三表\"><a class=\"anchor\" href=\"#三表\">#</a> 三表</h4>\n<h5 id=\"建sql-3\"><a class=\"anchor\" href=\"#建sql-3\">#</a> 建 sql</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token keyword\">IF</span> <span class=\"token operator\">NOT</span> <span class=\"token keyword\">EXISTS</span> <span class=\"token punctuation\">`</span>phone<span class=\"token punctuation\">`</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">`</span>phoneid<span class=\"token punctuation\">`</span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">`</span>card<span class=\"token punctuation\">`</span> <span class=\"token keyword\">INT</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token keyword\">ENGINE</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">INNODB</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> phone<span class=\"token punctuation\">(</span>card<span class=\"token punctuation\">)</span><span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h5 id=\"案例-3\"><a class=\"anchor\" href=\"#案例-3\">#</a> 案例</h5>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> class c <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> book b <span class=\"token keyword\">ON</span> b<span class=\"token punctuation\">.</span>card <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>card <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> phone p <span class=\"token keyword\">ON</span> p<span class=\"token punctuation\">.</span>card <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>card</pre></td></tr></table></figure><p><img data-src=\"../../../assets/image-20210806125656843.png\" alt=\"image-20210806125656843\" /></p>\n<p>上面未建索引，根据前面两表我们得知给非主表建立索引性能更高，因为主表要显示全部，所以这里 给 book 和 phone 建立 card 索引</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> book <span class=\"token keyword\">add</span> <span class=\"token keyword\">INDEX</span> X<span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>card<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> phone <span class=\"token keyword\">add</span> <span class=\"token keyword\">INDEX</span> Y<span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>card<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">EXPLAIN</span> <span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> class c <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> book b <span class=\"token keyword\">ON</span> b<span class=\"token punctuation\">.</span>card <span class=\"token operator\">=</span> c<span class=\"token punctuation\">.</span>card <span class=\"token keyword\">LEFT</span> <span class=\"token keyword\">JOIN</span> phone p <span class=\"token keyword\">ON</span> p<span class=\"token punctuation\">.</span>card <span class=\"token operator\">=</span> b<span class=\"token punctuation\">.</span>card</pre></td></tr></table></figure><p><img data-src=\"../../../assets/image-20210806125908533.png\" alt=\"image-20210806125908533\" /></p>\n<h5 id=\"结论-2\"><a class=\"anchor\" href=\"#结论-2\">#</a> 结论</h5>\n<p><img data-src=\"../../../assets/image-20210806130024507.png\" alt=\"image-20210806130024507\" /></p>\n<p><img data-src=\"../../../assets/image-20210806130150271.png\" alt=\"image-20210806130150271\" /></p>\n<h3 id=\"索引失效\"><a class=\"anchor\" href=\"#索引失效\">#</a> 索引失效</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> staffs<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>id <span class=\"token keyword\">INT</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span><span class=\"token string\">''</span> <span class=\"token keyword\">COMMENT</span><span class=\"token string\">'姓名'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">`</span>age<span class=\"token punctuation\">`</span> <span class=\"token keyword\">INT</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span> <span class=\"token keyword\">COMMENT</span><span class=\"token string\">'年龄'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">`</span>pos<span class=\"token punctuation\">`</span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span><span class=\"token string\">''</span> <span class=\"token keyword\">COMMENT</span><span class=\"token string\">'职位'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">`</span>add_time<span class=\"token punctuation\">`</span> <span class=\"token keyword\">TIMESTAMP</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CURRENT_TIMESTAMP</span> <span class=\"token keyword\">COMMENT</span><span class=\"token string\">'入职时间'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token keyword\">CHARSET</span> utf8 <span class=\"token keyword\">COMMENT</span><span class=\"token string\">'员工记录表'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> staffs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">`</span>age<span class=\"token punctuation\">`</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">`</span>pos<span class=\"token punctuation\">`</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">`</span>add_time<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token string\">'z3'</span><span class=\"token punctuation\">,</span><span class=\"token number\">22</span><span class=\"token punctuation\">,</span><span class=\"token string\">'manager'</span><span class=\"token punctuation\">,</span><span class=\"token function\">NOW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> staffs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">`</span>age<span class=\"token punctuation\">`</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">`</span>pos<span class=\"token punctuation\">`</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">`</span>add_time<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token string\">'July'</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token string\">'dev'</span><span class=\"token punctuation\">,</span><span class=\"token function\">NOW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> staffs<span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">`</span>age<span class=\"token punctuation\">`</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">`</span>pos<span class=\"token punctuation\">`</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">`</span>add_time<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2000'</span><span class=\"token punctuation\">,</span><span class=\"token number\">23</span><span class=\"token punctuation\">,</span><span class=\"token string\">'dev'</span><span class=\"token punctuation\">,</span><span class=\"token function\">NOW</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">ALTER</span> <span class=\"token keyword\">TABLE</span> staffs <span class=\"token keyword\">ADD</span> <span class=\"token keyword\">INDEX</span> index_staffs_nameAgePos<span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>name<span class=\"token punctuation\">`</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">`</span>age<span class=\"token punctuation\">`</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">`</span>pos<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"../../../assets/image-20210806130635041.png\" alt=\"image-20210806130635041\" /></p>\n<h4 id=\"全值匹配\"><a class=\"anchor\" href=\"#全值匹配\">#</a> 全值匹配</h4>\n<p><img data-src=\"../../../assets/image-20210806130921439.png\" alt=\"image-20210806130921439\" /></p>\n<p><img data-src=\"../../../assets/image-20210806130941565.png\" alt=\"image-20210806130941565\" /></p>\n<p><img data-src=\"../../../assets/image-20210806133157361.png\" alt=\"image-20210806133157361\" /></p>\n<p><img data-src=\"../../../assets/image-20210806133544841.png\" alt=\"image-20210806133544841\" /></p>\n<h4 id=\"索引列少计算少用mysql函数\"><a class=\"anchor\" href=\"#索引列少计算少用mysql函数\">#</a> 索引列少计算少用 mysql 函数</h4>\n<p><img data-src=\"../../../assets/image-20210806133820031.png\" alt=\"image-20210806133820031\" /></p>\n<p><img data-src=\"../../../assets/image-20210806133911274.png\" alt=\"image-20210806133911274\" /></p>\n<p><strong>范围索引失效，上面 name，范围 age 也用到了，但是 pos 没用到索引失效了</strong></p>\n<p><img data-src=\"../../../assets/image-20210806134058052.png\" alt=\"image-20210806134058052\" /></p>\n<p><img data-src=\"../../../assets/image-20210806134254017.png\" alt=\"image-20210806134254017\" /></p>\n<p><img data-src=\"../../../assets/image-20210806134430668.png\" alt=\"image-20210806134430668\" /></p>\n<p><img data-src=\"../../../assets/image-20210806134641961.png\" alt=\"image-20210806134641961\" /></p>\n<p><strong>8.0mysql 优化了！= 变为 range 了</strong></p>\n<p><img data-src=\"../../../assets/image-20210806134724550.png\" alt=\"image-20210806134724550\" /></p>\n<p><img data-src=\"../../../assets/image-20210806135041075.png\" alt=\"image-20210806135041075\" /></p>\n<p><strong>解决：使用覆盖索引，即查询字段即都是索引字段</strong></p>\n<p><img data-src=\"../../../assets/image-20210806140106154.png\" alt=\"image-20210806140106154\" /></p>\n<p><img data-src=\"../../../assets/image-20210806140226407.png\" alt=\"image-20210806140226407\" /></p>\n<h3 id=\"索引面试题分析\"><a class=\"anchor\" href=\"#索引面试题分析\">#</a> 索引面试题分析</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUtXNDExdTd2eT9wPTQ0\">https://www.bilibili.com/video/BV1KW411u7vy?p=44</span></p>\n<p><img data-src=\"../../../assets/image-20210807142833863.png\" alt=\"image-20210807142833863\" /></p>\n<p><img data-src=\"../../../assets/image-20210807143100262.png\" alt=\"image-20210807143100262\" /></p>\n<p><img data-src=\"../../../assets/image-20210807143233083.png\" alt=\"image-20210807143233083\" /></p>\n<p><strong>vachar 引号不能丢</strong></p>\n<h2 id=\"查询截取分析\"><a class=\"anchor\" href=\"#查询截取分析\">#</a> 查询截取分析</h2>\n<h3 id=\"小表驱动大表\"><a class=\"anchor\" href=\"#小表驱动大表\">#</a> 小表驱动大表</h3>\n<p><img data-src=\"../../../assets/image-20210807143738481.png\" alt=\"image-20210807143738481\" /></p>\n<p><img data-src=\"../../../assets/image-20210807144048251.png\" alt=\"image-20210807144048251\" /></p>\n<p><img data-src=\"../../../assets/image-20210807144202805.png\" alt=\"image-20210807144202805\" /></p>\n<p><img data-src=\"../../../assets/image-20210807144417634.png\" alt=\"image-20210807144417634\" /></p>\n<p><img data-src=\"../../../assets/image-20210807144554068.png\" alt=\"image-20210807144554068\" /></p>\n<h3 id=\"order排序优化\"><a class=\"anchor\" href=\"#order排序优化\">#</a> order 排序优化</h3>\n<p><img data-src=\"../../../assets/image-20210807145026623.png\" alt=\"image-20210807145026623\" /></p>\n<p><strong>下面例子都是看 order by 会不会产生 Using filesort</strong></p>\n<p><img data-src=\"../../../assets/image-20210807145351522.png\" alt=\"image-20210807145351522\" /></p>\n<p><img data-src=\"../../../assets/image-20210807145429603.png\" alt=\"image-20210807145429603\" /></p>\n<p><img data-src=\"../../../assets/image-20210807145505301.png\" alt=\"image-20210807145505301\" /></p>\n<p><img data-src=\"../../../assets/image-20210807145533361.png\" alt=\"image-20210807145533361\" /></p>\n<p><img data-src=\"../../../assets/image-20210807145609674.png\" alt=\"image-20210807145609674\" /></p>\n<p><img data-src=\"../../../assets/image-20210807145709575.png\" alt=\"image-20210807145709575\" /></p>\n<p><img data-src=\"../../../assets/image-20210807145723140.png\" alt=\"image-20210807145723140\" /></p>\n<p><img data-src=\"../../../assets/image-20210807145836659.png\" alt=\"image-20210807145836659\" /></p>\n<p><img data-src=\"../../../assets/image-20210807145854280.png\" alt=\"image-20210807145854280\" /></p>\n<p><strong>双路排序</strong></p>\n<p><img data-src=\"../../../assets/image-20210807145932526.png\" alt=\"image-20210807145932526\" /></p>\n<p><strong>单路排序</strong></p>\n<p><img data-src=\"../../../assets/image-20210807150047086.png\" alt=\"image-20210807150047086\" /></p>\n<p><img data-src=\"../../../assets/image-20210807150113204.png\" alt=\"image-20210807150113204\" /></p>\n<p><img data-src=\"../../../assets/image-20210807150236430.png\" alt=\"image-20210807150236430\" /></p>\n<p><img data-src=\"../../../assets/image-20210807150425228.png\" alt=\"image-20210807150425228\" /></p>\n<p><img data-src=\"../../../assets/image-20210807150431011.png\" alt=\"image-20210807150431011\" /></p>\n<h3 id=\"为排序使用索引\"><a class=\"anchor\" href=\"#为排序使用索引\">#</a> 为排序使用索引</h3>\n<p><img data-src=\"../../../assets/image-20210807150635874.png\" alt=\"image-20210807150635874\" /></p>\n<h3 id=\"groupby优化\"><a class=\"anchor\" href=\"#groupby优化\">#</a> groupby 优化</h3>\n<p>基本等同于 order by 优化</p>\n<p><img data-src=\"../../../assets/image-20210807151119484.png\" alt=\"image-20210807151119484\" /></p>\n<h3 id=\"慢查询日志\"><a class=\"anchor\" href=\"#慢查询日志\">#</a> 慢查询日志</h3>\n<p><img data-src=\"../../../assets/image-20210807151235600.png\" alt=\"image-20210807151235600\" /></p>\n<p><img data-src=\"../../../assets/image-20210807151331702.png\" alt=\"image-20210807151331702\" /></p>\n<p><img data-src=\"../../../assets/image-20210807151356364.png\" alt=\"image-20210807151356364\" /></p>\n<p><img data-src=\"../../../assets/image-20210807151410645.png\" alt=\"image-20210807151410645\" /></p>\n<p><img data-src=\"../../../assets/image-20210807151425555.png\" alt=\"image-20210807151425555\" /></p>\n<p><img data-src=\"../../../assets/image-20210807151445683.png\" alt=\"image-20210807151445683\" /></p>\n<p><img data-src=\"../../../assets/image-20210807151517146.png\" alt=\"image-20210807151517146\" /></p>\n<p><img data-src=\"../../../assets/image-20210807151621121.png\" alt=\"image-20210807151621121\" /></p>\n<p><img data-src=\"../../../assets/image-20210807151717982.png\" alt=\"image-20210807151717982\" /></p>\n<p><img data-src=\"../../../assets/image-20210807151728443.png\" alt=\"image-20210807151728443\" /></p>\n<p><img data-src=\"../../../assets/image-20210807151744993.png\" alt=\"image-20210807151744993\" /></p>\n<p><img data-src=\"../../../assets/image-20210807152036596.png\" alt=\"image-20210807152036596\" /></p>\n<h3 id=\"日志分析工具\"><a class=\"anchor\" href=\"#日志分析工具\">#</a> 日志分析工具</h3>\n<p><img data-src=\"../../../assets/image-20210807152156179.png\" alt=\"image-20210807152156179\" /></p>\n<p><img data-src=\"../../../assets/image-20210807152217600.png\" alt=\"image-20210807152217600\" /></p>\n<p><img data-src=\"../../../assets/image-20210807152234562.png\" alt=\"image-20210807152234562\" /></p>\n<p><img data-src=\"../../../assets/image-20210807152340862.png\" alt=\"image-20210807152340862\" /></p>\n<p><img data-src=\"../../../assets/image-20210807152402068.png\" alt=\"image-20210807152402068\" /></p>\n<h2 id=\"批量插入数据库脚本\"><a class=\"anchor\" href=\"#批量插入数据库脚本\">#</a> 批量插入数据库脚本</h2>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> dept<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>id <span class=\"token keyword\">INT</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>deptno <span class=\"token keyword\">MEDIUMINT</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>dname <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>loc <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">13</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">\"\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">INNODB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>GBK <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> emp<span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>id <span class=\"token keyword\">INT</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>empno <span class=\"token keyword\">MEDIUMINT</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>ename <span class=\"token keyword\">VARCHAR</span> <span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>job <span class=\"token keyword\">VARCHAR</span> <span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>mgr <span class=\"token keyword\">MEDIUMINT</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>hiredate <span class=\"token keyword\">DATE</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>sa1 <span class=\"token keyword\">DECIMAL</span> <span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>comm <span class=\"token keyword\">DECIMAL</span> <span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>deptno <span class=\"token keyword\">MEDIUMINT</span> <span class=\"token keyword\">UNSIGNED</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">INNODB</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>GBK<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"../../../assets/image-20210807153623428.png\" alt=\"image-20210807153623428\" /></p>\n<h3 id=\"插入1000w数据\"><a class=\"anchor\" href=\"#插入1000w数据\">#</a> 插入 1000w 数据</h3>\n<p>设置参数</p>\n<p><img data-src=\"../../../assets/image-20210807153634782.png\" alt=\"image-20210807153634782\" /></p>\n<h3 id=\"创建函数\"><a class=\"anchor\" href=\"#创建函数\">#</a> 创建函数</h3>\n<h4 id=\"随机产生字符串\"><a class=\"anchor\" href=\"#随机产生字符串\">#</a> 随机产生字符串</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DELIMITER</span> $$</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> rand_string<span class=\"token punctuation\">(</span>n <span class=\"token keyword\">INT</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">DECLARE</span> chars_str <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">'abcdefghijklmnopqrstuvwxyz'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">DECLARE</span> return_str <span class=\"token keyword\">VARCHAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">255</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">DECLARE</span> i <span class=\"token keyword\">INT</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">WHILE</span> i <span class=\"token operator\">&lt;</span> n <span class=\"token keyword\">DO</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">SET</span> return_str <span class=\"token operator\">=</span> CONCAT<span class=\"token punctuation\">(</span>return_str<span class=\"token punctuation\">,</span>SUBSTRING<span class=\"token punctuation\">(</span>chars_str<span class=\"token punctuation\">,</span>FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span>RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">52</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">SET</span> i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">END</span> <span class=\"token keyword\">WHILE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">RETURN</span> return_str<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">END</span> $$</pre></td></tr></table></figure><h4 id=\"随机产生部门编号\"><a class=\"anchor\" href=\"#随机产生部门编号\">#</a> 随机产生部门编号</h4>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DELIMITER</span> $$</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">FUNCTION</span> rand_num<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">RETURNS</span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">DECLARE</span> i <span class=\"token keyword\">INT</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">set</span> i <span class=\"token operator\">=</span> FLOOR<span class=\"token punctuation\">(</span><span class=\"token number\">100</span> <span class=\"token operator\">+</span> RAND<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">RETURN</span> i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">END</span> $$</pre></td></tr></table></figure><h3 id=\"创建存储过程\"><a class=\"anchor\" href=\"#创建存储过程\">#</a> 创建存储过程</h3>\n<p><img data-src=\"../../../assets/image-20210807155148769.png\" alt=\"image-20210807155148769\" /></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DELIMITER</span> $$</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> insert_emp<span class=\"token punctuation\">(</span><span class=\"token operator\">IN</span> <span class=\"token keyword\">START</span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token operator\">IN</span> max_num <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">DECLARE</span> i <span class=\"token keyword\">INT</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">SET</span> autocommit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">REPEAT</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">SET</span> i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> emp<span class=\"token punctuation\">(</span>empno<span class=\"token punctuation\">,</span>ename<span class=\"token punctuation\">,</span>job<span class=\"token punctuation\">,</span>mgr<span class=\"token punctuation\">,</span>hiredate<span class=\"token punctuation\">,</span>sal<span class=\"token punctuation\">,</span>comm<span class=\"token punctuation\">,</span>deptno<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">START</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>rand_string<span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'SALESMAN'</span><span class=\"token punctuation\">,</span><span class=\"token number\">0001</span><span class=\"token punctuation\">,</span>CURDATE<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span><span class=\"token number\">400</span><span class=\"token punctuation\">,</span>rand_num<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>UNTIL i <span class=\"token operator\">=</span> max_num <span class=\"token keyword\">END</span> <span class=\"token keyword\">REPEAT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">COMMIT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">END</span> $$</pre></td></tr></table></figure><figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">DELIMITER</span> $$</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">PROCEDURE</span> insert_dept<span class=\"token punctuation\">(</span><span class=\"token operator\">IN</span> <span class=\"token keyword\">START</span> <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token operator\">IN</span> max_num <span class=\"token keyword\">INT</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">BEGIN</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">DECLARE</span> i <span class=\"token keyword\">INT</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">SET</span> autocommit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">REPEAT</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">SET</span> i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token keyword\">INSERT</span> <span class=\"token keyword\">INTO</span> dept<span class=\"token punctuation\">(</span>deptno<span class=\"token punctuation\">,</span>dname<span class=\"token punctuation\">,</span>loc<span class=\"token punctuation\">)</span> <span class=\"token keyword\">VALUES</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">START</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>rand_string<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>rand_string<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>UNTIL i <span class=\"token operator\">=</span> max_num </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">END</span> <span class=\"token keyword\">REPEAT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">COMMIT</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">END</span> $$</pre></td></tr></table></figure><h3 id=\"调用存储过程\"><a class=\"anchor\" href=\"#调用存储过程\">#</a> 调用存储过程</h3>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">CALL</span> insert_dept<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 从 100 开始添加 10 条</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">SELECT</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">FROM</span> dept</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">CALL</span> insert_dept<span class=\"token punctuation\">(</span><span class=\"token number\">100001</span><span class=\"token punctuation\">,</span><span class=\"token number\">500000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 添加 50w 数据</span></pre></td></tr></table></figure><h2 id=\"show-profile\"><a class=\"anchor\" href=\"#show-profile\">#</a> Show Profile</h2>\n<p><img data-src=\"../../../assets/image-20210807162932243.png\" alt=\"image-20210807162932243\" /></p>\n<p><img data-src=\"../../../assets/image-20210807163107849.png\" alt=\"image-20210807163107849\" /></p>\n<p><img data-src=\"../../../assets/image-20210807163147854.png\" alt=\"image-20210807163147854\" /></p>\n<p><code>SHOW VARIABLES LIKE 'profiling'</code>  查看是否开启</p>\n<p><img data-src=\"../../../assets/image-20210807163652508.png\" alt=\"image-20210807163652508\" /></p>\n<h3 id=\"诊断sql\"><a class=\"anchor\" href=\"#诊断sql\">#</a> 诊断 sql</h3>\n<p><strong>show PROFILE cpu,block io for query</strong> \t\t\t\t\t+ queryId</p>\n<p><img data-src=\"../../../assets/image-20210807164535452.png\" alt=\"image-20210807164535452\" /></p>\n<p><img data-src=\"../../../assets/image-20210807164151798.png\" alt=\"image-20210807164151798\" /></p>\n<p><strong>日常开发需要注意的结论</strong></p>\n<p><img data-src=\"../../../assets/image-20210807164630146.png\" alt=\"image-20210807164630146\" /></p>\n<h2 id=\"全局查询日志\"><a class=\"anchor\" href=\"#全局查询日志\">#</a> 全局查询日志</h2>\n<p><img data-src=\"../../../assets/image-20210807165149472.png\" alt=\"image-20210807165149472\" /></p>\n<p><img data-src=\"../../../assets/image-20210807165156014.png\" alt=\"image-20210807165156014\" /></p>\n<h2 id=\"数据库锁\"><a class=\"anchor\" href=\"#数据库锁\">#</a> 数据库锁</h2>\n<p><img data-src=\"../../../assets/image-20210808110327386.png\" alt=\"image-20210808110327386\" /></p>\n<p><img data-src=\"../../../assets/image-20210808110351749.png\" alt=\"image-20210808110351749\" /></p>\n<p><img data-src=\"../../../assets/image-20210808110537655.png\" alt=\"image-20210808110537655\" /></p>\n<p><img data-src=\"../../../assets/image-20210808110633025.png\" alt=\"image-20210808110633025\" /></p>\n<p><img data-src=\"../../../assets/image-20210808110943000.png\" alt=\"image-20210808110943000\" /></p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 锁表</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">LOCK</span> <span class=\"token keyword\">TABLE</span> mylock <span class=\"token keyword\">read</span><span class=\"token punctuation\">,</span>book <span class=\"token keyword\">write</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">SHOW</span> <span class=\"token keyword\">OPEN</span> <span class=\"token keyword\">TABLES</span></pre></td></tr></table></figure><h3 id=\"加读锁\"><a class=\"anchor\" href=\"#加读锁\">#</a> 加读锁</h3>\n<p><img data-src=\"../../../assets/image-20210808112058930.png\" alt=\"image-20210808112058930\" /></p>\n<p><img data-src=\"../../../assets/image-20210808112136018.png\" alt=\"image-20210808112136018\" /></p>\n<h3 id=\"加写锁\"><a class=\"anchor\" href=\"#加写锁\">#</a> 加写锁</h3>\n<p><img data-src=\"../../../assets/image-20210808112548046.png\" alt=\"image-20210808112548046\" /></p>\n<p><img data-src=\"../../../assets/image-20210808112620810.png\" alt=\"image-20210808112620810\" /></p>\n<p><img data-src=\"../../../assets/image-20210808112638550.png\" alt=\"image-20210808112638550\" /></p>\n<p><strong>简而言之，就是读锁会阻塞写，但是不会阻塞读，而写锁 则会把读和写都阻塞。</strong></p>\n<p><img data-src=\"../../../assets/image-20210808113022005.png\" alt=\"image-20210808113022005\" /></p>\n<p><img data-src=\"../../../assets/image-20210808113102730.png\" alt=\"image-20210808113102730\" /></p>\n<p><img data-src=\"../../../assets/image-20210808113135906.png\" alt=\"image-20210808113135906\" /></p>\n<p><img data-src=\"../../../assets/image-20210808113219738.png\" alt=\"image-20210808113219738\" /></p>\n<h3 id=\"行锁\"><a class=\"anchor\" href=\"#行锁\">#</a> 行锁</h3>\n<p><img data-src=\"../../../assets/image-20210808113317661.png\" alt=\"image-20210808113317661\" /></p>\n<p><img data-src=\"../../../assets/image-20210808113355541.png\" alt=\"image-20210808113355541\" /></p>\n<p><img data-src=\"../../../assets/image-20210808113441415.png\" alt=\"image-20210808113441415\" /></p>\n<p><img data-src=\"../../../assets/image-20210808113537585.png\" alt=\"image-20210808113537585\" /></p>\n<p><img data-src=\"../../../assets/image-20210808113555582.png\" alt=\"image-20210808113555582\" /></p>\n<p><img data-src=\"../../../assets/image-20210808113639509.png\" alt=\"image-20210808113639509\" /></p>\n<p><img data-src=\"../../../assets/image-20210808113721353.png\" alt=\"image-20210808113721353\" /></p>\n<p><img data-src=\"../../../assets/image-20210808115142910.png\" alt=\"image-20210808115142910\" /></p>\n<h3 id=\"索引失效行锁变表锁\"><a class=\"anchor\" href=\"#索引失效行锁变表锁\">#</a> 索引失效行锁变表锁</h3>\n<p>比如 varchar 类型 a='10' 改为 a=10 就会导致索引失效，就会导致行锁变表锁</p>\n<h3 id=\"间隙锁\"><a class=\"anchor\" href=\"#间隙锁\">#</a> 间隙锁</h3>\n<p><img data-src=\"../../../assets/image-20210808120743577.png\" alt=\"image-20210808120743577\" /></p>\n<p><img data-src=\"../../../assets/image-20210808120811419.png\" alt=\"image-20210808120811419\" /></p>\n<p><img data-src=\"../../../assets/image-20210808121128268.png\" alt=\"image-20210808121128268\" /></p>\n<h3 id=\"总结-2\"><a class=\"anchor\" href=\"#总结-2\">#</a> 总结</h3>\n<p><img data-src=\"../../../assets/image-20210808121238755.png\" alt=\"image-20210808121238755\" /></p>\n<p><img data-src=\"../../../assets/image-20210808121310299.png\" alt=\"image-20210808121310299\" /></p>\n<p><img data-src=\"../../../assets/image-20210808121440044.png\" alt=\"image-20210808121440044\" /></p>\n<p><img data-src=\"../../../assets/image-20210808121525645.png\" alt=\"image-20210808121525645\" /></p>\n<p><img data-src=\"../../../assets/image-20210808121544916.png\" alt=\"image-20210808121544916\" /></p>\n<h2 id=\"主从复制\"><a class=\"anchor\" href=\"#主从复制\">#</a> 主从复制</h2>\n<h3 id=\"复制基本原理\"><a class=\"anchor\" href=\"#复制基本原理\">#</a> 复制基本原理</h3>\n<p><img data-src=\"../../../assets/image-20210809151805967.png\" alt=\"image-20210809151805967\" /></p>\n<p><img data-src=\"../../../assets/image-20210809151819909.png\" alt=\"image-20210809151819909\" /></p>\n<h3 id=\"复制的基本原则\"><a class=\"anchor\" href=\"#复制的基本原则\">#</a> 复制的基本原则</h3>\n<p><img data-src=\"../../../assets/image-20210809151910429.png\" alt=\"image-20210809151910429\" /></p>\n<p><strong>复制的最大问题：延迟</strong></p>\n<h3 id=\"一主一从常见配置\"><a class=\"anchor\" href=\"#一主一从常见配置\">#</a> 一主一从常见配置</h3>\n<p><img data-src=\"../../../assets/image-20210809152332893.png\" alt=\"image-20210809152332893\" /></p>\n<p><img data-src=\"../../../assets/image-20210809152359144.png\" alt=\"image-20210809152359144\" /></p>\n<p><img data-src=\"../../../assets/image-20210809152408910.png\" alt=\"image-20210809152408910\" /></p>\n<h4 id=\"主机配置myini流程\"><a class=\"anchor\" href=\"#主机配置myini流程\">#</a> 主机配置 my.ini 流程</h4>\n<p><strong>1、server-id=1</strong></p>\n<p><img data-src=\"../../../assets/image-20210809152654247.png\" alt=\"image-20210809152654247\" /></p>\n<p><img data-src=\"../../../assets/image-20210809152702370.png\" alt=\"image-20210809152702370\" /></p>\n<p><strong>2、</strong></p>\n<p><img data-src=\"../../../assets/image-20210809152742315.png\" alt=\"image-20210809152742315\" /></p>\n<p><img data-src=\"../../../assets/image-20210809152815570.png\" alt=\"image-20210809152815570\" /></p>\n<p><strong>3</strong></p>\n<p><img data-src=\"../../../assets/image-20210809152849560.png\" alt=\"image-20210809152849560\" /></p>\n<p><img data-src=\"../../../assets/image-20210809152910610.png\" alt=\"image-20210809152910610\" /></p>\n<p><strong>4</strong></p>\n<p><img data-src=\"../../../assets/image-20210809152932259.png\" alt=\"image-20210809152932259\" /></p>\n<p><strong>5 6 7 8 9</strong></p>\n<p><img data-src=\"../../../assets/image-20210809153000596.png\" alt=\"image-20210809153000596\" /></p>\n<h4 id=\"从机配置mycnf\"><a class=\"anchor\" href=\"#从机配置mycnf\">#</a> 从机配置 my.cnf</h4>\n<p><img data-src=\"../../../assets/image-20210809153200266.png\" alt=\"image-20210809153200266\" /></p>\n<p><img data-src=\"../../../assets/image-20210809153343584.png\" alt=\"image-20210809153343584\" /></p>\n<p><img data-src=\"../../../assets/image-20210809153431806.png\" alt=\"image-20210809153431806\" /></p>\n<h3 id=\"主机建立账户并授权\"><a class=\"anchor\" href=\"#主机建立账户并授权\">#</a> 主机建立账户并授权</h3>\n<p><img data-src=\"../../../assets/image-20210809153519723.png\" alt=\"image-20210809153519723\" /></p>\n<p><img data-src=\"../../../assets/image-20210809153551342.png\" alt=\"image-20210809153551342\" /></p>\n<p><img data-src=\"../../../assets/image-20210809153610586.png\" alt=\"image-20210809153610586\" /></p>\n<p><img data-src=\"../../../assets/image-20210809153717747.png\" alt=\"image-20210809153717747\" /></p>\n<p><img data-src=\"../../../assets/image-20210809153739465.png\" alt=\"image-20210809153739465\" /></p>\n<p><img data-src=\"../../../assets/image-20210809153845004.png\" alt=\"image-20210809153845004\" /></p>\n<p><strong>file 哪个二进制文件，position 从哪里开始</strong></p>\n<h3 id=\"从机配置需要复制的主机\"><a class=\"anchor\" href=\"#从机配置需要复制的主机\">#</a> 从机配置需要复制的主机</h3>\n<p><img data-src=\"../../../assets/image-20210809154021392.png\" alt=\"image-20210809154021392\" /></p>\n<p><img data-src=\"../../../assets/image-20210809154036146.png\" alt=\"image-20210809154036146\" /></p>\n<p><strong>file position 填主机查询的结果</strong></p>\n<p><img data-src=\"../../../assets/image-20210809154205418.png\" alt=\"image-20210809154205418\" /></p>\n<p><img data-src=\"../../../assets/image-20210809154213848.png\" alt=\"image-20210809154213848\" /></p>\n<p><img data-src=\"../../../assets/image-20210809154432731.png\" alt=\"image-20210809154432731\" /></p>\n",
            "tags": [
                "计算机科学",
                "数据库",
                "Mysql",
                "Mysql"
            ]
        },
        {
            "id": "https://oxyzen-wxf.github.io/worknote/k8s-1/",
            "url": "https://oxyzen-wxf.github.io/worknote/k8s-1/",
            "title": "k8s笔记（一）",
            "date_published": "2021-07-29T03:44:55.000Z",
            "content_html": "",
            "tags": [
                "工作日常笔记",
                "运维"
            ]
        },
        {
            "id": "https://oxyzen-wxf.github.io/worknote/timing-1/",
            "url": "https://oxyzen-wxf.github.io/worknote/timing-1/",
            "title": "定时任务",
            "date_published": "2021-07-29T03:44:55.000Z",
            "content_html": "<h2 id=\"一-定时任务\"><a class=\"anchor\" href=\"#一-定时任务\">#</a> 一、定时任务</h2>\n<p><strong>语法：秒 分 时 日 月 周 年（Spring 不支持，Spring 只支持 6 位，不支持年）</strong></p>\n<p><strong>quartz 支持</strong></p>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5xdWFydHotc2NoZWR1bGVyLm9yZy9kb2N1bWVudGF0aW9uL3F1YXJ0ei0yLjMuMC90dXRvcmlhbHMvY3JvbnRyaWdnZXIuaHRtbA==\">http://www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger.html</span></p>\n<h3 id=\"1-cron-表达式\"><a class=\"anchor\" href=\"#1-cron-表达式\">#</a> 1、cron 表达式</h3>\n<p><img data-src=\"../../assets/image-20210729140546417.png\" alt=\"image-20210729140546417\" /></p>\n<h3 id=\"2-cron-示例\"><a class=\"anchor\" href=\"#2-cron-示例\">#</a> 2、cron 示例</h3>\n<p><img data-src=\"../../assets/image-20210729140634963.png\" alt=\"image-20210729140634963\" /></p>\n<p><img data-src=\"../../assets/image-20210729140640441.png\" alt=\"image-20210729140640441\" /></p>\n<p><strong>表达式可以去百度有工具</strong></p>\n<h3 id=\"3-springboot-整合\"><a class=\"anchor\" href=\"#3-springboot-整合\">#</a> 3、SpringBoot 整合</h3>\n<p><strong>@EnableScheduling</strong></p>\n<p><strong>@Scheduled</strong></p>\n<h3 id=\"异步任务定时任务\"><a class=\"anchor\" href=\"#异步任务定时任务\">#</a> 异步任务 + 定时任务</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author WangXuefeng</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @date 2021/7/29 14:08</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @description</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 定时任务</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *      @EnableScheduling // 开启定时任务</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *      @Scheduled (cron = \"* * * * * ?\")   // 开启一个定时任务</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> *      自动配置类   TaskSchedulingAutoConfiguration</pre></td></tr><tr><td data-num=\"10\"></td><td><pre> * 异步任务</pre></td></tr><tr><td data-num=\"11\"></td><td><pre> *      @EnableAsync // 开启异步执行</pre></td></tr><tr><td data-num=\"12\"></td><td><pre> *      @Async      // 给要异步执行的方法标注</pre></td></tr><tr><td data-num=\"13\"></td><td><pre> *      自动配置类   TaskExecutionAutoConfiguration</pre></td></tr><tr><td data-num=\"14\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span>  <span class=\"token comment\">// 必须在容器中</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token annotation punctuation\">@EnableAsync</span> <span class=\"token comment\">// 开启异步执行</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token annotation punctuation\">@EnableScheduling</span> <span class=\"token comment\">// 开启定时任务</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HelloSchedule</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>     * 1、Spring 中 6 位组成，不允许第七位的年</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     * 2、周几的位置，Spring 是一对一，quartz 是差一天</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>     * 3、定时任务不应该阻塞，默认是阻塞</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>     *      1)、可以让业务运行以异步方式，自己提交到线程池</pre></td></tr><tr><td data-num=\"27\"></td><td><pre>     *       CompletableFuture.runAsync (() -> &#123;</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>     *             service.xxx ();</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>     *         &#125;, excutor);</pre></td></tr><tr><td data-num=\"30\"></td><td><pre>     *      2)、支持定时任务线程池：设置 TaskSchedulingProperties 配置文件 默认源码是 1 个线程池但是某个版本也许修改无效</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"32\"></td><td><pre>     *      public class TaskSchedulingProperties &#123;</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>     *     private final TaskSchedulingProperties.Pool pool = new TaskSchedulingProperties.Pool ();</pre></td></tr><tr><td data-num=\"34\"></td><td><pre>     *     private String threadNamePrefix = \"scheduling-\";</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"36\"></td><td><pre>     *     public TaskSchedulingProperties () &#123;</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>     *     &#125;</pre></td></tr><tr><td data-num=\"38\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>     *     public TaskSchedulingProperties.Pool getPool () &#123;</pre></td></tr><tr><td data-num=\"40\"></td><td><pre>     *         return this.pool;</pre></td></tr><tr><td data-num=\"41\"></td><td><pre>     *     &#125;</pre></td></tr><tr><td data-num=\"42\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>     *     public String getThreadNamePrefix () &#123;</pre></td></tr><tr><td data-num=\"44\"></td><td><pre>     *         return this.threadNamePrefix;</pre></td></tr><tr><td data-num=\"45\"></td><td><pre>     *     &#125;</pre></td></tr><tr><td data-num=\"46\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"47\"></td><td><pre>     *     public void setThreadNamePrefix (String threadNamePrefix) &#123;</pre></td></tr><tr><td data-num=\"48\"></td><td><pre>     *         this.threadNamePrefix = threadNamePrefix;</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>     *     &#125;</pre></td></tr><tr><td data-num=\"50\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"51\"></td><td><pre>     *     public static class Pool &#123;</pre></td></tr><tr><td data-num=\"52\"></td><td><pre>     *         private int size = 1;</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"54\"></td><td><pre>     *         public Pool () &#123;</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>     *         &#125;</pre></td></tr><tr><td data-num=\"56\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"57\"></td><td><pre>     *         public int getSize () &#123;</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>     *             return this.size;</pre></td></tr><tr><td data-num=\"59\"></td><td><pre>     *         &#125;</pre></td></tr><tr><td data-num=\"60\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"61\"></td><td><pre>     *         public void setSize (int size) &#123;</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>     *             this.size = size;</pre></td></tr><tr><td data-num=\"63\"></td><td><pre>     *         &#125;</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>     *     &#125;</pre></td></tr><tr><td data-num=\"65\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>     *     3）、让定时任务异步执行    @Async</pre></td></tr><tr><td data-num=\"67\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>     *</pre></td></tr><tr><td data-num=\"69\"></td><td><pre>     * 解决：使用异步 + 定时任务来完成定时任务不阻塞的功能</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>     * &#125;</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token annotation punctuation\">@Async</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token annotation punctuation\">@Scheduled</span><span class=\"token punctuation\">(</span>cron <span class=\"token operator\">=</span> <span class=\"token string\">\"* * * * * ?\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello......\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"二-秒杀商品定时上架\"><a class=\"anchor\" href=\"#二-秒杀商品定时上架\">#</a> 二、秒杀商品定时上架</h2>\n<h3 id=\"配置开启异步定时抽取一个配置\"><a class=\"anchor\" href=\"#配置开启异步定时抽取一个配置\">#</a> <strong>配置开启异步 + 定时抽取一个配置</strong></h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author WangXuefeng</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @date 2021/7/29 14:30</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @description</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@EnableAsync</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@EnableScheduling</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ScheduleConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"时间计算\"><a class=\"anchor\" href=\"#时间计算\">#</a> 时间计算</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 当前时间</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">startTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">LocalDate</span> now <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">LocalTime</span> min <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalTime</span><span class=\"token punctuation\">.</span>MIN<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token class-name\">LocalDateTime</span> start <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>now<span class=\"token punctuation\">,</span> min<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 格式化时间</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token class-name\">String</span> startFormat <span class=\"token operator\">=</span> start<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> startFormat<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"16\"></td><td><pre> * 结束时间</pre></td></tr><tr><td data-num=\"17\"></td><td><pre> * @return</pre></td></tr><tr><td data-num=\"18\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> <span class=\"token function\">endTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token class-name\">LocalDate</span> now <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDate</span><span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token class-name\">LocalDate</span> plus <span class=\"token operator\">=</span> now<span class=\"token punctuation\">.</span><span class=\"token function\">plusDays</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">LocalTime</span> max <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalTime</span><span class=\"token punctuation\">.</span>MAX<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token class-name\">LocalDateTime</span> end <span class=\"token operator\">=</span> <span class=\"token class-name\">LocalDateTime</span><span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span>plus<span class=\"token punctuation\">,</span> max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// 格式化时间</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token class-name\">String</span> endFormat <span class=\"token operator\">=</span> end<span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DateTimeFormatter</span><span class=\"token punctuation\">.</span><span class=\"token function\">ofPattern</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yyyy-MM-dd HH:mm:ss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> endFormat<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SeckillSessionEntity</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getLates3DaySession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 计算最近三天</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 查出这三天参与秒杀活动的商品</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SeckillSessionEntity</span><span class=\"token punctuation\">></span></span> list <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>baseMapper<span class=\"token punctuation\">.</span><span class=\"token function\">selectList</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SeckillSessionEntity</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">between</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"start_time\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">startTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">endTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>list <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SeckillSessionEntity</span><span class=\"token punctuation\">></span></span> collect <span class=\"token operator\">=</span> list<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>session <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">Long</span> id <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 查出 sms_seckill_sku_relation 表中关联的 skuId</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SeckillSkuRelationEntity</span><span class=\"token punctuation\">></span></span> relationSkus <span class=\"token operator\">=</span> seckillSkuRelationService<span class=\"token punctuation\">.</span><span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">QueryWrapper</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SeckillSkuRelationEntity</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">eq</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"promotion_session_id\"</span><span class=\"token punctuation\">,</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            session<span class=\"token punctuation\">.</span><span class=\"token function\">setRelationSkus</span><span class=\"token punctuation\">(</span>relationSkus<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token keyword\">return</span> session<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">return</span> collect<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"随机码\"><a class=\"anchor\" href=\"#随机码\">#</a> 随机码</h3>\n<p><strong>设置商品的随机码（防止恶意攻击）,</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 随机码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Long</span> currentTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Long</span> startTime <span class=\"token operator\">=</span> redisTo<span class=\"token punctuation\">.</span><span class=\"token function\">getStartTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Long</span> endTime <span class=\"token operator\">=</span> redisTo<span class=\"token punctuation\">.</span><span class=\"token function\">getEndTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 如果当前时间大于等于秒杀活动开始时间并且要小于活动结束时间</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentTime <span class=\"token operator\">>=</span> startTime <span class=\"token operator\">&amp;&amp;</span> currentTime <span class=\"token operator\">&lt;=</span> endTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> redisTo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>redisTo<span class=\"token punctuation\">.</span><span class=\"token function\">setRandomCode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">return</span> redisTo<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"信号量\"><a class=\"anchor\" href=\"#信号量\">#</a> 信号量</h3>\n<pre><code>//如果当前这个场次的商品库存信息已经上架就不需要上架\n//5、使用库存作为分布式Redisson信号量（限流）\n// 使用库存作为分布式信号量\nRSemaphore semaphore = redissonClient.getSemaphore(SKU_STOCK_SEMAPHORE + token);\n// 商品可以秒杀的数量作为信号量\nsemaphore.trySetPermits(seckillSkuVo.getSeckillCount());\n</code></pre>\n<h3 id=\"商品上架\"><a class=\"anchor\" href=\"#商品上架\">#</a> 商品上架</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">uploadSeckillSkuLatest3Days</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//1、扫描最近三天的商品需要参加秒杀的活动</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">R</span> lates3DaySession <span class=\"token operator\">=</span> couponFeignService<span class=\"token punctuation\">.</span><span class=\"token function\">getLates3DaySession</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lates3DaySession<span class=\"token punctuation\">.</span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 上架商品</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SeckillSessionWithSkusVo</span><span class=\"token punctuation\">></span></span> sessionData <span class=\"token operator\">=</span> lates3DaySession<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">List</span><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SeckillSessionWithSkusVo</span><span class=\"token punctuation\">></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 缓存到 Redis</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">//1、缓存活动信息</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token function\">saveSessionInfos</span><span class=\"token punctuation\">(</span>sessionData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">//2、缓存活动的关联商品信息</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token function\">saveSessionSkuInfo</span><span class=\"token punctuation\">(</span>sessionData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"21\"></td><td><pre> * 缓存秒杀活动信息</pre></td></tr><tr><td data-num=\"22\"></td><td><pre> * @param sessions</pre></td></tr><tr><td data-num=\"23\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">saveSessionInfos</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SeckillSessionWithSkusVo</span><span class=\"token punctuation\">></span></span> sessions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    sessions<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>session <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token comment\">// 获取当前活动的开始和结束时间的时间戳</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">long</span> startTime <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getStartTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token keyword\">long</span> endTime <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getEndTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token comment\">// 存入到 Redis 中的 key</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>        <span class=\"token class-name\">String</span> key <span class=\"token operator\">=</span> SESSION__CACHE_PREFIX <span class=\"token operator\">+</span> startTime <span class=\"token operator\">+</span> <span class=\"token string\">\"_\"</span> <span class=\"token operator\">+</span> endTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 判断 Redis 中是否有该信息，如果没有才进行添加</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token class-name\">Boolean</span> hasKey <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">hasKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        <span class=\"token comment\">// 缓存活动信息</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hasKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">// 获取到活动中所有商品的 skuId</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> skuIds <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getRelationSkus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">-></span> item<span class=\"token punctuation\">.</span><span class=\"token function\">getPromotionSessionId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">getSkuId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">leftPushAll</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>skuIds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"49\"></td><td><pre> * 缓存秒杀活动所关联的商品信息</pre></td></tr><tr><td data-num=\"50\"></td><td><pre> * @param sessions</pre></td></tr><tr><td data-num=\"51\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">saveSessionSkuInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SeckillSessionWithSkusVo</span><span class=\"token punctuation\">></span></span> sessions<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    sessions<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>session <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>        <span class=\"token comment\">// 准备 hash 操作，绑定 hash</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token class-name\">BoundHashOperations</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> operations <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">boundHashOps</span><span class=\"token punctuation\">(</span>SECKILL_CHARE_PREFIX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        session<span class=\"token punctuation\">.</span><span class=\"token function\">getRelationSkus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>seckillSkuVo <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>            <span class=\"token comment\">// 生成随机码</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>            <span class=\"token class-name\">String</span> token <span class=\"token operator\">=</span> UUID<span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>            <span class=\"token class-name\">String</span> redisKey <span class=\"token operator\">=</span> seckillSkuVo<span class=\"token punctuation\">.</span><span class=\"token function\">getPromotionSessionId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> seckillSkuVo<span class=\"token punctuation\">.</span><span class=\"token function\">getSkuId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>operations<span class=\"token punctuation\">.</span><span class=\"token function\">hasKey</span><span class=\"token punctuation\">(</span>redisKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                <span class=\"token comment\">// 缓存我们商品信息</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                <span class=\"token class-name\">SeckillSkuRedisTo</span> redisTo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SeckillSkuRedisTo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                <span class=\"token class-name\">Long</span> skuId <span class=\"token operator\">=</span> seckillSkuVo<span class=\"token punctuation\">.</span><span class=\"token function\">getSkuId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                <span class=\"token comment\">//1、先查询 sku 的基本信息，调用远程服务</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                <span class=\"token class-name\">R</span> info <span class=\"token operator\">=</span> productFeignService<span class=\"token punctuation\">.</span><span class=\"token function\">getSkuInfo</span><span class=\"token punctuation\">(</span>skuId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                    <span class=\"token class-name\">SkuInfoVo</span> skuInfo <span class=\"token operator\">=</span> info<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"skuInfo\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SkuInfoVo</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>                    redisTo<span class=\"token punctuation\">.</span><span class=\"token function\">setSkuInfo</span><span class=\"token punctuation\">(</span>skuInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>                <span class=\"token comment\">//2、sku 的秒杀信息</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>                <span class=\"token class-name\">BeanUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyProperties</span><span class=\"token punctuation\">(</span>seckillSkuVo<span class=\"token punctuation\">,</span>redisTo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>                <span class=\"token comment\">//3、设置当前商品的秒杀时间信息</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>                redisTo<span class=\"token punctuation\">.</span><span class=\"token function\">setStartTime</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">getStartTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>                redisTo<span class=\"token punctuation\">.</span><span class=\"token function\">setEndTime</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">getEndTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>                <span class=\"token comment\">//4、设置商品的随机码（防止恶意攻击）</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>                redisTo<span class=\"token punctuation\">.</span><span class=\"token function\">setRandomCode</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>                <span class=\"token comment\">// 序列化 json 格式存入 Redis 中</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>                <span class=\"token class-name\">String</span> seckillValue <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>redisTo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>                operations<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>seckillSkuVo<span class=\"token punctuation\">.</span><span class=\"token function\">getPromotionSessionId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> seckillSkuVo<span class=\"token punctuation\">.</span><span class=\"token function\">getSkuId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>seckillValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>                <span class=\"token comment\">// 如果当前这个场次的商品库存信息已经上架就不需要上架</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>                <span class=\"token comment\">//5、使用库存作为分布式 Redisson 信号量（限流）</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre>                <span class=\"token comment\">// 使用库存作为分布式信号量</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>                <span class=\"token class-name\">RSemaphore</span> semaphore <span class=\"token operator\">=</span> redissonClient<span class=\"token punctuation\">.</span><span class=\"token function\">getSemaphore</span><span class=\"token punctuation\">(</span>SKU_STOCK_SEMAPHORE <span class=\"token operator\">+</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>                <span class=\"token comment\">// 商品可以秒杀的数量作为信号量</span></pre></td></tr><tr><td data-num=\"92\"></td><td><pre>                semaphore<span class=\"token punctuation\">.</span><span class=\"token function\">trySetPermits</span><span class=\"token punctuation\">(</span>seckillSkuVo<span class=\"token punctuation\">.</span><span class=\"token function\">getSeckillCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"96\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"幂等性保证\"><a class=\"anchor\" href=\"#幂等性保证\">#</a> 幂等性保证</h3>\n<p><img data-src=\"../../assets/image-20210729154623356.png\" alt=\"image-20210729154623356\" /></p>\n<p><strong>这里如果多台服务器定时上架会出现重复上架问题，为了保证幂等性，同一场秒杀的商品只上一次，所以可以用分布式锁来完成</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//TODO 保证幂等性问题</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// @Scheduled(cron = \"*/5 * * * * ? \")</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Scheduled</span><span class=\"token punctuation\">(</span>cron <span class=\"token operator\">=</span> <span class=\"token string\">\"0/10 * * * * ? \"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">uploadSeckillSkuLatest3Days</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//1、重复上架无需处理</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"上架秒杀的商品...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 分布式锁</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">RLock</span> lock <span class=\"token operator\">=</span> redissonClient<span class=\"token punctuation\">.</span><span class=\"token function\">getLock</span><span class=\"token punctuation\">(</span>upload_lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 加锁</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">lock</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        seckillService<span class=\"token punctuation\">.</span><span class=\"token function\">uploadSeckillSkuLatest3Days</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        lock<span class=\"token punctuation\">.</span><span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 判断 Redis 中是否有该信息，如果没有才进行添加</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Boolean</span> hasKey <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">hasKey</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 缓存活动信息</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>hasKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 获取到活动中所有商品的 skuId</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> skuIds <span class=\"token operator\">=</span> session<span class=\"token punctuation\">.</span><span class=\"token function\">getRelationSkus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">-></span> item<span class=\"token punctuation\">.</span><span class=\"token function\">getPromotionSessionId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">getSkuId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">leftPushAll</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>skuIds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 准备 hash 操作，绑定 hash</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token class-name\">BoundHashOperations</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> operations <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">boundHashOps</span><span class=\"token punctuation\">(</span>SECKILL_CHARE_PREFIX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    session<span class=\"token punctuation\">.</span><span class=\"token function\">getRelationSkus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>seckillSkuVo <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 生成随机码</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">String</span> token <span class=\"token operator\">=</span> UUID<span class=\"token punctuation\">.</span><span class=\"token function\">randomUUID</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"-\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">String</span> redisKey <span class=\"token operator\">=</span> seckillSkuVo<span class=\"token punctuation\">.</span><span class=\"token function\">getPromotionSessionId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> seckillSkuVo<span class=\"token punctuation\">.</span><span class=\"token function\">getSkuId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>operations<span class=\"token punctuation\">.</span><span class=\"token function\">hasKey</span><span class=\"token punctuation\">(</span>redisKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token comment\">// 缓存我们商品信息</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token class-name\">SeckillSkuRedisTo</span> redisTo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SeckillSkuRedisTo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token class-name\">Long</span> skuId <span class=\"token operator\">=</span> seckillSkuVo<span class=\"token punctuation\">.</span><span class=\"token function\">getSkuId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">//1、先查询 sku 的基本信息，调用远程服务</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token class-name\">R</span> info <span class=\"token operator\">=</span> productFeignService<span class=\"token punctuation\">.</span><span class=\"token function\">getSkuInfo</span><span class=\"token punctuation\">(</span>skuId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>info<span class=\"token punctuation\">.</span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token class-name\">SkuInfoVo</span> skuInfo <span class=\"token operator\">=</span> info<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"skuInfo\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SkuInfoVo</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                redisTo<span class=\"token punctuation\">.</span><span class=\"token function\">setSkuInfo</span><span class=\"token punctuation\">(</span>skuInfo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token comment\">//2、sku 的秒杀信息</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token class-name\">BeanUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">copyProperties</span><span class=\"token punctuation\">(</span>seckillSkuVo<span class=\"token punctuation\">,</span>redisTo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token comment\">//3、设置当前商品的秒杀时间信息</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            redisTo<span class=\"token punctuation\">.</span><span class=\"token function\">setStartTime</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">getStartTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            redisTo<span class=\"token punctuation\">.</span><span class=\"token function\">setEndTime</span><span class=\"token punctuation\">(</span>session<span class=\"token punctuation\">.</span><span class=\"token function\">getEndTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">//4、设置商品的随机码（防止恶意攻击）</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            redisTo<span class=\"token punctuation\">.</span><span class=\"token function\">setRandomCode</span><span class=\"token punctuation\">(</span>token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token comment\">// 序列化 json 格式存入 Redis 中</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>            <span class=\"token class-name\">String</span> seckillValue <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>redisTo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>            operations<span class=\"token punctuation\">.</span><span class=\"token function\">put</span><span class=\"token punctuation\">(</span>seckillSkuVo<span class=\"token punctuation\">.</span><span class=\"token function\">getPromotionSessionId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> seckillSkuVo<span class=\"token punctuation\">.</span><span class=\"token function\">getSkuId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>seckillValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">// 如果当前这个场次的商品库存信息已经上架就不需要上架</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token comment\">//5、使用库存作为分布式 Redisson 信号量（限流）</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token comment\">// 使用库存作为分布式信号量</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token class-name\">RSemaphore</span> semaphore <span class=\"token operator\">=</span> redissonClient<span class=\"token punctuation\">.</span><span class=\"token function\">getSemaphore</span><span class=\"token punctuation\">(</span>SKU_STOCK_SEMAPHORE <span class=\"token operator\">+</span> token<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token comment\">// 商品可以秒杀的数量作为信号量</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            semaphore<span class=\"token punctuation\">.</span><span class=\"token function\">trySetPermits</span><span class=\"token punctuation\">(</span>seckillSkuVo<span class=\"token punctuation\">.</span><span class=\"token function\">getSeckillCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"三-查询秒杀商品\"><a class=\"anchor\" href=\"#三-查询秒杀商品\">#</a> 三、查询秒杀商品</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 当前时间可以参与秒杀的商品信息</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @return</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/getCurrentSeckillSkus\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">R</span> <span class=\"token function\">getCurrentSeckillSkus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 获取到当前可以参加秒杀商品的信息</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SeckillSkuRedisTo</span><span class=\"token punctuation\">></span></span> vos <span class=\"token operator\">=</span> seckillService<span class=\"token punctuation\">.</span><span class=\"token function\">getCurrentSeckillSkus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span>vos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 获取到当前可以参加秒杀商品的信息</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//    @SentinelResource(value = \"getCurrentSeckillSkusResource\",blockHandler = \"blockHandler\")</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SeckillSkuRedisTo</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getCurrentSeckillSkus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//        try (Entry entry = SphU.entry(\"seckillSkus\")) &#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">//1、确定当前属于哪个秒杀场次</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">long</span> currentTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 从 Redis 中查询到所有 key 以 seckill:sessions 开头的所有数据</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keys <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>SESSION__CACHE_PREFIX <span class=\"token operator\">+</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key <span class=\"token operator\">:</span> keys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token comment\">//seckill:sessions:1594396764000_1594453242000</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token class-name\">String</span> replace <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>SESSION__CACHE_PREFIX<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> s <span class=\"token operator\">=</span> replace<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">// 获取存入 Redis 商品的开始时间</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">long</span> startTime <span class=\"token operator\">=</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token comment\">// 获取存入 Redis 商品的结束时间</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">long</span> endTime <span class=\"token operator\">=</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token comment\">// 判断是否是当前秒杀场次</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentTime <span class=\"token operator\">>=</span> startTime <span class=\"token operator\">&amp;&amp;</span> currentTime <span class=\"token operator\">&lt;=</span> endTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    <span class=\"token comment\">//2、获取这个秒杀场次需要的所有商品信息</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> range <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token class-name\">BoundHashOperations</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> hasOps <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">boundHashOps</span><span class=\"token punctuation\">(</span>SECKILL_CHARE_PREFIX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token keyword\">assert</span> range <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> listValue <span class=\"token operator\">=</span> hasOps<span class=\"token punctuation\">.</span><span class=\"token function\">multiGet</span><span class=\"token punctuation\">(</span>range<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>listValue <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> listValue<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SeckillSkuRedisTo</span><span class=\"token punctuation\">></span></span> collect <span class=\"token operator\">=</span> listValue<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                            <span class=\"token class-name\">String</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> item<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                            <span class=\"token class-name\">SeckillSkuRedisTo</span> redisTo <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SeckillSkuRedisTo</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                            <span class=\"token comment\">//redisTo.setRandomCode (null); 当前秒杀开始需要随机码</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                            <span class=\"token keyword\">return</span> redisTo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                        <span class=\"token keyword\">return</span> collect<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token comment\">//        &#125; catch (BlockException e) &#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">//            log.error (\"资源被限流 &#123;&#125;\",e.getMessage ());</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre><span class=\"token comment\">//        &#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>产品详情页获取对应产品是否参与秒杀活动</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">CompletableFuture</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Void</span><span class=\"token punctuation\">></span></span> seckillFuture <span class=\"token operator\">=</span> <span class=\"token class-name\">CompletableFuture</span><span class=\"token punctuation\">.</span><span class=\"token function\">runAsync</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//3、远程调用查询当前 sku 是否参与秒杀优惠活动</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">R</span> skuSeckilInfo <span class=\"token operator\">=</span> seckillFeignService<span class=\"token punctuation\">.</span><span class=\"token function\">getSkuSeckilInfo</span><span class=\"token punctuation\">(</span>skuId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>skuSeckilInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 查询成功</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token class-name\">SeckillSkuVo</span> seckilInfoData <span class=\"token operator\">=</span> skuSeckilInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SeckillSkuVo</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        skuItemVo<span class=\"token punctuation\">.</span><span class=\"token function\">setSeckillSkuVo</span><span class=\"token punctuation\">(</span>seckilInfoData<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>seckilInfoData <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">long</span> currentTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentTime <span class=\"token operator\">></span> seckilInfoData<span class=\"token punctuation\">.</span><span class=\"token function\">getEndTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                skuItemVo<span class=\"token punctuation\">.</span><span class=\"token function\">setSeckillSkuVo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> executor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 根据 skuId 查询商品是否参加秒杀活动</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param skuId</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @return</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/sku/seckill/&#123;skuId&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@ResponseBody</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">R</span> <span class=\"token function\">getSkuSeckilInfo</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"skuId\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Long</span> skuId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">SeckillSkuRedisTo</span> <span class=\"token keyword\">to</span> <span class=\"token operator\">=</span> seckillService<span class=\"token punctuation\">.</span><span class=\"token function\">getSkuSeckilInfo</span><span class=\"token punctuation\">(</span>skuId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">to</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 根据 skuId 查询商品是否参加秒杀活动</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param skuId</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @return</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">SeckillSkuRedisTo</span> <span class=\"token function\">getSkuSeckilInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Long</span> skuId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">//1、找到所有需要秒杀的商品的 key 信息 ---seckill:skus</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">BoundHashOperations</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> hashOps <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">boundHashOps</span><span class=\"token punctuation\">(</span>SECKILL_CHARE_PREFIX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 拿到所有的 key</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keys <span class=\"token operator\">=</span> hashOps<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>keys <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> keys<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">//4-45 正则表达式进行匹配</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token class-name\">String</span> reg <span class=\"token operator\">=</span> <span class=\"token string\">\"\\\\d-\"</span> <span class=\"token operator\">+</span> skuId<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key <span class=\"token operator\">:</span> keys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            <span class=\"token comment\">// 如果匹配上了</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Pattern</span><span class=\"token punctuation\">.</span><span class=\"token function\">matches</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token comment\">// 从 Redis 中取出数据来</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token class-name\">String</span> redisValue <span class=\"token operator\">=</span> hashOps<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token comment\">// 进行序列化</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                <span class=\"token class-name\">SeckillSkuRedisTo</span> redisTo <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>redisValue<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SeckillSkuRedisTo</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token comment\">// 随机码</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                <span class=\"token class-name\">Long</span> currentTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                <span class=\"token class-name\">Long</span> startTime <span class=\"token operator\">=</span> redisTo<span class=\"token punctuation\">.</span><span class=\"token function\">getStartTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token class-name\">Long</span> endTime <span class=\"token operator\">=</span> redisTo<span class=\"token punctuation\">.</span><span class=\"token function\">getEndTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                <span class=\"token comment\">// 如果当前时间大于等于秒杀活动开始时间并且要小于活动结束时间</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentTime <span class=\"token operator\">>=</span> startTime <span class=\"token operator\">&amp;&amp;</span> currentTime <span class=\"token operator\">&lt;=</span> endTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token keyword\">return</span> redisTo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                redisTo<span class=\"token punctuation\">.</span><span class=\"token function\">setRandomCode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                <span class=\"token keyword\">return</span> redisTo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"../../assets/image-20210729170353521.png\" alt=\"image-20210729170353521\" /></p>\n<p><img data-src=\"../../assets/image-20210729170708271.png\" alt=\"image-20210729170708271\" /></p>\n<h2 id=\"四-秒杀请求\"><a class=\"anchor\" href=\"#四-秒杀请求\">#</a> 四、秒杀请求</h2>\n<p><img data-src=\"../../assets/image-20210729173035978.png\" alt=\"image-20210729173035978\" /></p>\n<p><img data-src=\"../../assets/image-20210729183759272.png\" alt=\"image-20210729183759272\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 商品进行秒杀 (秒杀开始)</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param killId</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param key</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @param num</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @return</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"/kill\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">seckill</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"killId\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> killId<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                      <span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                      <span class=\"token annotation punctuation\">@RequestParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"num\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Integer</span> num<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                      <span class=\"token class-name\">Model</span> model<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">String</span> orderSn <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token comment\">//1、判断是否登录</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        orderSn <span class=\"token operator\">=</span> seckillService<span class=\"token punctuation\">.</span><span class=\"token function\">kill</span><span class=\"token punctuation\">(</span>killId<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        model<span class=\"token punctuation\">.</span><span class=\"token function\">addAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orderSn\"</span><span class=\"token punctuation\">,</span>orderSn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">\"success\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 当前商品进行秒杀（秒杀开始）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param killId</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param key</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @param num</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * @return</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">kill</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> killId<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> key<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span> num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">long</span> s1 <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 获取当前用户的信息</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">MemberResponseVo</span> user <span class=\"token operator\">=</span> <span class=\"token class-name\">LoginUserInterceptor</span><span class=\"token punctuation\">.</span>loginUser<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">//1、获取当前秒杀商品的详细信息从 Redis 中获取</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">BoundHashOperations</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> hashOps <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">boundHashOps</span><span class=\"token punctuation\">(</span>SECKILL_CHARE_PREFIX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">String</span> skuInfoValue <span class=\"token operator\">=</span> hashOps<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>killId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span>skuInfoValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">//(合法性效验)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token class-name\">SeckillSkuRedisTo</span> redisTo <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>skuInfoValue<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SeckillSkuRedisTo</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token class-name\">Long</span> startTime <span class=\"token operator\">=</span> redisTo<span class=\"token punctuation\">.</span><span class=\"token function\">getStartTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token class-name\">Long</span> endTime <span class=\"token operator\">=</span> redisTo<span class=\"token punctuation\">.</span><span class=\"token function\">getEndTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">long</span> currentTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 判断当前这个秒杀请求是否在活动时间区间内 (效验时间的合法性)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentTime <span class=\"token operator\">>=</span> startTime <span class=\"token operator\">&amp;&amp;</span> currentTime <span class=\"token operator\">&lt;=</span> endTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token comment\">//2、效验随机码和商品 id</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">String</span> randomCode <span class=\"token operator\">=</span> redisTo<span class=\"token punctuation\">.</span><span class=\"token function\">getRandomCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token class-name\">String</span> skuId <span class=\"token operator\">=</span> redisTo<span class=\"token punctuation\">.</span><span class=\"token function\">getPromotionSessionId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span>redisTo<span class=\"token punctuation\">.</span><span class=\"token function\">getSkuId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>randomCode<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> killId<span class=\"token punctuation\">.</span><span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>skuId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>            <span class=\"token comment\">//3、验证购物数量是否合理和库存量是否充足</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>            <span class=\"token class-name\">Integer</span> seckillLimit <span class=\"token operator\">=</span> redisTo<span class=\"token punctuation\">.</span><span class=\"token function\">getSeckillLimit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>            <span class=\"token comment\">// 获取信号量</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token class-name\">String</span> seckillCount <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>SKU_STOCK_SEMAPHORE <span class=\"token operator\">+</span> randomCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token class-name\">Integer</span> count <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>seckillCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token comment\">// 判断信号量是否大于 0, 并且买的数量不能超过库存</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> num <span class=\"token operator\">&lt;=</span> seckillLimit <span class=\"token operator\">&amp;&amp;</span> count <span class=\"token operator\">></span> num <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token comment\">//4、验证这个人是否已经买过了（幂等性处理）, 如果秒杀成功，就去占位。userId-sessionId-skuId</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token comment\">//SETNX 原子性处理</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                <span class=\"token class-name\">String</span> redisKey <span class=\"token operator\">=</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"-\"</span> <span class=\"token operator\">+</span> skuId<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                <span class=\"token comment\">// 设置自动过期 (活动结束时间 - 当前时间)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                <span class=\"token class-name\">Long</span> ttl <span class=\"token operator\">=</span> endTime <span class=\"token operator\">-</span> currentTime<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                <span class=\"token class-name\">Boolean</span> aBoolean <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setIfAbsent</span><span class=\"token punctuation\">(</span>redisKey<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ttl<span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>aBoolean<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    <span class=\"token comment\">// 占位成功说明从来没有买过，分布式锁 (获取信号量 - 1)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    <span class=\"token class-name\">RSemaphore</span> semaphore <span class=\"token operator\">=</span> redissonClient<span class=\"token punctuation\">.</span><span class=\"token function\">getSemaphore</span><span class=\"token punctuation\">(</span>SKU_STOCK_SEMAPHORE <span class=\"token operator\">+</span> randomCode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                    <span class=\"token comment\">//TODO 秒杀成功，快速下单</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                    <span class=\"token keyword\">boolean</span> semaphoreCount <span class=\"token operator\">=</span> semaphore<span class=\"token punctuation\">.</span><span class=\"token function\">tryAcquire</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>MILLISECONDS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                    <span class=\"token comment\">// 保证 Redis 中还有商品库存</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>semaphoreCount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                        <span class=\"token comment\">// 创建订单号和订单信息发送给 MQ</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>                        <span class=\"token comment\">// 秒杀成功 快速下单 发送消息到 MQ 整个操作时间在 10ms 左右</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                        <span class=\"token class-name\">String</span> timeId <span class=\"token operator\">=</span> <span class=\"token class-name\">IdWorker</span><span class=\"token punctuation\">.</span><span class=\"token function\">getTimeId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>                        <span class=\"token class-name\">SeckillOrderTo</span> orderTo <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SeckillOrderTo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>                        orderTo<span class=\"token punctuation\">.</span><span class=\"token function\">setOrderSn</span><span class=\"token punctuation\">(</span>timeId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>                        orderTo<span class=\"token punctuation\">.</span><span class=\"token function\">setMemberId</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>                        orderTo<span class=\"token punctuation\">.</span><span class=\"token function\">setNum</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>                        orderTo<span class=\"token punctuation\">.</span><span class=\"token function\">setPromotionSessionId</span><span class=\"token punctuation\">(</span>redisTo<span class=\"token punctuation\">.</span><span class=\"token function\">getPromotionSessionId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>                        orderTo<span class=\"token punctuation\">.</span><span class=\"token function\">setSkuId</span><span class=\"token punctuation\">(</span>redisTo<span class=\"token punctuation\">.</span><span class=\"token function\">getSkuId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>                        orderTo<span class=\"token punctuation\">.</span><span class=\"token function\">setSeckillPrice</span><span class=\"token punctuation\">(</span>redisTo<span class=\"token punctuation\">.</span><span class=\"token function\">getSeckillPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>                        rabbitTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">convertAndSend</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"order-event-exchange\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"order.seckill.order\"</span><span class=\"token punctuation\">,</span>orderTo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>                        <span class=\"token keyword\">long</span> s2 <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>                        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"耗时...\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>s2 <span class=\"token operator\">-</span> s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>                        <span class=\"token keyword\">return</span> timeId<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>    <span class=\"token keyword\">long</span> s3 <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"耗时...\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>s3 <span class=\"token operator\">-</span> s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>创建队列消费成功秒杀的订单</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Slf4j</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@RabbitListener</span><span class=\"token punctuation\">(</span>queues <span class=\"token operator\">=</span> <span class=\"token string\">\"order.seckill.order.queue\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderSeckillListener</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">OrderService</span> orderService<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token annotation punctuation\">@RabbitHandler</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">listener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SeckillOrderTo</span> orderTo<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Channel</span> channel<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Message</span> message<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"准备创建秒杀单的详细信息...\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            orderService<span class=\"token punctuation\">.</span><span class=\"token function\">createSeckillOrder</span><span class=\"token punctuation\">(</span>orderTo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicAck</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">getMessageProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeliveryTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Exception</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            channel<span class=\"token punctuation\">.</span><span class=\"token function\">basicReject</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">getMessageProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeliveryTag</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 创建秒杀单</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param orderTo</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">createSeckillOrder</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">SeckillOrderTo</span> orderTo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">//TODO 保存订单信息</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">OrderEntity</span> orderEntity <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrderEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    orderEntity<span class=\"token punctuation\">.</span><span class=\"token function\">setOrderSn</span><span class=\"token punctuation\">(</span>orderTo<span class=\"token punctuation\">.</span><span class=\"token function\">getOrderSn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    orderEntity<span class=\"token punctuation\">.</span><span class=\"token function\">setMemberId</span><span class=\"token punctuation\">(</span>orderTo<span class=\"token punctuation\">.</span><span class=\"token function\">getMemberId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    orderEntity<span class=\"token punctuation\">.</span><span class=\"token function\">setCreateTime</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">BigDecimal</span> totalPrice <span class=\"token operator\">=</span> orderTo<span class=\"token punctuation\">.</span><span class=\"token function\">getSeckillPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BigDecimal</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>orderTo<span class=\"token punctuation\">.</span><span class=\"token function\">getNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    orderEntity<span class=\"token punctuation\">.</span><span class=\"token function\">setPayAmount</span><span class=\"token punctuation\">(</span>totalPrice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    orderEntity<span class=\"token punctuation\">.</span><span class=\"token function\">setStatus</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderStatusEnum</span><span class=\"token punctuation\">.</span>CREATE_NEW<span class=\"token punctuation\">.</span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 保存订单</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>orderEntity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 保存订单项信息</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token class-name\">OrderItemEntity</span> orderItem <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrderItemEntity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    orderItem<span class=\"token punctuation\">.</span><span class=\"token function\">setOrderSn</span><span class=\"token punctuation\">(</span>orderTo<span class=\"token punctuation\">.</span><span class=\"token function\">getOrderSn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    orderItem<span class=\"token punctuation\">.</span><span class=\"token function\">setRealAmount</span><span class=\"token punctuation\">(</span>totalPrice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    orderItem<span class=\"token punctuation\">.</span><span class=\"token function\">setSkuQuantity</span><span class=\"token punctuation\">(</span>orderTo<span class=\"token punctuation\">.</span><span class=\"token function\">getNum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 保存商品的 spu 信息</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token class-name\">R</span> spuInfo <span class=\"token operator\">=</span> productFeignService<span class=\"token punctuation\">.</span><span class=\"token function\">getSpuInfoBySkuId</span><span class=\"token punctuation\">(</span>orderTo<span class=\"token punctuation\">.</span><span class=\"token function\">getSkuId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token class-name\">SpuInfoVo</span> spuInfoData <span class=\"token operator\">=</span> spuInfo<span class=\"token punctuation\">.</span><span class=\"token function\">getData</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SpuInfoVo</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    orderItem<span class=\"token punctuation\">.</span><span class=\"token function\">setSpuId</span><span class=\"token punctuation\">(</span>spuInfoData<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    orderItem<span class=\"token punctuation\">.</span><span class=\"token function\">setSpuName</span><span class=\"token punctuation\">(</span>spuInfoData<span class=\"token punctuation\">.</span><span class=\"token function\">getSpuName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    orderItem<span class=\"token punctuation\">.</span><span class=\"token function\">setSpuBrand</span><span class=\"token punctuation\">(</span>spuInfoData<span class=\"token punctuation\">.</span><span class=\"token function\">getBrandName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    orderItem<span class=\"token punctuation\">.</span><span class=\"token function\">setCategoryId</span><span class=\"token punctuation\">(</span>spuInfoData<span class=\"token punctuation\">.</span><span class=\"token function\">getCatalogId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token comment\">// 保存订单项数据</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    orderItemService<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span>orderItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>异常情况：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbHVhby9wLzE0NjMzMjY0Lmh0bWwjX2xhYmVsMA==\">https://www.cnblogs.com/luao/p/14633264.html#_label0</span></strong></p>\n<p><strong>多线程环境下进行 DEBUG：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2phdmFfbGlmZW5nL2FydGljbGUvZGV0YWlscy8xMDA2NjIxOTk=\">https://blog.csdn.net/java_lifeng/article/details/100662199</span></strong></p>\n",
            "tags": [
                "工作日常笔记",
                "Java",
                "java",
                "Spring Boot",
                "timing"
            ]
        },
        {
            "id": "https://oxyzen-wxf.github.io/worknote/jvm-1/",
            "url": "https://oxyzen-wxf.github.io/worknote/jvm-1/",
            "title": "JVM(一)",
            "date_published": "2021-07-27T05:07:54.000Z",
            "content_html": "<h2 id=\"jvm体系结构概览\"><a class=\"anchor\" href=\"#jvm体系结构概览\">#</a> JVM 体系结构概览</h2>\n<p><img data-src=\"../../assets/image-20210801124522594.png\" alt=\"image-20210801124522594\" /></p>\n<h2 id=\"类装载器\"><a class=\"anchor\" href=\"#类装载器\">#</a> 类装载器</h2>\n<p><img data-src=\"../../assets/image-20210801125147361.png\" alt=\"image-20210801125147361\" /></p>\n<div class=\"note info\">\n<p><strong>注意：</strong></p>\n<ul>\n<li>方法区并不是存放方法的区域，其是存放类的描述信息 (模板) 的地方</li>\n<li>Class loader 只是负责 class 文件的加载，相当于快递员，这个 “快递员” 并不是只有一家，Class loader 有多种</li>\n<li>加载之前是 “小 class”，加载之后就变成了 “大 Class”，这是安装 java.lang.Class 模板生成了一个实例。“大 Class” 就装载在方法区，模板实例化之后就得到 n 个相同的对象</li>\n<li>JVM 并不是通过检查文件后缀是不是 &lt;code&gt;.class&lt;/code &gt; 来判断是否需要加载的，而是通过文件开头的特定文件标志</li>\n</ul>\n<p><img data-src=\"../../assets/image-20210801130451305.png\" alt=\"image-20210801130451305\" /></p>\n</div>\n<p><img data-src=\"../../assets/image-20210801130343298.png\" alt=\"image-20210801130343298\" /></p>\n<h3 id=\"类加载器种类\"><a class=\"anchor\" href=\"#类加载器种类\">#</a> 类加载器种类</h3>\n<p><img data-src=\"../../assets/image-20210801130815007.png\" alt=\"image-20210801130815007\" /></p>\n<p><img data-src=\"../../assets/image-20210801131324749.png\" alt=\"image-20210801131324749\" /></p>\n<h3 id=\"双亲委派\"><a class=\"anchor\" href=\"#双亲委派\">#</a> 双亲委派</h3>\n<p><img data-src=\"../../assets/image-20210801131345583.png\" alt=\"image-20210801131345583\" /></p>\n<p>双亲委派机制来达到沙箱安全，避免污染到源代码。</p>\n<p><strong>例如我们自己创建 java.lang.String, 双亲委派机制先投递给 Bootstrap 加载如果找到了就用，找不到就往下投递，由于加载到了 String 所以不会用我们创建的，这也避免了恶意创建来破坏源代码。</strong></p>\n<h2 id=\"本地接口\"><a class=\"anchor\" href=\"#本地接口\">#</a> 本地接口</h2>\n<p><img data-src=\"../../assets/image-20210801132814429.png\" alt=\"image-20210801132814429\" /></p>\n<h2 id=\"pc寄存器\"><a class=\"anchor\" href=\"#pc寄存器\">#</a> PC 寄存器</h2>\n<p><img data-src=\"../../assets/image-20210801133658485.png\" alt=\"image-20210801133658485\" /></p>\n<h2 id=\"方法区\"><a class=\"anchor\" href=\"#方法区\">#</a> 方法区</h2>\n<p><img data-src=\"../../assets/image-20210801134515171.png\" alt=\"image-20210801134515171\" /></p>\n<p><img data-src=\"../../assets/image-20210801135344884.png\" alt=\"image-20210801135344884\" /></p>\n<h2 id=\"栈\"><a class=\"anchor\" href=\"#栈\">#</a> 栈</h2>\n<h3 id=\"栈管运行堆管存储\"><a class=\"anchor\" href=\"#栈管运行堆管存储\">#</a> 栈管运行，堆管存储</h3>\n<p><img data-src=\"../../assets/image-20210801140545930.png\" alt=\"image-20210801140545930\" /></p>\n<p>java 方法 = 栈帧</p>\n<p><img data-src=\"../../assets/image-20210801141324821.png\" alt=\"image-20210801141324821\" /></p>\n<p><img data-src=\"../../assets/image-20210801141423217.png\" alt=\"image-20210801141423217\" /></p>\n<p><img data-src=\"../../assets/image-20210801141918404.png\" alt=\"image-20210801141918404\" /></p>\n<p><img data-src=\"../../assets/image-20210801142634735.png\" alt=\"image-20210801142634735\" /></p>\n<h2 id=\"堆栈方法去的交互关系\"><a class=\"anchor\" href=\"#堆栈方法去的交互关系\">#</a> 堆栈方法去的交互关系</h2>\n<p><img data-src=\"../../assets/image-20210801142104798.png\" alt=\"image-20210801142104798\" /></p>\n<h2 id=\"堆\"><a class=\"anchor\" href=\"#堆\">#</a> 堆</h2>\n<p><img data-src=\"../../assets/image-20210801142840881.png\" alt=\"image-20210801142840881\" /></p>\n<p><img data-src=\"../../assets/image-20210801143142675.png\" alt=\"image-20210801143142675\" /></p>\n<h3 id=\"堆new对象的流程\"><a class=\"anchor\" href=\"#堆new对象的流程\">#</a> 堆 new 对象的流程</h3>\n<p><img data-src=\"../../assets/image-20210801144430353.png\" alt=\"image-20210801144430353\" /></p>\n<h3 id=\"对象生命周期和gc\"><a class=\"anchor\" href=\"#对象生命周期和gc\">#</a> 对象生命周期和 GC</h3>\n<p><img data-src=\"../../assets/image-20210801145719224.png\" alt=\"image-20210801145719224\" /></p>\n<p><img data-src=\"../../assets/image-20210801145955611.png\" alt=\"image-20210801145955611\" /></p>\n<h3 id=\"永久代java7元空间java8\"><a class=\"anchor\" href=\"#永久代java7元空间java8\">#</a> 永久代 java7，元空间 java8</h3>\n<p><img data-src=\"../../assets/image-20210801204316031.png\" alt=\"image-20210801204316031\" /></p>\n<p><img data-src=\"../../assets/image-20210801204456150.png\" alt=\"image-20210801204456150\" /></p>\n<p><img data-src=\"../../assets/image-20210801204712074.png\" alt=\"image-20210801204712074\" /></p>\n<h3 id=\"堆参数调整\"><a class=\"anchor\" href=\"#堆参数调整\">#</a> 堆参数调整</h3>\n<p><img data-src=\"../../assets/image-20210801205129625.png\" alt=\"image-20210801205129625\" /></p>\n<p><img data-src=\"../../assets/image-20210801211122635.png\" alt=\"image-20210801211122635\" /></p>\n<p><img data-src=\"../../assets/image-20210801205255646.png\" alt=\"image-20210801205255646\" /></p>\n<p><img data-src=\"../../assets/image-20210801205436928.png\" alt=\"image-20210801205436928\" /></p>\n<p><img data-src=\"../../assets/image-20210801205743386.png\" alt=\"image-20210801205743386\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 查看自己机器上的默认堆内存和最大堆内存</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span>  <span class=\"token class-name\">Test</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">availableProcessors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 返回 Java 虚拟机试图使用的最大内存量。物理内存的 1/4（-Xmx）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">long</span> maxMemory <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">maxMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 返回 Java 虚拟机中的内存总量 (初始值)。物理内存的 1/64（-Xms）</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">long</span> totalMemory <span class=\"token operator\">=</span> <span class=\"token class-name\">Runtime</span><span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">totalMemory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"MAX_MEMORY =\"</span> <span class=\"token operator\">+</span> maxMemory <span class=\"token operator\">+</span><span class=\"token string\">\"(字节)、\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>maxMemory <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token number\">1024</span> <span class=\"token operator\">/</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"MB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"DEFALUT_MEMORY = \"</span> <span class=\"token operator\">+</span> totalMemory <span class=\"token operator\">+</span> <span class=\"token string\">\" (字节)、\"</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>totalMemory <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token number\">1024</span> <span class=\"token operator\">/</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"MB\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>*   8</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    MAX_MEMORY =1868038144 (字节)、1781.5MB</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    TOTAL_MEMORY = 126877696 (字节)、121.0MB</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>* */</span></pre></td></tr></table></figure><p><img data-src=\"../../assets/image-20210801212119520.png\" alt=\"image-20210801212119520\" /></p>\n<p><img data-src=\"../../assets/image-20210801212138857.png\" alt=\"image-20210801212138857\" /></p>\n<p><img data-src=\"../../assets/image-20210801212625808.png\" alt=\"image-20210801212625808\" /></p>\n<h2 id=\"gc收集日志信息详解\"><a class=\"anchor\" href=\"#gc收集日志信息详解\">#</a> <strong>GC 收集日志信息详解</strong></h2>\n<p>第一次进行 YGC 相关参数：</p>\n<pre><code>[PSYoungGen: 2008K-&gt;482K(2560K)] 2008K-&gt;782K(9728K), 0.0011440 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]\n</code></pre>\n<p><img data-src=\"../../assets/image-20210801213723009.png\" alt=\"image-20210801213723009\" /></p>\n<p>最后一次进行 FGC 相关参数：</p>\n<pre><code>[Full GC (Allocation Failure) [PSYoungGen: 0K-&gt;0K(2048K)] [ParOldGen: 4025K-&gt;4005K(7168K)] 4025K-&gt;4005K(9216K), [Metaspace: 3289K-&gt;3289K(1056768K)], 0.0082055 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]\n</code></pre>\n<p><img data-src=\"../../assets/image-20210801213735723.png\" alt=\"image-20210801213735723\" /></p>\n<p><img data-src=\"../../assets/image-20210801213750154.png\" alt=\"image-20210801213750154\" /></p>\n<p><strong>面试题：GC 是什么（分代收集算法）</strong></p>\n<ul>\n<li>次数上频繁收集 Young 区</li>\n<li>次数上较少收集 Old 区</li>\n<li>基本不动元空间</li>\n</ul>\n<p><strong>面试题：GC 的四大算法（后有详解）</strong></p>\n<ul>\n<li>1. 复制算法 (Copying)</li>\n<li>\n<ol>\n<li>标记清除 (Mark-Sweep)</li>\n</ol>\n</li>\n<li>\n<ol>\n<li>标记压缩 (Mark-Compact)</li>\n</ol>\n</li>\n<li>\n<ol>\n<li>分代收集算法</li>\n</ol>\n</li>\n</ul>\n<p><strong>面试题：下面程序中，有几个线程在运行</strong></p>\n<p><img data-src=\"../../assets/image-20210801215022394.png\" alt=\"image-20210801215022394\" /></p>\n<p>Answer: 有两个线程，一个是 main 线程，一个是后台的 gc 线程。</p>\n<h2 id=\"四大算法\"><a class=\"anchor\" href=\"#四大算法\">#</a> 四大算法</h2>\n<p><img data-src=\"../../assets/image-20210801214356688.png\" alt=\"image-20210801214356688\" /></p>\n<p><img data-src=\"../../assets/image-20210801214415057.png\" alt=\"image-20210801214415057\" /></p>\n<h3 id=\"引用计数法\"><a class=\"anchor\" href=\"#引用计数法\">#</a> 引用计数法</h3>\n<p><img data-src=\"../../assets/image-20210801214714107.png\" alt=\"image-20210801214714107\" /></p>\n<p>首先看一下判断 Java 中对象存活的算法：</p>\n<ul>\n<li><strong>1. 引用计数算法</strong>：引用计数器算法是给每个对象设置一个计数器，当有地方引用这个对象的时候，计数器 + 1，当引用失效的时候，计数器 - 1，当计数器为 0 的时候，JVM 就认为对象不再被使用，是 “垃圾” 了。<br />\n引用计数器实现简单，效率高；但是不能解决循环引用问问题（A 对象引用 B 对象，B 对象又引用 A 对象，但是 A,B 对象已不被任何其他对象引用），同时每次计数器的增加和减少都带来了很多额外的开销，所以在 JDK1.1 之后，这个算法已经不再使用了。</li>\n<li>**2. 根搜索方法：** 根搜索方法是通过一些 “GCRoots” 对象作为起点，从这些节点开始往下搜索，搜索通过的路径成为引用链（ReferenceChain），当一个对象没有被 GCRoots 的引用链连接的时候，说明这个对象是不可用的。<br />\nGCRoots 对象包括：\n<ol>\n<li>虚拟机栈（栈帧中的本地变量表）中的引用的对象。<br />\n2. 方法区域中的类静态属性引用的对象。<br />\n3. 方法区域中常量引用的对象。<br />\n4. 方法栈中 JNI（Native 方法）的引用的对象。</li>\n</ol>\n</li>\n</ul>\n<p><img data-src=\"../../assets/image-20210801215914347.png\" alt=\"image-20210801215914347\" /></p>\n<h3 id=\"复制算法\"><a class=\"anchor\" href=\"#复制算法\">#</a> 复制算法</h3>\n<p>年轻代中使用的是 Minor GC（YGC），这种 GC 算法采用的是复制算法 (Copying)。</p>\n<p>Minor GC 会把 Eden 中的所有活的对象都移到 Survivor 区域中，如果 Survivor 区中放不下，那么剩下的活的对象就被移到 Old generation 中，也即一旦收集后，Eden 是就变成空的了。</p>\n<p>当对象在 Eden (包括一个 Survivor 区域，这里假设是 from 区域) 出生后，在经过一次 Minor GC 后，如果对象还存活，并且能够被另外一块 Survivor 区域所容纳 ( 上面已经假设为 from 区域，这里应为 to 区域，即 to 区域有足够的内存空间来存储 Eden 和 from 区域中存活的对象 )，则使用复制算法将这些仍然还存活的对象复制到另外一块 Survivor 区域 ( 即 to 区域 ) 中，然后清理所使用过的 Eden 以及 Survivor 区域 ( 即 from 区域 )，并且将这些对象的年龄设置为 1，以后对象在 Survivor 区每熬过一次 Minor GC，就将对象的年龄 + 1，当对象的年龄达到某个值时 ( 默认是 15 岁，通过 - XX:MaxTenuringThreshold 来设定参数)，这些对象就会成为老年代。</p>\n<p>-XX:MaxTenuringThreshold — 设置对象在新生代中存活的次数</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/4070621-65895cbe7327a999.png\" alt=\"4070621-65895cbe7327a999.png (929×563)\" /></p>\n<p>年轻代中的 GC, 主要是复制算法（Copying）。 HotSpot JVM 把年轻代分为了三部分：1 个 Eden 区和 2 个 Survivor 区（分别叫 from 和 to）。默认比例为 8:1:1, 一般情况下，新创建的对象都会被分配到 Eden 区 (一些大对象特殊处理), 这些对象经过第一次 Minor GC 后，如果仍然存活，将会被移到 Survivor 区。对象在 Survivor 区中每熬过一次 Minor GC，年龄就会增加 1 岁，当它的年龄增加到一定程度时，就会被移动到年老代中。因为年轻代中的对象基本都是朝生夕死的 (90% 以上)，<strong>所以在年轻代的垃圾回收算法使用的是复制算法</strong>，复制算法的基本思想就是将内存分为两块，每次只用其中一块 (from)，当这一块内存用完，就将还活着的对象复制到另外一块上面。<strong>复制算法的优点是不会产生内存碎片，缺点是耗费空间</strong>。</p>\n<p>在 GC 开始的时候，对象只会存在于 Eden 区和名为 “From” 的 Survivor 区，Survivor 区 “To” 是空的。紧接着进行 GC，Eden 区中所有存活的对象都会被复制到 “To”，而在 “From” 区中，仍存活的对象会根据他们的年龄值来决定去向。年龄达到一定值 (年龄阈值，可以通过 - XX:MaxTenuringThreshold 来设置) 的对象会被移动到年老代中，没有达到阈值的对象会被复制到 “To” 区域。<strong>经过这次 GC 后，Eden 区和 From 区已经被清空。这个时候，“From” 和 “To” 会交换他们的角色，也就是新的 “To” 就是上次 GC 前的 “From”，新的 “From” 就是上次 GC 前的 “To”</strong>。不管怎样，都会保证名为 To 的 Survivor 区域是空的。Minor GC 会一直重复这样的过程，直到 “To” 区被填满，“To” 区被填满之后，会将所有对象移动到年老代中。</p>\n<p><img data-src=\"../../assets/image-20210802111934098.png\" alt=\"image-20210802111934098\" /></p>\n<p>因为 Eden 区对象一般存活率较低，一般的，使用两块 10% 的内存作为空闲和活动区间，而另外 80% 的内存，则是用来给新建对象分配内存的。一旦发生 GC，将 10% 的 from 活动区间与另外 80% 中存活的 eden 对象转移到 10% 的 to 空闲区间，接下来，将之前 90% 的内存全部释放，以此类推。</p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/4070621-1db29c74a72b69e9.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/415/format/webp\" alt=\"img\" /></p>\n<p>上面动画中，Area 空闲代表 to，Area 激活代表 from，绿色代表不被回收的，红色代表被回收的。</p>\n<p><strong>复制算法它的缺点也是相当明显的:</strong></p>\n<ul>\n<li>\n<ol>\n<li>它浪费了一半的内存，这太要命了。</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>如果对象的存活率很高，我们可以极端一点，假设是 100% 存活，那么我们需要将所有对象都复制一遍，并将所有引用地址重置一遍。复制这一工作所花费的时间，在对象存活率达到一定程度时，将会变的不可忽视。 所以从以上描述不难看出，复制算法要想使用，最起码对象的存活率要非常低才行，而且最重要的是，我们必须要克服 50% 内存的浪费。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"标记清除\"><a class=\"anchor\" href=\"#标记清除\">#</a> 标记清除</h3>\n<p><strong>复制算法的缺点就是费空间，其是用在年轻代的，老年代一般是由标记清除或者是标记清除与标记整理的混合实现。</strong></p>\n<p><img data-src=\"../../assets/image-20210802113418032.png\" alt=\"image-20210802113418032\" /></p>\n<p><img data-src=\"../../assets/image-20210802113430571.png\" alt=\"image-20210802113430571\" /></p>\n<p>用通俗的话解释一下标记清除算法，就是当程序运行期间，若可以使用的内存被耗尽的时候，GC 线程就会被触发并将程序暂停，随后将要回收的对象标记一遍，最终统一回收这些对象，完成标记清理工作接下来便让应用程序恢复运行。</p>\n<p>主要进行两项工作，第一项则是标记，第二项则是清除。</p>\n<ul>\n<li>标记：从引用根节点开始标记遍历所有的 GC Roots， 先标记出要回收的对象。</li>\n<li>清除：遍历整个堆，把标记的对象清除。</li>\n</ul>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/4070621-6cf07565eed0fb2f.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/413/format/webp\" alt=\"img\" /></p>\n<p><strong>标记清除算法小结：</strong></p>\n<ul>\n<li>1、首先，它的缺点就是效率比较低（递归与全堆对象遍历），而且在进行 GC 的时候，需要停止应用程序，这会导致用户体验非常差劲</li>\n<li>2、其次，主要的缺点则是这种方式清理出来的空闲内存是不连续的，这点不难理解，我们的死亡对象都是随即的出现在内存的各个角落的，现在把它们清除之后，内存的布局自然会乱七八糟。而为了应付这一点，JVM 就不得不维持一个内存的空闲列表，这又是一种开销。而且在分配数组对象的时候，寻找连续的内存空间会不太好找。</li>\n</ul>\n<h3 id=\"标记压缩\"><a class=\"anchor\" href=\"#标记压缩\">#</a> 标记压缩</h3>\n<p>标记压缩 (Mark-Compact) 又叫标记清除压缩 (Mark-Sweep-Compact)，或者标记清除整理算法。老年代一般是由<strong>标记清除</strong>或者是<strong>标记清除与标记整理的混合</strong>实现</p>\n<p><img data-src=\"../../assets/image-20210802114538155.png\" alt=\"image-20210802114538155\" /></p>\n<p><img data-src=\"https://upload-images.jianshu.io/upload_images/4070621-fdc8c57e8e175c3a.gif?imageMogr2/auto-orient/strip%7CimageView2/2/w/407/format/webp\" alt=\"img\" /></p>\n<h3 id=\"分代收集算法\"><a class=\"anchor\" href=\"#分代收集算法\">#</a> 分代收集算法</h3>\n<p>当前商业虚拟机都是采用分代收集算法，它根据对象存活周期的不同将内存划分为几块，一般是把 Java 堆分为新生代和老年代，然后根据各个年代的特点采用最适当的收集算法，在新生代中，每次垃圾收集都发现有大批对象死去，只有少量存活，就选用复制算法，而老年代因为对象存活率高，没有额外空间对它进行分配担保，就必须使用 “标记清理” 或者 “标记整理” 算法来进行回收。</p>\n<p><img data-src=\"../../assets/image-20210802114700811.png\" alt=\"image-20210802114700811\" /></p>\n<p>图的左半部分是未回收前的内存区域，右半部分是回收后的内存区域。</p>\n<div class=\"note info\">\n<p><strong>面试题：四种算法那个好</strong><br />\n Answer：没有那个算法是能一次性解决所有问题的，因为 JVM 垃圾回收使用的是<strong>分代收集算法</strong>，没有最好的算法，只有根据每一代他的垃圾回收的特性用对应的算法。** 新生代使用复制算法，老年代使用标记清除和标记整理算法。** 没有最好的垃圾回收机制，只有最合适的。</p>\n</div>\n<div class=\"note info\">\n<p><strong>面试题：请说出各个垃圾回收算法的优缺点</strong></p>\n<ul>\n<li>** 内存效率：** 复制算法 &gt; 标记清除算法 &gt; 标记整理算法（此处的效率只是简单的对比时间复杂度，实际情况不一定如此）。</li>\n<li>** 内存整齐度：** 复制算法 = 标记整理算法 &gt; 标记清除算法。</li>\n<li>** 内存利用率：** 标记整理算法 = 标记清除算法 &gt; 复制算法。</li>\n</ul>\n<p>可以看出，效率上来说，复制算法是当之无愧的老大，但是却浪费了太多内存，而<strong>为了尽量兼顾上面所提到的三个指标，标记 / 整理算法相对来说更平滑一些</strong>，但效率上依然不尽如人意，它比复制算法多了一个标记的阶段，又比标记 / 清除多了一个整理内存的过程</p>\n<p>难道就没有一种最优算法吗？Java 9 之后出现了<strong> G1 垃圾回收器（使用分代收集）</strong>，能够解决以上问题，有兴趣参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9iYTQxNWFhMjMzMGI=\">这篇文章</span>。</p>\n</div>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结：</h3>\n<ul>\n<li>\n<h5 id=\"年轻代young-gen\"><a class=\"anchor\" href=\"#年轻代young-gen\">#</a> 年轻代 (Young Gen)</h5>\n</li>\n</ul>\n<p>年轻代特点是区域相对老年代较小，对像存活率低。</p>\n<p>这种情况复制算法的回收整理，速度是最快的。复制算法的效率只和当前存活对像大小有关，因而很适用于年轻代的回收。而复制算法内存利用率不高的问题，通过 hotspot 中的两个 survivor 的设计得到缓解。</p>\n<ul>\n<li>\n<h5 id=\"老年代tenure-gen\"><a class=\"anchor\" href=\"#老年代tenure-gen\">#</a> 老年代 (Tenure Gen)</h5>\n</li>\n</ul>\n<p>老年代的特点是区域较大，对像存活率高。</p>\n<p>这种情况，存在大量存活率高的对像，复制算法明显变得不合适。一般是由标记清除或者是标记清除与标记整理的混合实现。</p>\n<p>Mark 阶段的开销与存活对像的数量成正比，这点上说来，对于老年代，标记清除或者标记整理有一些不符，但可以通过多核 / 线程利用，对并发、并行的形式提标记效率。</p>\n<p>Sweep 阶段的开销与所管理区域的大小形正相关，但 Sweep “就地处决” 的特点，回收的过程没有对像的移动。使其相对其它有对像移动步骤的回收算法，仍然是效率最好的。但是需要解决内存碎片问题。</p>\n<p>Compact 阶段的开销与存活对像的数据成开比，如上一条所描述，对于大量对像的移动是很大开销的，做为老年代的第一选择并不合适。</p>\n<p>基于上面的考虑，老年代一般是由标记清除或者是标记清除与标记整理的混合实现。以 hotspot 中的 CMS 回收器为例，CMS 是基于 Mark-Sweep 实现的，对于对像的回收效率很高，而对于碎片问题，CMS 采用基于 Mark-Compact 算法的 Serial Old 回收器做为补偿措施：当内存回收不佳（碎片导致的 Concurrent Mode Failure 时），将采用 Serial Old 执行 Full GC 以达到对老年代内存的整理。</p>\n<h2 id=\"jmm\"><a class=\"anchor\" href=\"#jmm\">#</a> jmm</h2>\n<p><img data-src=\"../../assets/image-20210802121810005.png\" alt=\"image-20210802121810005\" /></p>\n<p><img data-src=\"../../assets/image-20210802121701631.png\" alt=\"image-20210802121701631\" /></p>\n<p><img data-src=\"../../assets/image-20210802121735350.png\" alt=\"image-20210802121735350\" /></p>\n<p><strong>如果加了 volatile 就可以通知 main 线程中的 while，判断 number 已经被修改了跳出循环</strong></p>\n<div class=\"note info\">\n<p>静态代码块先于构造块加载，静态代码块只加载一次，构造块先于构造方法先加载</p>\n</div>\n<h2 id=\"脑图\"><a class=\"anchor\" href=\"#脑图\">#</a> 脑图</h2>\n<p><img data-src=\"https://tva1.sinaimg.cn/large/007S8ZIlly1gevnla0eemj30u03frkjm.jpg\" alt=\"img\" /></p>\n",
            "tags": [
                "工作日常笔记",
                "Java",
                "java",
                "JVM"
            ]
        },
        {
            "id": "https://oxyzen-wxf.github.io/worknote/spring-cycle-1/",
            "url": "https://oxyzen-wxf.github.io/worknote/spring-cycle-1/",
            "title": "Spring循环依赖",
            "date_published": "2021-07-27T05:07:54.000Z",
            "content_html": "<h1 id=\"spring循环依赖及解决方式\"><a class=\"anchor\" href=\"#spring循环依赖及解决方式\">#</a> Spring 循环依赖及解决方式</h1>\n<p><strong>1. 什么是循环依赖？</strong></p>\n<p>循环依赖其实就是循环引用，也就是两个或者两个以上的 bean 互相持有对方，最终形成闭环。比如 A 依赖于 B，B 依赖于 C，C 又依赖于 A。如下图：</p>\n<p><img data-src=\"../../../../assets/image-20210731125403440.png\" alt=\"image-20210731125403440\" /></p>\n<p>注意，这里不是函数的循环调用，是对象的相互依赖关系。循环调用其实就是一个死循环，除非有终结条件。</p>\n<p>Spring 中循环依赖场景有：</p>\n<p>（1）构造器的循环依赖</p>\n<p>（2）field 属性的循环依赖</p>\n<p>其中，  构造器的循环依赖问题无法解决，只能拋出 BeanCurrentlyInCreationException 异常，在解决属性循环依赖时，spring 采用的是提前暴露对象的方法。</p>\n<p><strong>2. 怎么检测是否存在循环依赖</strong></p>\n<p>检测循环依赖相对比较容易，Bean 在创建的时候可以给该 Bean 打标，如果递归调用回来发现正在创建中的话，即说明了循环依赖了。</p>\n<p><strong>3. Spring 怎么解决循环依赖</strong></p>\n<p>Spring 的循环依赖的理论依据基于 Java 的引用传递，当获得对象的引用时，对象的属性是可以延后设置的。（但是构造器必须是在获取引用之前）</p>\n<p>Spring 的单例对象的初始化主要分为三步：</p>\n<p><img data-src=\"../../../../assets/image-20210731125417053.png\" alt=\"image-20210731125417053\" /></p>\n<p>（1）createBeanInstance：实例化，其实也就是调用对象的构造方法实例化对象</p>\n<p>（2）populateBean：填充属性，这一步主要是多 bean 的依赖属性进行填充</p>\n<p>（3）initializeBean：调用 spring xml 中的 init 方法。</p>\n<p>从上面单例 bean 的初始化可以知道：循环依赖主要发生在第一、二步，也就是构造器循环依赖和 field 循环依赖。那么我们要解决循环引用也应该从初始化过程着手，对于单例来说，在 Spring 容器整个生命周期内，有且只有一个对象，所以很容易想到这个对象应该存在 Cache 中，Spring 为了解决单例的循环依赖问题，使用了  <strong>三级缓存</strong>  。</p>\n<p>这三级缓存分别指：</p>\n<p>singletonFactories ： 单例对象工厂的 cache</p>\n<p>earlySingletonObjects ：提前暴光的单例对象的 Cache</p>\n<p>singletonObjects：单例对象的 cache</p>\n<p>在创建 bean 的时候，首先想到的是从 cache 中获取这个单例的 bean，这个缓存就是 singletonObjects。如果获取不到，并且对象正在创建中，就再从二级缓存 earlySingletonObjects 中获取。如果还是获取不到且允许 singletonFactories 通过 getObject () 获取，就从三级缓存 singletonFactory.getObject ()(三级缓存) 获取，如果获取到了则：从 singletonFactories 中移除，并放入 earlySingletonObjects 中。其实也就是从三级缓存移动到了二级缓存。</p>\n<p>从上面三级缓存的分析，我们可以知道，Spring 解决循环依赖的诀窍就在于 singletonFactories 这个三级 cache。这个 cache 的类型是 ObjectFactory。这里就是解决循环依赖的关键，发生在 createBeanInstance 之后，也就是说单例对象此时已经被创建出来 (调用了构造器)。这个对象已经被生产出来了，虽然还不完美（还没有进行初始化的第二步和第三步），但是已经能被人认出来了（根据对象引用能定位到堆中的对象），所以 Spring 此时将这个对象提前曝光出来让大家认识，让大家使用。</p>\n<p>这样做有什么好处呢？让我们来分析一下 “A 的某个 field 或者 setter 依赖了 B 的实例对象，同时 B 的某个 field 或者 setter 依赖了 A 的实例对象” 这种循环依赖的情况。A 首先完成了初始化的第一步，并且将自己提前曝光到 singletonFactories 中，此时进行初始化的第二步，发现自己依赖对象 B，此时就尝试去 get (B)，发现 B 还没有被 create，所以走 create 流程，B 在初始化第一步的时候发现自己依赖了对象 A，于是尝试 get (A)，尝试一级缓存 singletonObjects (肯定没有，因为 A 还没初始化完全)，尝试二级缓存 earlySingletonObjects（也没有），尝试三级缓存 singletonFactories，由于 A 通过 ObjectFactory 将自己提前曝光了，所以 B 能够通过 ObjectFactory.getObject 拿到 A 对象 (虽然 A 还没有初始化完全，但是总比没有好呀)，B 拿到 A 对象后顺利完成了初始化阶段 1、2、3，完全初始化之后将自己放入到一级缓存 singletonObjects 中。此时返回 A 中，A 此时能拿到 B 的对象顺利完成自己的初始化阶段 2、3，最终 A 也完成了初始化，进去了一级缓存 singletonObjects 中，而且更加幸运的是，由于 B 拿到了 A 的对象引用，所以 B 现在 hold 住的 A 对象完成了初始化。</p>\n<p>知道了这个原理时候，肯定就知道为啥 Spring 不能解决 “A 的构造方法中依赖了 B 的实例对象，同时 B 的构造方法中依赖了 A 的实例对象” 这类问题了！因为加入 singletonFactories 三级缓存的前提是执行了构造器，所以构造器的循环依赖没法解决。</p>\n<p><strong>4. 基于构造器的循环依赖</strong></p>\n<p>Spring 容器会将每一个正在创建的 Bean 标识符放在一个 “当前创建 Bean 池” 中，Bean 标识符在创建过程中将一直保持在这个池中，因此如果在创建 Bean 过程中发现自己已经在 “当前创建 Bean 池” 里时将抛出 BeanCurrentlyInCreationException 异常表示循环依赖；而对于创建完毕的 Bean 将从 “当前创建 Bean 池” 中清除掉。</p>\n<p>Spring 容器先创建单例 A，A 依赖 B，然后将 A 放在 “当前创建 Bean 池” 中，此时创建 B,B 依赖 C , 然后将 B 放在 “当前创建 Bean 池” 中，此时创建 C，C 又依赖 A， 但是，此时 A 已经在池中，所以会报错，，  因为在池中的 Bean 都是未初始化完的，所以会依赖错误 ，（初始化完的 Bean 会从池中移除）</p>\n<p><strong>5. 基于 setter 属性的循环依赖</strong></p>\n<p><img data-src=\"../../../../assets/image-20210731125430113.png\" alt=\"image-20210731125430113\" /><img data-src=\"https://img-blog.csdn.net/2018042008280938\" alt=\"img\" /></p>\n<p>我们结合上面那张图看，Spring 先是用构造实例化 Bean 对象 ，创建成功后，Spring 会通过以下代码提前将对象暴露出来，此时的对象 A 还没有完成属性注入，属于早期对象，此时 Spring 会将这个实例化结束的对象放到一个 Map 中，并且 Spring 提供了获取这个未设置属性的实例化对象引用的方法。 结合我们的实例来看，当 Spring 实例化了 A、B、C 后，紧接着会去设置对象的属性，此时 A 依赖 B，就会去 Map 中取出存在里面的单例 B 对象，以此类推，不会出来循环的问题喽</p>\n<p><strong>6. 结束语</strong></p>\n<p>不要使用基于构造函数的依赖注入，可以通过以下方式解决：</p>\n<p>1. 在字段上使用 @Autowired 注解，让 Spring 决定在合适的时机注入</p>\n<p>2. 用基于 setter 方法的依赖注入。</p>\n<h1 id=\"理解spring循环引用循环依赖httpsblogcsdnnetchen2526264articledetails80673598\"><a class=\"anchor\" href=\"#理解spring循环引用循环依赖httpsblogcsdnnetchen2526264articledetails80673598\">#</a> 理解 Spring 循环引用（循环依赖）<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2NoZW4yNTI2MjY0L2FydGljbGUvZGV0YWlscy84MDY3MzU5OA==\">https://blog.csdn.net/chen2526264/article/details/80673598</span></h1>\n",
            "tags": [
                "工作日常笔记",
                "Java",
                "java",
                "Spring"
            ]
        },
        {
            "id": "https://oxyzen-wxf.github.io/computer-science/java/microservice/sentinel-1/",
            "url": "https://oxyzen-wxf.github.io/computer-science/java/microservice/sentinel-1/",
            "title": "Sentinel",
            "date_published": "2021-07-27T05:07:54.000Z",
            "content_html": "<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tLmNucG1qcy5vcmcvYWxpYmFiYS9TZW50aW5lbC93aWtpLyVFNCVCQiU4QiVFNyVCQiU4RA==\">https://github.com.cnpmjs.org/alibaba/Sentinel/wiki/ 介绍</span></p>\n<p>** 中文文档 github 镜像访问：**<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tLmNucG1qcy5vcmcvYWxpYmFiYS9TZW50aW5lbC93aWtpLyVFNCVCQiU4QiVFNyVCQiU4RA==\">https://github.com.cnpmjs.org/alibaba/Sentinel/wiki/ 介绍</span></p>\n<h1 id=\"springcloud-alibaba-sentinel\"><a class=\"anchor\" href=\"#springcloud-alibaba-sentinel\">#</a> SpringCloud Alibaba-Sentinel</h1>\n<h2 id=\"一-简介\"><a class=\"anchor\" href=\"#一-简介\">#</a> 一、简介</h2>\n<p><strong>官方文档</strong>：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvU2VudGluZWwvd2lraS8lRTQlQkIlOEIlRTclQkIlOEQ=\">https://github.com/alibaba/Sentinel/wiki/ 介绍</span></p>\n<p><strong>项目地址</strong>：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvU2VudGluZWw=\">https://github.com/alibaba/Sentinel</span></p>\n<p>随着微服务的流行，服务和服务之间的稳定性变得越来越重要。Sentinel 以流量为切入点， 从流量控制、熔断降级、系统负载保护等多个维度保护服务的稳定性。</p>\n<h3 id=\"sentinel-具有以下特征\"><a class=\"anchor\" href=\"#sentinel-具有以下特征\">#</a> <strong>Sentinel 具有以下特征:</strong></h3>\n<p><img data-src=\"../../../../assets/image-20210730132131821.png\" alt=\"image-20210730132131821\" /></p>\n<h3 id=\"sentinel-分为两个部分\"><a class=\"anchor\" href=\"#sentinel-分为两个部分\">#</a> <strong>Sentinel 分为两个部分:</strong></h3>\n<ul>\n<li>核心库（Java 客户端）不依赖任何框架 / 库，能够运行于所有 Java 运行时环境，同时 对 Dubbo / Spring Cloud 等框架也有较好的支持。</li>\n<li>控制台（Dashboard）基于 Spring Boot 开发，打包后可以直接运行，不需要额外的 Tomcat 等应用容器。</li>\n</ul>\n<h3 id=\"sentinel-基本概念\"><a class=\"anchor\" href=\"#sentinel-基本概念\">#</a> Sentinel 基本概念</h3>\n<ul>\n<li><strong>资源</strong></li>\n</ul>\n<p>资源是 Sentinel 的关键概念。它可以是 Java 应用程序中的任何内容，例如，由应用程序提 供的服务，或由应用程序调用的其它应用提供的服务，甚至可以是一段代码。在接下来的文 档中，我们都会用资源来描述代码块</p>\n<p><strong>只要通过 Sentinel API 定义的代码</strong>，** 就是资源，能够被 Sentinel 保护起来。** 大部分情况下， 可以使用方法签名，URL，甚至服务名称作为资源名来标示资源。</p>\n<ul>\n<li><strong>规则</strong></li>\n</ul>\n<p>围绕资源的实时状态设定的规则，可以<strong>包括流量控制规则、熔断降级规则以及系统保护规 则</strong>。所有规则可以动态实时调整。</p>\n<h2 id=\"二-hystrix-与-sentinel-比较\"><a class=\"anchor\" href=\"#二-hystrix-与-sentinel-比较\">#</a> 二、Hystrix 与 Sentinel 比较</h2>\n<p><img data-src=\"../../../../assets/image-20210730132351004.png\" alt=\"image-20210730132351004\" /></p>\n<h2 id=\"三-sentinel的使用\"><a class=\"anchor\" href=\"#三-sentinel的使用\">#</a> 三、Sentinel 的使用</h2>\n<h3 id=\"依赖\"><a class=\"anchor\" href=\"#依赖\">#</a> 依赖</h3>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-alibaba-sentinel<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"配置控制台\"><a class=\"anchor\" href=\"#配置控制台\">#</a> <strong>配置控制台</strong></h3>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">spring.cloud.sentinel.transport.dashboard</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">localhost:8333  //连接哪个控制台</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token attr-name\">spring.cloud.sentinel.transport.port</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">8719   // 交互端口</span></pre></td></tr></table></figure><p><img data-src=\"../../../../assets/image-20210730141448359.png\" alt=\"image-20210730141448359\" /></p>\n<h3 id=\"登录密码\"><a class=\"anchor\" href=\"#登录密码\">#</a> <strong>登录密码</strong></h3>\n<p>sentinel  sentinel</p>\n<h3 id=\"统计信息\"><a class=\"anchor\" href=\"#统计信息\">#</a> 统计信息</h3>\n<p>导入依赖</p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.boot<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-boot-actuator<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>配置把 springboot 监听健康状态信息暴漏</p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">management.endpoints.web.exposure.include</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">*</span></pre></td></tr></table></figure><h3 id=\"自定sentinel流控返回响应\"><a class=\"anchor\" href=\"#自定sentinel流控返回响应\">#</a> 自定 sentinel 流控返回响应</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author WangXuefeng</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @date 2021/7/30 14:29</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @description Sentinel 自定义流控返回</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SeckillSentinelConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">SeckillSentinelConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token class-name\">WebCallbackManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">setUrlBlockHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>httpServletRequest<span class=\"token punctuation\">,</span> httpServletResponse<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token class-name\">R</span> error <span class=\"token operator\">=</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BizCodeEnume</span><span class=\"token punctuation\">.</span>TO_MANY_REQUEST<span class=\"token punctuation\">.</span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BizCodeEnume</span><span class=\"token punctuation\">.</span>TO_MANY_REQUEST<span class=\"token punctuation\">.</span><span class=\"token function\">getMsg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            httpServletResponse<span class=\"token punctuation\">.</span><span class=\"token function\">setCharacterEncoding</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"utf-8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            httpServletResponse<span class=\"token punctuation\">.</span><span class=\"token function\">setContentType</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            httpServletResponse<span class=\"token punctuation\">.</span><span class=\"token function\">getWriter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>JSON<span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"流量控制\"><a class=\"anchor\" href=\"#流量控制\">#</a> 流量控制</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvU2VudGluZWwvd2lraS8lRTYlQjUlODElRTklODclOEYlRTYlOEUlQTclRTUlODglQjY=\">https://github.com/alibaba/Sentinel/wiki/ 流量控制</span></p>\n<p><img data-src=\"../../../../assets/image-20210730161423180.png\" alt=\"image-20210730161423180\" /></p>\n<h2 id=\"四-整合-feignsentinel-测试熔断降级\"><a class=\"anchor\" href=\"#四-整合-feignsentinel-测试熔断降级\">#</a> 四、整合 Feign+Sentinel 测试熔断降级</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvU2VudGluZWwvd2lraS8lRTQlQjglQkIlRTklQTElQjU=\">https://github.com/alibaba/Sentinel/wiki/ 主页</span></p>\n<p><strong>什么是熔断降级</strong></p>\n<p>除了流量控制以外，降低调用链路中的不稳定资源也是 Sentinel 的使命之一。由于调用关 系的复杂性，如果调用链路中的某个资源出现了不稳定，最终会导致请求发生堆积。</p>\n<p><img data-src=\"../../../../assets/image-20210730132441894.png\" alt=\"image-20210730132441894\" /></p>\n<p><strong>整合测试：</strong></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvc3ByaW5nLWNsb3VkLWFsaWJhYmEvYmxvYi9tYXN0ZXIvc3ByaW5nLWNsb3VkLWFsaWJhYmEtZXhhbXBsZXMvc2VudGluZWwtZXhhbXBsZS9zZW50aW5lbC1mZWlnbi1leGFtcGxlL3JlYWRtZS16aC5tZA==\">https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-examples/sentinel-example/sentinel-feign-example/readme-zh.md</span></p>\n<h3 id=\"1-引入依赖\"><a class=\"anchor\" href=\"#1-引入依赖\">#</a> 1、引入依赖</h3>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-openfeign<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-alibaba-sentinel<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"2-使用-nacos-注册中心\"><a class=\"anchor\" href=\"#2-使用-nacos-注册中心\">#</a> 2、使用 Nacos 注册中心</h3>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-alibaba-nacos-discovery<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>配置控制台</strong></p>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">spring.cloud.sentinel.transport.dashboard</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">localhost:8333  //连接哪个控制台</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token attr-name\">spring.cloud.sentinel.transport.port</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">8719   // 交互端口</span></pre></td></tr></table></figure><h3 id=\"3-定义-fallback-实现\"><a class=\"anchor\" href=\"#3-定义-fallback-实现\">#</a> 3、定义 fallback 实现</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>在服务消费者中，实现 feign 远程接口，接口的实现方法即为调用错误的容错方法</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderFeignServiceFallBack</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OrderFeignService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Resp</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OrderVo</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getOrderInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> orderSn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"4-定义-fallbackfactory-并放在容器中\"><a class=\"anchor\" href=\"#4-定义-fallbackfactory-并放在容器中\">#</a> 4、定义 fallbackfactory 并放在容器中</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderFeignFallbackFactory</span> <span class=\"token keyword\">implements</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">FallbackFactory</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OrderFeignServiceFallBack</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">OrderFeignServiceFallBack</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> throwable<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OrderFeignServiceFallBack</span><span class=\"token punctuation\">(</span>throwable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"5-改造-fallback-类接受异常并实现容错方法\"><a class=\"anchor\" href=\"#5-改造-fallback-类接受异常并实现容错方法\">#</a> 5、改造 fallback 类接受异常并实现容错方法</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderFeignServiceFallBack</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">OrderFeignService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">Throwable</span> throwable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">OrderFeignServiceFallBack</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Throwable</span> throwable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>throwable <span class=\"token operator\">=</span> throwable<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Resp</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OrderVo</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getOrderInfo</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> orderSn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token class-name\">Resp</span><span class=\"token punctuation\">.</span><span class=\"token function\">fail</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">OrderVo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"6-远程接口配置-feign-客户端容错\"><a class=\"anchor\" href=\"#6-远程接口配置-feign-客户端容错\">#</a> 6、远程接口配置 feign 客户端容错</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@FeignClient</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"gulimall-oms\"</span><span class=\"token punctuation\">,</span>fallbackFactory <span class=\"token operator\">=</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">OrderFeignFallbackFactory</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">OrderFeignService</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/oms/order/bysn/&#123;orderSn&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">Resp</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">OrderVo</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getOrderInfo</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"orderSn\"</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">String</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>orderSn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"7-开启-sentinel-代理-feign-功能在-applicationproperties-中配置\"><a class=\"anchor\" href=\"#7-开启-sentinel-代理-feign-功能在-applicationproperties-中配置\">#</a> 7、开启 sentinel 代理 feign 功能；在 application.properties 中配置</h3>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token attr-name\">feign.sentinel.enabled</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">true</span></pre></td></tr></table></figure><p>测试熔断效果。当远程服务出现问题，会自动调用回调方法返回默认数据，并且</p>\n<p>更快的容错方式</p>\n<p>1、使用 @SentinelResource，并定义 fallback</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SentinelResource</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"order\"</span><span class=\"token punctuation\">,</span>fallback <span class=\"token operator\">=</span> <span class=\"token string\">\"e\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>Fallback 和原方法签名一致，但是最多多一个 Throwable 类型的变量接受异常。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2FsaWJhYmEvU2VudGluZWwvd2lraS8lRTYlQjMlQTglRTglQTclQTMlRTYlOTQlQUYlRTYlOEMlODE=\">https://github.com/alibaba/Sentinel/wiki/ 注解支持</span></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>需要给容器中配置注解切面</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">SentinelResourceAspect</span> <span class=\"token function\">sentinelResourceAspect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SentinelResourceAspect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>在控制台添加降级策略</pre></td></tr></table></figure><p><img data-src=\"../../../../assets/image-20210730132905018.png\" alt=\"image-20210730132905018\" /></p>\n<h2 id=\"五-自定义受保护资源\"><a class=\"anchor\" href=\"#五-自定义受保护资源\">#</a> 五、自定义受保护资源</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     * 获取到当前可以参加秒杀商品的信息</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//    @SentinelResource(value = \"getCurrentSeckillSkusResource\",blockHandler = \"blockHandler\")</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SeckillSkuRedisTo</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getCurrentSeckillSkus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">try</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Entry</span> entry <span class=\"token operator\">=</span> <span class=\"token class-name\">SphU</span><span class=\"token punctuation\">.</span><span class=\"token function\">entry</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"seckillSkus\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>  <span class=\"token comment\">// </span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token comment\">//1、确定当前属于哪个秒杀场次</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">long</span> currentTime <span class=\"token operator\">=</span> <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentTimeMillis</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token comment\">// 从 Redis 中查询到所有 key 以 seckill:sessions 开头的所有数据</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">Set</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> keys <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>SESSION__CACHE_PREFIX <span class=\"token operator\">+</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> key <span class=\"token operator\">:</span> keys<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token comment\">//seckill:sessions:1594396764000_1594453242000</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token class-name\">String</span> replace <span class=\"token operator\">=</span> key<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>SESSION__CACHE_PREFIX<span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>                <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> s <span class=\"token operator\">=</span> replace<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                <span class=\"token comment\">// 获取存入 Redis 商品的开始时间</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                <span class=\"token keyword\">long</span> startTime <span class=\"token operator\">=</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token comment\">// 获取存入 Redis 商品的结束时间</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                <span class=\"token keyword\">long</span> endTime <span class=\"token operator\">=</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseLong</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token comment\">// 判断是否是当前秒杀场次</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentTime <span class=\"token operator\">>=</span> startTime <span class=\"token operator\">&amp;&amp;</span> currentTime <span class=\"token operator\">&lt;=</span> endTime<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>                    <span class=\"token comment\">//2、获取这个秒杀场次需要的所有商品信息</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> range <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">opsForList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">range</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token class-name\">BoundHashOperations</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> hasOps <span class=\"token operator\">=</span> redisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">boundHashOps</span><span class=\"token punctuation\">(</span>SECKILL_CHARE_PREFIX<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token keyword\">assert</span> range <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> listValue <span class=\"token operator\">=</span> hasOps<span class=\"token punctuation\">.</span><span class=\"token function\">multiGet</span><span class=\"token punctuation\">(</span>range<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>listValue <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> listValue<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SeckillSkuRedisTo</span><span class=\"token punctuation\">></span></span> collect <span class=\"token operator\">=</span> listValue<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>item <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                            <span class=\"token class-name\">String</span> items <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span> item<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                            <span class=\"token class-name\">SeckillSkuRedisTo</span> redisTo <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">parseObject</span><span class=\"token punctuation\">(</span>items<span class=\"token punctuation\">,</span> <span class=\"token class-name\">SeckillSkuRedisTo</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                            <span class=\"token comment\">//redisTo.setRandomCode (null); 当前秒杀开始需要随机码</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                            <span class=\"token keyword\">return</span> redisTo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                        <span class=\"token keyword\">return</span> collect<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BlockException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"资源被限流&#123;&#125;\"</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​        try (Entry entry = SphU.entry (&quot;seckillSkus&quot;)) {  // 在这里是受保护的资源，降级将调用 catch 中的方法</p>\n<h2 id=\"六-注解的方式\"><a class=\"anchor\" href=\"#六-注解的方式\">#</a> 六、注解的方式</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SentinelResource</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">=</span> <span class=\"token string\">\"getCurrentSeckillSkusResource\"</span><span class=\"token punctuation\">,</span>blockHandler <span class=\"token operator\">=</span> <span class=\"token string\">\"blockHandler\"</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>使用注解相当于当前方法是受保护资源，而且可以指定降级的方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 同一个类 blockHandler == blockHandler 一样，参数也可以获取，返回值也一样</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SeckillSkuRedisTo</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">blockHandler</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BlockException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    log<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getCurrentSeckillSkusResource被限流了,&#123;&#125;\"</span><span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tLmNucG1qcy5vcmcvYWxpYmFiYS9TZW50aW5lbC93aWtpLyVFNiVCMyVBOCVFOCVBNyVBMyVFNiU5NCVBRiVFNiU4QyU4MQ==\">https://github.com.cnpmjs.org/alibaba/Sentinel/wiki/ 注解支持</span></strong></p>\n<ul>\n<li>\n<p><code>blockHandler</code>  /  <code>blockHandlerClass</code> :  <code>blockHandler</code>  对应处理  <code>BlockException</code>  的函数名称，可选项。blockHandler 函数访问范围需要是  <code>public</code> ，返回类型需要与原方法相匹配，参数类型需要和原方法相匹配并且最后加一个额外的参数，类型为  <code>BlockException</code> 。blockHandler 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定  <code>blockHandlerClass</code>  为对应的类的  <code>Class</code>  对象，注意对应的函数必需为 static 函数，否则无法解析。</p>\n</li>\n<li>\n<pre><code>fallback\n</code></pre>\n<pre><code>fallbackClass\n</code></pre>\n<p>：fallback 函数名称，可选项，用于在抛出异常的时候提供 fallback 处理逻辑。fallback 函数可以针对所有类型的异常（除了</p>\n<pre><code>exceptionsToIgnore\n</code></pre>\n<p>里面排除掉的异常类型）进行处理。fallback 函数签名和位置要求：</p>\n<ul>\n<li>返回值类型必须与原函数返回值类型一致；</li>\n<li>方法参数列表需要和原函数一致，或者可以额外多一个  <code>Throwable</code>  类型的参数用于接收对应的异常。</li>\n<li>fallback 函数默认需要和原方法在同一个类中。若希望使用其他类的函数，则可以指定  <code>fallbackClass</code>  为对应的类的  <code>Class</code>  对象，注意对应的函数必需为 static 函数，否则无法解析。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"六-整合网关\"><a class=\"anchor\" href=\"#六-整合网关\">#</a> 六、整合网关</h2>\n<p><strong>文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tLmNucG1qcy5vcmcvYWxpYmFiYS9TZW50aW5lbC93aWtpLyVFNyVCRCU5MSVFNSU4NSVCMyVFOSU5OSU5MCVFNiVCNSU4MQ==\">https://github.com.cnpmjs.org/alibaba/Sentinel/wiki/ 网关限流</span></strong></p>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- https://mvnrepository.com/artifact/com.alibaba.cloud/spring-cloud-alibaba-sentinel-gateway --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-alibaba-sentinel-gateway<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>version</span><span class=\"token punctuation\">></span></span>2.1.0.RELEASE<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>version</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author WangXuefeng</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @date 2021/7/30 14:29</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @description Sentinel 自定义流控返回</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SeckillSentinelConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SentinelGatewayConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">public</span> <span class=\"token class-name\">SentinelGatewayConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token class-name\">GatewayCallbackManager</span><span class=\"token punctuation\">.</span><span class=\"token function\">setBlockHandler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">BlockRequestHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token comment\">// 网关限流了请求，就会调用此回调</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>                <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>                <span class=\"token keyword\">public</span> <span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ServerResponse</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">handleRequest</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ServerWebExchange</span> exchange<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Throwable</span> t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>                    <span class=\"token class-name\">R</span> error <span class=\"token operator\">=</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">BizCodeEnume</span><span class=\"token punctuation\">.</span>TO_MANY_REQUEST<span class=\"token punctuation\">.</span><span class=\"token function\">getCode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">BizCodeEnume</span><span class=\"token punctuation\">.</span>TO_MANY_REQUEST<span class=\"token punctuation\">.</span><span class=\"token function\">getMsg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>                    <span class=\"token class-name\">String</span> errorJson <span class=\"token operator\">=</span> JSON<span class=\"token punctuation\">.</span><span class=\"token function\">toJSONString</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                    <span class=\"token class-name\">Mono</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ServerResponse</span><span class=\"token punctuation\">></span></span> body <span class=\"token operator\">=</span> <span class=\"token class-name\">ServerResponse</span><span class=\"token punctuation\">.</span><span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">body</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Mono</span><span class=\"token punctuation\">.</span><span class=\"token function\">just</span><span class=\"token punctuation\">(</span>errorJson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                    <span class=\"token keyword\">return</span> body<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"五-整合-sentinel-测试限流流量控制\"><a class=\"anchor\" href=\"#五-整合-sentinel-测试限流流量控制\">#</a> 五、整合 Sentinel 测试限流（流量控制）</h2>\n",
            "tags": [
                "计算机科学",
                "Java",
                "微服务分布式",
                "java",
                "Sentinel",
                "Spring Cloud Alibaba"
            ]
        },
        {
            "id": "https://oxyzen-wxf.github.io/computer-science/java/microservice/ribbon-1/",
            "url": "https://oxyzen-wxf.github.io/computer-science/java/microservice/ribbon-1/",
            "title": "Ribbon",
            "date_published": "2021-07-27T05:07:54.000Z",
            "content_html": "<h2 id=\"ribbon介绍\"><a class=\"anchor\" href=\"#ribbon介绍\">#</a> Ribbon 介绍</h2>\n<p><strong>目前已停更</strong></p>\n<p>Spring Cloud Ribbon 是基于 Netflix Ribbon 实现的一套客户端 负载均衡的工具。</p>\n<p>简单的说，Ribbon 是 Netflix 发布的开源项目，主要功能是提供客户端的软件负载均衡算法和服务调用。Ribbon 客户端组件提供一系列完善的配置项如连接超时，重试等。简单的说，就是在配置文件中列出 Load Balancer（简称 LB）后面所有的机器，Ribbon 会自动的帮助你基于某种规则（如简单轮询，随机连接等）去连接这些机器。我们很容易使用 Ribbon 实现自定义的负载均衡算法。</p>\n<p><strong>LB 负载均衡（Load Balance）是什么</strong><br />\n简单的说就是将用户的请求平摊的分配到多个服务上，从而达到系统 HA（高可用）<br />\n常见的负载均衡有软件 Nginx，LVS，硬件 F5 等。</p>\n<p><strong>Ribbon 本地负载均衡客户端 VS Nginx 服务端负载均衡区别</strong></p>\n<p>Nginx 是服务器负载均衡，客户端所有请求都会交给 nginx，然后由 nginx 实现转发请求。即负载均衡是由服务端实现的。</p>\n<p>Ribbon 本地负载均衡，在调用微服务接口时候，会在注册中心上获取注册信息服务列表之后缓存到 VM 本地，从而在本地实现 RPC 远程服务调用技术。</p>\n<p><strong>集中式 LB</strong></p>\n<p>即在服务的消费方和提供方之间使用独立的 LB 设施（可以是硬件，如 F5，也可以是软件，如 nginx），由 设 h 责 ei 问 i 求 i 种略转发至服务的提供方；</p>\n<p><strong>进程内 LB</strong></p>\n<p>将 LB 逻辑集成到消费方，消费方从服务注册中心获知有哪些地址可用，然后自己再从这些地址中选择出一个合适的服务器。<br />\n<strong>Ribbon 就属于进程内 LB</strong>，它只是一个类库，集成于消费方进程，消费方通过它来获取到服务提供方的地址。</p>\n<h2 id=\"ribbon的使用\"><a class=\"anchor\" href=\"#ribbon的使用\">#</a> <strong>Ribbon 的使用</strong></h2>\n<p>负载均衡 + RestTemplate</p>\n<h3 id=\"配置\"><a class=\"anchor\" href=\"#配置\">#</a> <strong>配置</strong></h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author WangXuefeng</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @date 2021/1/1 0:24</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @description</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ApplicationContextConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 填入容器开启负载均衡功能</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token annotation punctuation\">@LoadBalanced</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RestTemplate</span> <span class=\"token function\">getRestTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RestTemplate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"使用\"><a class=\"anchor\" href=\"#使用\">#</a> 使用</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@DeleteMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"delete/&#123;id&#125;\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">CommonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token annotation punctuation\">@PathVariable</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>PAYMENT_URL <span class=\"token operator\">+</span> <span class=\"token string\">\"payApi/payment/\"</span><span class=\"token operator\">+</span>id<span class=\"token punctuation\">,</span><span class=\"token class-name\">CommonResult</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CommonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"删除成功\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">RestClientException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CommonResult</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"删除失败 -> \"</span> <span class=\"token operator\">+</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"ribbon核心组件irue\"><a class=\"anchor\" href=\"#ribbon核心组件irue\">#</a> Ribbon 核心组件 IRUE</h2>\n<p><strong>IRule：根据特定算法中从服务列表中选取一个要访问的服务</strong></p>\n<p><img data-src=\"../../../../assets/image-20210826101928337.png\" alt=\"image-20210826101928337\" /></p>\n<h3 id=\"具体实现\"><a class=\"anchor\" href=\"#具体实现\">#</a> <strong>具体实现</strong></h3>\n<p><img data-src=\"../../../../assets/image-20210826102040326.png\" alt=\"image-20210826102040326\" /></p>\n<h3 id=\"替换默认的轮询分发\"><a class=\"anchor\" href=\"#替换默认的轮询分发\">#</a> 替换默认的轮询分发</h3>\n<p><img data-src=\"../../../../assets/image-20210826102251386.png\" alt=\"image-20210826102251386\" /></p>\n<p><strong>测试使用随机分发</strong></p>\n<p><strong>此配置不要放在启动类同级包下</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author WangXuefeng</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @date 2021/8/26 10:51</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @description 替换自己指定的负载均衡</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySelfRule</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">IRule</span> <span class=\"token function\">iRule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RandomRule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>需要在启动类上面开启注解并指定替换的规则类</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@EnableEurekaClient</span> <span class=\"token comment\">// 此处服务名大写</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@RibbonClient</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"CLOUD-PAYMENT-SERVICE\"</span><span class=\"token punctuation\">,</span>configuration <span class=\"token operator\">=</span> <span class=\"token class-name\">MySelfRule</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 服务名称，自定义分发规则类</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">OrderMain80</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderMain80</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"负载轮询算法原理\"><a class=\"anchor\" href=\"#负载轮询算法原理\">#</a> 负载轮询算法原理</h2>\n<h3 id=\"原理\"><a class=\"anchor\" href=\"#原理\">#</a> 原理</h3>\n<p><strong>负载均衡算法：rest 接口第几次请求数 % 服务器集群总数量 = 实际调用服务器位置下标，每次服务重启动后 rest 接口计数从 1 开始</strong>。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Servicelnstance</span><span class=\"token punctuation\">></span></span> instances <span class=\"token operator\">=</span> discoveryClient<span class=\"token punctuation\">.</span>getinstances（<span class=\"token string\">\"CLOUD-PAYMENT-SERVICE\"</span>）；</pre></td></tr></table></figure><p>如：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>instances <span class=\"token operator\">=</span> <span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>：<span class=\"token number\">8002</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">List</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>instances <span class=\"token operator\">=</span> <span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span>：<span class=\"token number\">8001</span></pre></td></tr></table></figure><p><strong>8001+ 8002 组合成为集群，它们共计 2 台机器，集群总数为 2，按照轮询算法原理：</strong></p>\n<p>当总请求数为 1 时：1%2 - 1 对应下标位置为 1，则获得服务地址为 127.0.0.1：8001</p>\n<p>当总请求数位 2 时：2%2 - 0 对应下标位置为 0，则获得服务地址为 127.0.0.1：8002</p>\n<p>当总请求数位 3 时：3%2 - 1 对应下标位置为 1，则获得服务地址为 127.0.0.1：8001</p>\n<p>当总请求数位 4 时：4%2 - 0 对应下标位置为 0，则获得服务地址为 127.0.0.1：8002</p>\n<p>如此类推...</p>\n<h3 id=\"源码分析\"><a class=\"anchor\" href=\"#源码分析\">#</a> 源码分析</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RoundRobinRule</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">AbstractLoadBalancerRule</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AtomicInteger</span> nextServerCyclicCounter<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> AVAILABLE_ONLY_SERVERS <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">boolean</span> ALL_SERVERS <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">Logger</span> log <span class=\"token operator\">=</span> <span class=\"token class-name\">LoggerFactory</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLogger</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RoundRobinRule</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RoundRobinRule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nextServerCyclicCounter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">RoundRobinRule</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ILoadBalancer</span> lb<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setLoadBalancer</span><span class=\"token punctuation\">(</span>lb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Server</span> <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">ILoadBalancer</span> lb<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lb <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>            log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"no load balancer\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token class-name\">Server</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>server <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> count<span class=\"token operator\">++</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>               </pre></td></tr><tr><td data-num=\"27\"></td><td><pre>                    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Server</span><span class=\"token punctuation\">></span></span> reachableServers <span class=\"token operator\">=</span> lb<span class=\"token punctuation\">.</span><span class=\"token function\">getReachableServers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                    <span class=\"token comment\">// 此处获取所有集群服务器作为轮询提供的服务器</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>                    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Server</span><span class=\"token punctuation\">></span></span> allServers <span class=\"token operator\">=</span> lb<span class=\"token punctuation\">.</span><span class=\"token function\">getAllServers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>                    <span class=\"token keyword\">int</span> upCount <span class=\"token operator\">=</span> reachableServers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>                    <span class=\"token keyword\">int</span> serverCount <span class=\"token operator\">=</span> allServers<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>upCount <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> serverCount <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>                        <span class=\"token keyword\">int</span> nextServerIndex <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">incrementAndGetModulo</span><span class=\"token punctuation\">(</span>serverCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>                        <span class=\"token comment\">// 根据计算轮询的下标获取集群服务器</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>                        server <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Server</span><span class=\"token punctuation\">)</span>allServers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>nextServerIndex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>server <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>                            <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>                            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">.</span><span class=\"token function\">isAlive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> server<span class=\"token punctuation\">.</span><span class=\"token function\">isReadyToServe</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>                                <span class=\"token keyword\">return</span> server<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>                            server <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>                        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>                        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>                    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>                    log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No up servers available from load balancer: \"</span> <span class=\"token operator\">+</span> lb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>                    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">>=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                    log<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"No available alive servers after 10 tries from load balancer: \"</span> <span class=\"token operator\">+</span> lb<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>                <span class=\"token keyword\">return</span> server<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>\t<span class=\"token comment\">// 计算下标索引</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">incrementAndGetModulo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> modulo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>        <span class=\"token keyword\">int</span> current<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>        <span class=\"token keyword\">int</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>        <span class=\"token comment\">// 自旋锁</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>            current <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nextServerCyclicCounter<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>            next <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>current <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> modulo<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>nextServerCyclicCounter<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>        <span class=\"token keyword\">return</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre></pre></td></tr><tr><td data-num=\"74\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Server</span> <span class=\"token function\">choose</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">choose</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getLoadBalancer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre></pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">initWithNiwsConfig</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">IClientConfig</span> clientConfig<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"手写\"><a class=\"anchor\" href=\"#手写\">#</a> 手写</h3>\n<p>实现轮询功能</p>\n<p>定义接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author WangXuefeng</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @date 2021/8/26 15:33</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @description</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">LoadBalance</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">ServiceInstance</span> <span class=\"token function\">instances</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ServiceInstance</span><span class=\"token punctuation\">></span></span> instances<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>实现</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Component</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyLB</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">LoadBalance</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">AtomicInteger</span> integer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAndIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">int</span> current<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">int</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            current <span class=\"token operator\">=</span> integer<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            next <span class=\"token operator\">=</span> current <span class=\"token operator\">==</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span>MAX_VALUE <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> current <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>integer<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span>current<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第几次访问，next次数\"</span><span class=\"token operator\">+</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> next<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">ServiceInstance</span> <span class=\"token function\">instances</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ServiceInstance</span><span class=\"token punctuation\">></span></span> instances<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token function\">getAndIncrement</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> instances<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">return</span> instances<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>使用</p>\n<p>注入</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 服务发现</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">private</span> <span class=\"token class-name\">DiscoveryClient</span> discoveryClient<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 这就是注册中心可以拿到很多注册中心的信息，b</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 自定义的</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">LoadBalance</span> loadBalance<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@GetMapping</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"port\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">port</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ServiceInstance</span><span class=\"token punctuation\">></span></span> instances <span class=\"token operator\">=</span> discoveryClient<span class=\"token punctuation\">.</span><span class=\"token function\">getInstances</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CLOUD-PAYMENT-SERVICE\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">ServiceInstance</span> ins <span class=\"token operator\">=</span> loadBalance<span class=\"token punctuation\">.</span><span class=\"token function\">instances</span><span class=\"token punctuation\">(</span>instances<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token class-name\">URI</span> uri <span class=\"token operator\">=</span> ins<span class=\"token punctuation\">.</span><span class=\"token function\">getUri</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> restTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">getForObject</span><span class=\"token punctuation\">(</span>uri<span class=\"token operator\">+</span><span class=\"token string\">\"payApi/getPort/\"</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "Java",
                "微服务分布式",
                "java",
                "Ribbon"
            ]
        },
        {
            "id": "https://oxyzen-wxf.github.io/computer-science/java/microservice/sleuth-1/",
            "url": "https://oxyzen-wxf.github.io/computer-science/java/microservice/sleuth-1/",
            "title": "Sleuth-链路追踪",
            "date_published": "2021-07-27T05:07:54.000Z",
            "content_html": "<h2 id=\"sleuthzipkin-服务链路追踪\"><a class=\"anchor\" href=\"#sleuthzipkin-服务链路追踪\">#</a> Sleuth+Zipkin 服务链路追踪</h2>\n<h3 id=\"1-为什么用\"><a class=\"anchor\" href=\"#1-为什么用\">#</a> 1、为什么用</h3>\n<p>微服务架构是一个分布式架构，它按业务划分服务单元，一个分布式系统往往有很多个服务 单元。由于服务单元数量众多，业务的复杂性，<strong>如果出现了错误和异常，很难去定位。<strong>主要 体现在</strong>，一个请求可能需要调用很多个服务</strong>，而内部服务的调用复杂性，决定了问题难以 定位。所以微服务架构中，必须实现分布式链路追踪，去跟进一个请求到底有哪些服务参与， 参与的顺序又是怎样的，<strong>从而达到每个请求的步骤清晰可见，出了问题，很快定位。</strong></p>\n<p>链路追踪组件有 Google 的 Dapper，Twitter 的 Zipkin，以及阿里的 Eagleeye （鹰眼）等，它 们都是非常优秀的链路追踪开源组件。</p>\n<h3 id=\"2-基本术语\"><a class=\"anchor\" href=\"#2-基本术语\">#</a> 2、基本术语</h3>\n<ul>\n<li>Span（跨度）：基本工作单元，发送一个远程调度任务 就会产生一个 Span，Span 是一<br />\n个 64 位 ID 唯一标识的，Trace 是用另一个 64 位 ID 唯一标识的，Span 还有其他数据信<br />\n息，比如摘要、时间戳事件、Span 的 ID、以及进度 ID。</li>\n<li>Trace（跟踪）：一系列 Span 组成的一个树状结构。请求一个微服务系统的 API 接口，<br />\n这个 API 接口，需要调用多个微服务，调用每个微服务都会产生一个新的 Span，所有<br />\n由这个请求产生的 Span 组成了这个 Trace。</li>\n<li>Annotation（标注）：用来及时记录一个事件的，一些核心注解用来定义一个请求的开<br />\n始和结束 。这些注解包括以下：\n<ul>\n<li>cs - Client Sent - 客户端发送一个请求，这个注解描述了这个 Span 的开始</li>\n<li>sr - Server Received - 服务端获得请求并准备开始处理它，如果将其 sr 减去 cs 时间戳<br />\n便可得到网络传输的时间。</li>\n<li>ss - Server Sent （服务端发送响应）–该注解表明请求处理的完成 (当请求返回客户<br />\n端)，如果 ss 的时间戳减去 sr 时间戳，就可以得到服务器请求的时间。</li>\n<li>cr - Client Received （客户端接收响应）- 此时 Span 的结束，如果 cr 的时间戳减去<br />\n cs 时间戳便可以得到整个请求所消耗的时间。</li>\n</ul>\n</li>\n</ul>\n<p><strong>官方文档：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbG91ZC5zcHJpbmcuaW8vc3ByaW5nLWNsb3VkLXN0YXRpYy9zcHJpbmctY2xvdWQtc2xldXRoLzIuMS4zLlJFTEVBU0Uvc2luZ2xlL3NwcmluZy1jbG91ZC1zbGV1dGguaHRtbA==\">https://cloud.spring.io/spring-cloud-static/spring-cloud-sleuth/2.1.3.RELEASE/single/spring-cloud-sleuth.html</span></strong></p>\n<p>如果服务调用顺序如下</p>\n<p><img data-src=\"../../../../assets/image-20210731114257324.png\" alt=\"image-20210731114257324\" /></p>\n<p><img data-src=\"../../../../assets/image-20210731114309525.png\" alt=\"image-20210731114309525\" /></p>\n<h3 id=\"3-整合-sleuth\"><a class=\"anchor\" href=\"#3-整合-sleuth\">#</a> 3、整合 Sleuth</h3>\n<h4 id=\"1-服务提供者与消费者导入依赖\"><a class=\"anchor\" href=\"#1-服务提供者与消费者导入依赖\">#</a> 1、服务提供者与消费者导入依赖</h4>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-sleuth<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"2-打开-debug-日志\"><a class=\"anchor\" href=\"#2-打开-debug-日志\">#</a> 2、打开 debug 日志</h4>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">logging</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token key atrule\">level</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">com.atguigu.gulimall.product</span><span class=\"token punctuation\">:</span> debug</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token key atrule\">org.springframework.cloud.openfeign</span><span class=\"token punctuation\">:</span> debug</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token key atrule\">org.springframework.cloud.sleuth</span><span class=\"token punctuation\">:</span> debug</pre></td></tr></table></figure><h4 id=\"3-发起一次远程调用观察控制台\"><a class=\"anchor\" href=\"#3-发起一次远程调用观察控制台\">#</a> 3、发起一次远程调用，观察控制台</h4>\n<pre><code>DEBUG [user-service,541450f08573fff5,541450f08573fff5,false]\nuser-service：服务名\n541450f08573fff5：是 TranceId，一条链路中，只有一个 TranceId\n541450f08573fff5：是 spanId，链路中的基本工作单元 id\nfalse：表示是否将数据输出到其他服务，true 则会把信息输出到其他可视化的服务上观察\n</code></pre>\n<h3 id=\"4-整合-zipkin-可视化观察\"><a class=\"anchor\" href=\"#4-整合-zipkin-可视化观察\">#</a> 4、整合 zipkin 可视化观察</h3>\n<p>通过 Sleuth 产生的调用链监控信息，可以得知微服务之间的调用链路，但监控信息只输出 到控制台不方便查看。我们需要一个图形化的工具 - zipkin。Zipkin 是 Twitter 开源的分布式跟 踪系统，主要用来收集系统的时序数据，从而追踪系统的调用问题。zipkin 官网地址如下：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aXBraW4uaW8v\">https://zipkin.io/</span></p>\n<p><img data-src=\"../../../../assets/image-20210731115059352.png\" alt=\"image-20210731115059352\" /></p>\n<h4 id=\"1-docker-安装-zipkin-服务器\"><a class=\"anchor\" href=\"#1-docker-安装-zipkin-服务器\">#</a> 1、docker 安装 zipkin 服务器</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run -d -p <span class=\"token number\">9411</span>:9411 openzipkin/zipkin</pre></td></tr></table></figure><h4 id=\"2-导入\"><a class=\"anchor\" href=\"#2-导入\">#</a> 2、导入</h4>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>org.springframework.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-zipkin<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>zipkin 依赖也同时包含了 sleuth，可以省略 sleuth 的引用</pre></td></tr></table></figure><h4 id=\"3-添加-zipkin-相关配置\"><a class=\"anchor\" href=\"#3-添加-zipkin-相关配置\">#</a> 3、添加 zipkin 相关配置</h4>\n<figure class=\"highlight properties\"><figcaption data-lang=\".properties\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># zipkin 服务器的地址</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token attr-name\">spring.zipkin.base-url</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">http://192.168.61.132:9411/ </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 关闭服务发现，否则 Spring Cloud 会把 zipkin 的 url 当做服务名称</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token attr-name\">spring.zipkin.discovery-client-enabled</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">false</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 设置使用 http 的方式传输数据</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token attr-name\">spring.zipkin.sender.type</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">web</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 设置抽样采集率为 100%，默认为 0.1，即 10%</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token attr-name\">spring.sleuth.sampler.probability</span><span class=\"token punctuation\">=</span><span class=\"token attr-value\">1</span></pre></td></tr></table></figure><p>发送远程请求，测试 zipkin。</p>\n<p><img data-src=\"../../../../assets/image-20210731120805924.png\" alt=\"image-20210731120805924\" /></p>\n<h3 id=\"5-zipkin-数据持久化\"><a class=\"anchor\" href=\"#5-zipkin-数据持久化\">#</a> 5、Zipkin 数据持久化</h3>\n<p>Zipkin 默认是将监控数据存储在内存的，如果 Zipkin 挂掉或重启的话，那么监控数据就会丢 失。所以如果想要搭建生产可用的 Zipkin，就需要实现监控数据的持久化。而想要实现数据 持久化，自然就是得将数据存储至数据库。好在 Zipkin 支持将数据存储至：</p>\n<ul>\n<li>内存（默认）</li>\n<li>MySQL</li>\n<li>Elasticsearch</li>\n<li>Cassandra</li>\n</ul>\n<p>Zipkin 数据持久化相关的官方文档地址如下：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29wZW56aXBraW4vemlwa2luI3N0b3JhZ2UtY29tcG9uZW50\">https://github.com/openzipkin/zipkin#storage-component</span></p>\n<p>Zipkin 支持的这几种存储方式中，内存显然是不适用于生产的，这一点开始也说了。而使用 MySQL 的话，当数据量大时，查询较为缓慢，也不建议使用。Twitter 官方使用的是 Cassandra 作为 Zipkin 的存储数据库，但国内大规模用 Cassandra 的公司较少，而且 Cassandra 相关文 档也不多。</p>\n<p>综上，故采用 Elasticsearch 是个比较好的选择，关于使用 Elasticsearch 作为 Zipkin 的存储数 据库的官方文档如下：</p>\n<p>elasticsearch-storage：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29wZW56aXBraW4vemlwa2luL3RyZWUvbWFzdGVyL3ppcGtpbi1zZXJ2ZXIjZWxhc3RpY3NlYXJjaC1zdG9yYWdl\">https://github.com/openzipkin/zipkin/tree/master/zipkin-server#elasticsearch-storage</span> zipkin-storage/elasticsearch</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL29wZW56aXBraW4vemlwa2luL3RyZWUvbWFzdGVyL3ppcGtpbi1zdG9yYWdlL2VsYXN0aWNzZWFyY2g=\">https://github.com/openzipkin/zipkin/tree/master/zipkin-storage/elasticsearch</span></p>\n<p>通过 docker 的方式</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>docker run --env <span class=\"token assign-left variable\">STORAGE_TYPE</span><span class=\"token operator\">=</span>elasticsearch --env <span class=\"token assign-left variable\">ES_HOSTS</span><span class=\"token operator\">=</span><span class=\"token number\">192.168</span>.190.129:9200</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>openzipkin/zipkin-dependencies</pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "Java",
                "微服务分布式",
                "java",
                "Spring Cloud Alibaba",
                "Sleuth"
            ]
        },
        {
            "id": "https://oxyzen-wxf.github.io/computer-science/java/microservice/transaction-1/",
            "url": "https://oxyzen-wxf.github.io/computer-science/java/microservice/transaction-1/",
            "title": "分布式事务",
            "date_published": "2021-07-27T05:07:54.000Z",
            "content_html": "<p><img data-src=\"D:%5Cworkspace%5Cblog%5Chexo%5Cmyblog%5Csource%5Cassets%5Cimage-20210727104850584.png\" alt=\"image-20210727104850584\" /></p>\n<h2 id=\"一-本地事务\"><a class=\"anchor\" href=\"#一-本地事务\">#</a> 一、本地事务</h2>\n<h3 id=\"1-事务的基本性质\"><a class=\"anchor\" href=\"#1-事务的基本性质\">#</a> 1、事务的基本性质</h3>\n<p>数据库事务的几个特性：原子性 (Atomicity)、一致性 ( Consistency )、隔离性或独立性 ( Isolation) 和持久性 (Durabilily)，简称就是 ACID；</p>\n<ul>\n<li>原子性：一系列的操作整体不可拆分，要么同时成功，要么同时失败</li>\n<li>一致性：数据在事务的前后，业务整体一致。\n<ul>\n<li>转账。A:1000；B:1000； 转 200 事务成功；A：800 B：1200</li>\n</ul>\n</li>\n<li>隔离性：事务之间互相隔离。</li>\n<li>持久性：一旦事务成功，数据一定会落盘在数据库。</li>\n</ul>\n<p>在以往的单体应用中，我们多个业务操作使用同一条连接操作不同的数据表，一旦有异常， 我们可以很容易的整体回滚；</p>\n<p><img data-src=\"../../../../assets/image-20210727113528088.png\" alt=\"image-20210727113528088\" /></p>\n<h3 id=\"2-事务的隔离级别\"><a class=\"anchor\" href=\"#2-事务的隔离级别\">#</a> 2、事务的隔离级别</h3>\n<ul>\n<li><strong>READ UNCOMMITTED</strong>（读未提交）<br />\n该隔离级别的事务会读到其它未提交事务的数据，此现象也称之为脏读。</li>\n<li><strong>READ COMMITTED</strong>（读提交）<br />\n一个事务可以读取另一个已提交的事务，多次读取会造成不一样的结果，此现象称为不可重<br />\n复读问题，Oracle 和 SQL Server 的默认隔离级别。</li>\n<li><strong>REPEATABLE READ</strong>（可重复读）<br />\n该隔离级别是 MySQL 默认的隔离级别，在同一个事务里，select 的结果是事务开始时时间<br />\n点的状态，因此，同样的 select 操作读到的结果会是一致的，但是，会有幻读现象。MySQL<br />\n 的 InnoDB 引擎可以通过 next-key locks 机制（参考下文 &quot;行锁的算法&quot; 一节）来避免幻读。</li>\n<li><strong>SERIALIZABLE</strong>（序列化）<br />\n在该隔离级别下事务都是串行顺序执行的，MySQL 数据库的 InnoDB 引擎会给读操作隐式<br />\n加一把读共享锁，从而避免了脏读、不可重读复读和幻读问题。</li>\n</ul>\n<h3 id=\"3-事务的传播行为\"><a class=\"anchor\" href=\"#3-事务的传播行为\">#</a> 3、事务的传播行为</h3>\n<p>1、**PROPAGATION_REQUIRED：** 如果当前没有事务，就创建一个新事务，如果当前存在事务，<br />\n就加入该事务，该设置是最常用的设置。<br />\n2、**PROPAGATION_SUPPORTS：** 支持当前事务，如果当前存在事务，就加入该事务，如果当<br />\n前不存在事务，就以非事务执行。<br />\n3、**PROPAGATION_MANDATORY：** 支持当前事务，如果当前存在事务，就加入该事务，如果<br />\n当前不存在事务，就抛出异常。<br />\n4、**PROPAGATION_REQUIRES_NEW：** 创建新事务，无论当前存不存在事务，都创建新事务。<br />\n5、**PROPAGATION_NOT_SUPPORTED：** 以非事务方式执行操作，如果当前存在事务，就把当<br />\n前事务挂起。<br />\n6、**PROPAGATION_NEVER：** 以非事务方式执行，如果当前存在事务，则抛出异常。<br />\n7、**PROPAGATION_NESTED：** 如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，<br />\n则执行与 PROPAGATION_REQUIRED 类似的操作。</p>\n<h3 id=\"4-springboot-事务关键点\"><a class=\"anchor\" href=\"#4-springboot-事务关键点\">#</a> 4、SpringBoot 事务关键点</h3>\n<h4 id=\"1-事务的自动配置\"><a class=\"anchor\" href=\"#1-事务的自动配置\">#</a> 1、事务的自动配置</h4>\n<p>TransactionAutoConfiguration</p>\n<h4 id=\"2-事务的坑\"><a class=\"anchor\" href=\"#2-事务的坑\">#</a> 2、事务的坑</h4>\n<p>在同一个类里面，编写两个方法，内部调用的时候，会导致事务设置失效。原因是没有用到 代理对象的缘故。</p>\n<p>解决：</p>\n<p>​\t\t0）、导入 spring-boot-starter-aop<br />\n​\t\t1）、@EnableTransactionManagement(proxyTargetClass = true)<br />\n​\t\t2）、@EnableAspectJAutoProxy(exposeProxy=true)<br />\n​\t\t3）、AopContext.currentProxy () 调用方法</p>\n<h3 id=\"5-本地事务回顾\"><a class=\"anchor\" href=\"#5-本地事务回顾\">#</a> 5、本地事务回顾</h3>\n<p><strong>开启 aspectj 动态代理，不开启默认使用 jdk 代理</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@EnableAspectJAutoProxy</span><span class=\"token punctuation\">(</span>exposeProxy <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 没有接口也可以动态代理</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>exposeProxy <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 对外暴漏代理对象</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>timeout <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//a 事务  b 会随 a 的超时时间不会用自己的子事务无效  （同一个 service 调用 bc 方法其实还是共用一个事务）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// （同一个 service 调用 bc 方法其实还是共用一个事务）用动态代理对象调方法就可以了</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">OrderServiceImpl</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderServiceImpl</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">AopContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    o<span class=\"token punctuation\">.</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//a 事务</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    o<span class=\"token punctuation\">.</span><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 新事务  （不随 a 回滚）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span>REQUIRED<span class=\"token punctuation\">,</span>timeout <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 需要一个事务：如果前面有了就公用一个事务</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span>REQUIRES_NEW<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 需要一个新的事务，自己用一个事务</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"二-分布式事务\"><a class=\"anchor\" href=\"#二-分布式事务\">#</a> 二、分布式事务</h2>\n<h3 id=\"1-为什么有分布式事务\"><a class=\"anchor\" href=\"#1-为什么有分布式事务\">#</a> 1、为什么有分布式事务</h3>\n<p>分布式系统经常出现的异常<br />\n机器宕机、网络异常、消息丢失、消息乱序、数据错误、不可靠的 TCP、存储数据丢失...</p>\n<p><img data-src=\"../../../../assets/image-20210727120556443.png\" alt=\"image-20210727120556443\" /></p>\n<h3 id=\"2-cap-定理与-base-理论\"><a class=\"anchor\" href=\"#2-cap-定理与-base-理论\">#</a> 2、CAP 定理与 BASE 理论</h3>\n<h4 id=\"1-cap-定理\"><a class=\"anchor\" href=\"#1-cap-定理\">#</a> 1、CAP 定理</h4>\n<p>CAP 原则又称 CAP 定理，指的是在一个分布式系统中</p>\n<ul>\n<li><strong>一致性</strong>（Consistency）：\n<ul>\n<li>在分布式系统中的所有数据备份，在同一时刻是否同样的值。（等同于所有节点访<br />\n问同一份最新的数据副本）</li>\n</ul>\n</li>\n<li><strong>可用性</strong>（Availability）</li>\n<li>在集群中一部分节点故障后，集群整体是否还能响应客户端的读写请求。（对数据<br />\n更新具备高可用性）</li>\n<li><strong>分区容错性</strong>（Partition tolerance）</li>\n<li>大多数分布式系统都分布在多个子网络。每个子网络就叫做一个区（partition）。<br />\n分区容错的意思是，区间通信可能失败。比如，一台服务器放在中国，另一台服务<br />\n器放在美国，这就是两个区，它们之间可能无法通信。<br />\nCAP 原则指的是，这三个要素最多只能同时实现两点，<strong>不可能三者兼顾。</strong></li>\n</ul>\n<p><img data-src=\"../../../../assets/image-20210727120708664.png\" alt=\"image-20210727120708664\" /></p>\n<p>一般来说，分区容错无法避免，因此可以认为 CAP 的 P 总是成立。CAP 定理告诉我们， 剩下的 C 和 A 无法同时做到。</p>\n<p>分布式系统中实现一致性的 raft 算法、paxos</p>\n<p><strong>raft 算法动画：<span class=\"exturl\" data-url=\"aHR0cDovL3RoZXNlY3JldGxpdmVzb2ZkYXRhLmNvbS9yYWZ0Lw==\">http://thesecretlivesofdata.com/raft/</span></strong></p>\n<h4 id=\"2-面临的问题\"><a class=\"anchor\" href=\"#2-面临的问题\">#</a> 2、面临的问题</h4>\n<p>对于多数大型互联网应用的场景，主机众多、部署分散，而且现在的集群规模越来越大，所 以节点故障、网络故障是常态，而且要保证服务可用性达到 99.99999%（N 个 9），即保证 P 和 A，舍弃 C。</p>\n<h4 id=\"3-base-理论\"><a class=\"anchor\" href=\"#3-base-理论\">#</a> 3、BASE 理论</h4>\n<p>是对 CAP 理论的延伸，思想是即使无法做到强一致性（CAP 的一致性就是强一致性），但可 以采用适当的采取弱一致性，<strong>即最终一致性。</strong></p>\n<p>BASE 是指</p>\n<ul>\n<li>基本可用（Basically Available）\n<ul>\n<li>基本可用是指分布式系统在出现故障的时候，允许损失部分可用性（例如响应时间、<br />\n功能上的可用性），允许损失部分可用性。需要注意的是，基本可用绝不等价于系<br />\n统不可用。</li>\n<li>响应时间上的损失：正常情况下搜索引擎需要在 0.5 秒之内返回给用户相应的<br />\n查询结果，但由于出现故障（比如系统部分机房发生断电或断网故障），查询<br />\n结果的响应时间增加到了 1~2 秒。</li>\n<li>功能上的损失：购物网站在购物高峰（如双十一）时，为了保护系统的稳定性，<br />\n部分消费者可能会被引导到一个降级页面。</li>\n</ul>\n</li>\n<li>软状态（ Soft State）</li>\n<li>软状态是指允许系统存在中间状态，而该中间状态不会影响系统整体可用性。分布<br />\n式存储中一般一份数据会有多个副本，允许不同副本同步的延时就是软状态的体<br />\n现。mysql replication 的异步复制也是一种体现。</li>\n<li>最终一致性（ Eventual Consistency）</li>\n<li>最终一致性是指系统中的所有数据副本经过一定时间后，最终能够达到一致的状<br />\n态。弱一致性和强一致性相反，最终一致性是弱一致性的一种特殊情况。</li>\n</ul>\n<h4 id=\"4-强一致性-弱一致性-最终一致性\"><a class=\"anchor\" href=\"#4-强一致性-弱一致性-最终一致性\">#</a> 4、强一致性、弱一致性、最终一致性</h4>\n<p>从客户端角度，多进程并发访问时，更新过的数据在不同进程如何获取的不同策略，决定了 不同的一致性。对于关系型数据库，要求更新过的数据能被后续的访问都能看到，这是<strong>强一 致性</strong>。如果能容忍后续的部分或者全部访问不到，则是<strong>弱一致性</strong>。如果经过一段时间后要求 能访问到更新后的数据，则是<strong>最终一致性</strong></p>\n<h3 id=\"3-分布式事务几种方案\"><a class=\"anchor\" href=\"#3-分布式事务几种方案\">#</a> 3、分布式事务几种方案</h3>\n<h4 id=\"1-2pc-模式\"><a class=\"anchor\" href=\"#1-2pc-模式\">#</a> 1）、2PC 模式</h4>\n<p>数据库支持的 2PC【2 phase commit 二阶提交】，又叫做 XA Transactions。 MySQL 从 5.5 版本开始支持，SQL Server 2005 开始支持，Oracle 7 开始支持。 其中，XA 是一个两阶段提交协议，该协议分为以下两个阶段：</p>\n<p>第一阶段：事务协调器要求每个涉及到事务的数据库预提交 (precommit) 此操作，并反映是<br />\n否可以提交。第二阶段：事务协调器要求每个数据库提交数据。<br />\n其中，如果有任何一个数据库否决此次提交，那么所有数据库都会被要求回滚它们在此事务<br />\n中的那部分信息。</p>\n<p><img data-src=\"../../../../assets/image-20210727122326176.png\" alt=\"image-20210727122326176\" /></p>\n<h4 id=\"2-柔性事务-tcc-事务补偿型方案\"><a class=\"anchor\" href=\"#2-柔性事务-tcc-事务补偿型方案\">#</a> 2）、柔性事务 - TCC 事务补偿型方案</h4>\n<p><img data-src=\"../../../../assets/image-20210727122349309.png\" alt=\"image-20210727122349309\" /></p>\n<h4 id=\"3-柔性事务-最大努力通知型方案\"><a class=\"anchor\" href=\"#3-柔性事务-最大努力通知型方案\">#</a> 3）、柔性事务 - 最大努力通知型方案</h4>\n<p>按规律进行通知，** 不保证数据一定能通知成功，但会提供可查询操作接口进行核对。** 这种<br />\n方案主要用在与第三方系统通讯时，比如：调用微信或支付宝支付后的支付结果通知。这种<br />\n方案也是结合 MQ 进行实现，例如：通过 MQ 发送 http 请求，设置最大通知次数。达到通<br />\n知次数后即不再通知。<br />\n<strong>案例</strong>：银行通知、商户通知等（各大交易业务平台间的商户通知：多次通知、查询校对、对<br />\n账文件），支付宝的支付成功异步回调</p>\n<h4 id=\"4-柔性事务-可靠消息最终一致性方案异步确保型\"><a class=\"anchor\" href=\"#4-柔性事务-可靠消息最终一致性方案异步确保型\">#</a> 4）、柔性事务 - 可靠消息 + 最终一致性方案（异步确保型）</h4>\n<p>实现：业务处理服务在业务事务提交之前，向实时消息服务请求发送消息，实时消息服务只<br />\n记录消息数据，而不是真正的发送。业务处理服务在业务事务提交之后，向实时消息服务确<br />\n认发送。只有在得到确认发送指令后，实时消息服务才会真正发送。<br />\n防止消息丢失：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>* 1、做好消息确认机制（pulisher，consumer【手动 ack】）</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>* 2、每一个发送的消息都在数据库做好记录。定期将失败的消息再次发送一</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>遍</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id=\"三-seata的使用\"><a class=\"anchor\" href=\"#三-seata的使用\">#</a> 三、Seata 的使用</h2>\n<p><strong>文档：<span class=\"exturl\" data-url=\"aHR0cDovL3NlYXRhLmlvL3poLWNuL2RvY3Mvb3ZlcnZpZXcvd2hhdC1pcy1zZWF0YS5odG1s\">http://seata.io/zh-cn/docs/overview/what-is-seata.html</span></strong></p>\n<h3 id=\"seata-2pc-at事务模式\"><a class=\"anchor\" href=\"#seata-2pc-at事务模式\">#</a> Seata 2PC-AT 事务模式</h3>\n<h4 id=\"步骤-1建立数据库\"><a class=\"anchor\" href=\"#步骤-1建立数据库\">#</a> 步骤 1：建立数据库</h4>\n<ul>\n<li>要求：具有 InnoDB 引擎的 MySQL。</li>\n</ul>\n<p><strong>注意:</strong> 实际上，在示例用例中，这 3 个服务应该有 3 个数据库。 但是，为了简单起见，我们只创建一个数据库并配置 3 个数据源。</p>\n<h4 id=\"步骤-2创建-undo_log-表\"><a class=\"anchor\" href=\"#步骤-2创建-undo_log-表\">#</a> 步骤 2：创建 UNDO_LOG 表</h4>\n<p><strong>每个需要用 seata 的库都需要建立 undo_log 表</strong></p>\n<p>SEATA AT 模式需要  <code>UNDO_LOG</code>  表</p>\n<figure class=\"highlight sql\"><figcaption data-lang=\"SQL\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">-- 注意此处 0.3.0+ 增加唯一索引 ux_undo_log</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">CREATE</span> <span class=\"token keyword\">TABLE</span> <span class=\"token punctuation\">`</span>undo_log<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">`</span>branch_id<span class=\"token punctuation\">`</span> <span class=\"token keyword\">bigint</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">`</span>xid<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">`</span>context<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">128</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">`</span>rollback_info<span class=\"token punctuation\">`</span> <span class=\"token keyword\">longblob</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">`</span>log_status<span class=\"token punctuation\">`</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">11</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">`</span>log_created<span class=\"token punctuation\">`</span> <span class=\"token keyword\">datetime</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">`</span>log_modified<span class=\"token punctuation\">`</span> <span class=\"token keyword\">datetime</span> <span class=\"token operator\">NOT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">`</span>ext<span class=\"token punctuation\">`</span> <span class=\"token keyword\">varchar</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token boolean\">NULL</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token keyword\">PRIMARY</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">UNIQUE</span> <span class=\"token keyword\">KEY</span> <span class=\"token punctuation\">`</span>ux_undo_log<span class=\"token punctuation\">`</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">`</span>xid<span class=\"token punctuation\">`</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">`</span>branch_id<span class=\"token punctuation\">`</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">)</span> <span class=\"token keyword\">ENGINE</span><span class=\"token operator\">=</span><span class=\"token keyword\">InnoDB</span> <span class=\"token keyword\">AUTO_INCREMENT</span><span class=\"token operator\">=</span><span class=\"token number\">1</span> <span class=\"token keyword\">DEFAULT</span> <span class=\"token keyword\">CHARSET</span><span class=\"token operator\">=</span>utf8<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"步骤-3为示例业务创建表\"><a class=\"anchor\" href=\"#步骤-3为示例业务创建表\">#</a> 步骤 3：为示例业务创建表</h4>\n<h4 id=\"步骤-4-启动服务\"><a class=\"anchor\" href=\"#步骤-4-启动服务\">#</a> 步骤 4: 启动服务</h4>\n<ul>\n<li>从 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3NlYXRhL3NlYXRhL3JlbGVhc2VzLCVFNCVCOCU4QiVFOCVCRCVCRCVFNiU5QyU4RCVFNSU4QSVBMSVFNSU5OSVBOCVFOCVCRCVBRiVFNCVCQiVCNiVFNSU4QyU4NSVFRiVCQyU4QyVFNSVCMCU4NiVFNSU4NSVCNiVFOCVBNyVBMyVFNSU4RSU4QiVFNyVCQyVBOSVFMyU4MCU4Mg==\">https://github.com/seata/seata/releases, 下载服务器软件包，将其解压缩。</span></li>\n</ul>\n<h4 id=\"步骤5添加seata依赖\"><a class=\"anchor\" href=\"#步骤5添加seata依赖\">#</a> 步骤 5：添加 seata 依赖</h4>\n<figure class=\"highlight xml\"><figcaption data-lang=\"XML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dependency</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>groupId</span><span class=\"token punctuation\">></span></span>com.alibaba.cloud<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>groupId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>artifactId</span><span class=\"token punctuation\">></span></span>spring-cloud-starter-alibaba-seata<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>artifactId</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dependency</span><span class=\"token punctuation\">></span></span> 对应版本号下载对应的服务器软件包</pre></td></tr></table></figure><p><img data-src=\"../../../../assets/image-20210727125053591.png\" alt=\"image-20210727125053591\" /></p>\n<p>对应服务器包的版本也应该是 0.7.1<img data-src=\"../../../../assets/image-20210727125121971.png\" alt=\"image-20210727125121971\" /></p>\n<h4 id=\"步骤6配置软件包\"><a class=\"anchor\" href=\"#步骤6配置软件包\">#</a> 步骤 6：配置软件包</h4>\n<p><img data-src=\"../../../../assets/image-20210727125323648.png\" alt=\"image-20210727125323648\" /></p>\n<p><strong>registry.conf</strong></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>registry <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa  type指定用什么注册中心 并配置对应注册中心地址</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  type = <span class=\"token string\">\"nacos\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  nacos <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    serverAddr = <span class=\"token string\">\"localhost:8848\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    namespace = <span class=\"token string\">\"public\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    cluster = <span class=\"token string\">\"default\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  eureka <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    serviceUrl = <span class=\"token string\">\"http://localhost:1001/eureka\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    application = <span class=\"token string\">\"default\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    weight = <span class=\"token string\">\"1\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  redis <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    serverAddr = <span class=\"token string\">\"localhost:6379\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    db = <span class=\"token string\">\"0\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  zk <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    cluster = <span class=\"token string\">\"default\"</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    serverAddr = <span class=\"token string\">\"127.0.0.1:2181\"</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    session.timeout = <span class=\"token number\">6000</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    connect.timeout = <span class=\"token number\">2000</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  consul <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    cluster = <span class=\"token string\">\"default\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    serverAddr = <span class=\"token string\">\"127.0.0.1:8500\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  etcd3 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    cluster = <span class=\"token string\">\"default\"</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    serverAddr = <span class=\"token string\">\"http://localhost:2379\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  sofa <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    serverAddr = <span class=\"token string\">\"127.0.0.1:9603\"</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    application = <span class=\"token string\">\"default\"</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    region = <span class=\"token string\">\"DEFAULT_ZONE\"</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    datacenter = <span class=\"token string\">\"DefaultDataCenter\"</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    cluster = <span class=\"token string\">\"default\"</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    group = <span class=\"token string\">\"SEATA_GROUP\"</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    addressWaitTime = <span class=\"token string\">\"3000\"</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>  file <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    name = <span class=\"token string\">\"file.conf\"</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>config <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  # file、nacos 、apollo、zk、consul、etcd3    seata的配置信息</pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  type = <span class=\"token string\">\"file\"</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>  nacos <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    serverAddr = <span class=\"token string\">\"localhost\"</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    namespace = <span class=\"token string\">\"public\"</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    cluster = <span class=\"token string\">\"default\"</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>  consul <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>    serverAddr = <span class=\"token string\">\"127.0.0.1:8500\"</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>  apollo <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    app.id = <span class=\"token string\">\"seata-server\"</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    apollo.meta = <span class=\"token string\">\"http://192.168.1.204:8801\"</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>  zk <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    serverAddr = <span class=\"token string\">\"127.0.0.1:2181\"</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    session.timeout = <span class=\"token number\">6000</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    connect.timeout = <span class=\"token number\">2000</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"68\"></td><td><pre>  etcd3 <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    serverAddr = <span class=\"token string\">\"http://localhost:2379\"</span></pre></td></tr><tr><td data-num=\"70\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  file <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre>    name = <span class=\"token string\">\"file.conf\"</span></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"74\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>file.conf</strong></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>transport <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  # tcp udt unix-domain-socket</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  type = <span class=\"token string\">\"TCP\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  #NIO NATIVE</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  server = <span class=\"token string\">\"NIO\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  #enable heartbeat</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  heartbeat = <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  #thread factory for netty</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  thread-factory <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    boss-thread-prefix = <span class=\"token string\">\"NettyBoss\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    worker-thread-prefix = <span class=\"token string\">\"NettyServerNIOWorker\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    server-executor-thread-prefix = <span class=\"token string\">\"NettyServerBizHandler\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    share-boss-worker = <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    client-selector-thread-prefix = <span class=\"token string\">\"NettyClientSelector\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    client-selector-thread-size = <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    client-worker-thread-prefix = <span class=\"token string\">\"NettyClientWorkerThread\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    # netty boss thread size<span class=\"token punctuation\">,</span>will not be used for UDT</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    boss-thread-size = <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    #auto default pin or <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    worker-thread-size = <span class=\"token number\">8</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  shutdown <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    # when destroy server<span class=\"token punctuation\">,</span> wait seconds</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    wait = <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  serialization = <span class=\"token string\">\"seata\"</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  compressor = <span class=\"token string\">\"none\"</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>service <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  #vgroup->rgroup</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  vgroup_mapping.my_test_tx_group = <span class=\"token string\">\"default\"</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  #only support single node</pre></td></tr><tr><td data-num=\"33\"></td><td><pre>  default.grouplist = <span class=\"token string\">\"127.0.0.1:8091\"</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>  #degrade current not support</pre></td></tr><tr><td data-num=\"35\"></td><td><pre>  enableDegrade = <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>  #disable</pre></td></tr><tr><td data-num=\"37\"></td><td><pre>  disable = <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>  #unit ms<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">,</span>d represents milliseconds<span class=\"token punctuation\">,</span> seconds<span class=\"token punctuation\">,</span> minutes<span class=\"token punctuation\">,</span> hours<span class=\"token punctuation\">,</span> days<span class=\"token punctuation\">,</span> default permanent</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>  max.commit.retry.timeout = <span class=\"token string\">\"-1\"</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>  max.rollback.retry.timeout = <span class=\"token string\">\"-1\"</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>client <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>  async.commit.buffer.limit = <span class=\"token number\">10000</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>  lock <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    retry.internal = <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    retry.times = <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>  report.retry.count = <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>## transaction log store 事务日志存在哪里</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>store <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>  ## store mode<span class=\"token operator\">:</span> file、db</pre></td></tr><tr><td data-num=\"55\"></td><td><pre>  mode = <span class=\"token string\">\"file\"</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>  ## file store</pre></td></tr><tr><td data-num=\"58\"></td><td><pre>  file <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    dir = <span class=\"token string\">\"sessionStore\"</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre></pre></td></tr><tr><td data-num=\"61\"></td><td><pre>    # branch session size <span class=\"token punctuation\">,</span> if exceeded first try compress lockkey<span class=\"token punctuation\">,</span> still exceeded throws exceptions</pre></td></tr><tr><td data-num=\"62\"></td><td><pre>    max-branch-session-size = <span class=\"token number\">16384</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>    # globe session size <span class=\"token punctuation\">,</span> if exceeded throws exceptions</pre></td></tr><tr><td data-num=\"64\"></td><td><pre>    max-global-session-size = <span class=\"token number\">512</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>    # file buffer size <span class=\"token punctuation\">,</span> if exceeded allocate new buffer</pre></td></tr><tr><td data-num=\"66\"></td><td><pre>    file-write-buffer-cache-size = <span class=\"token number\">16384</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>    # when recover batch read size</pre></td></tr><tr><td data-num=\"68\"></td><td><pre>    session.reload.read_size = <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"69\"></td><td><pre>    # async<span class=\"token punctuation\">,</span> sync</pre></td></tr><tr><td data-num=\"70\"></td><td><pre>    flush-disk-mode = async</pre></td></tr><tr><td data-num=\"71\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"72\"></td><td><pre></pre></td></tr><tr><td data-num=\"73\"></td><td><pre>  ## database store 数据库配置   global_table branch_table branch_table  对应外面的db_store.sql</pre></td></tr><tr><td data-num=\"74\"></td><td><pre>  db <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"75\"></td><td><pre>    ## the implement of javax.sql.DataSource<span class=\"token punctuation\">,</span> such as DruidDataSource(druid)/BasicDataSource(dbcp) etc.</pre></td></tr><tr><td data-num=\"76\"></td><td><pre>    datasource = <span class=\"token string\">\"dbcp\"</span></pre></td></tr><tr><td data-num=\"77\"></td><td><pre>    ## mysql/oracle/h2/oceanbase etc.</pre></td></tr><tr><td data-num=\"78\"></td><td><pre>    db-type = <span class=\"token string\">\"mysql\"</span></pre></td></tr><tr><td data-num=\"79\"></td><td><pre>    url = <span class=\"token string\">\"jdbc:mysql://127.0.0.1:3306/seata\"</span></pre></td></tr><tr><td data-num=\"80\"></td><td><pre>    user = <span class=\"token string\">\"mysql\"</span></pre></td></tr><tr><td data-num=\"81\"></td><td><pre>    password = <span class=\"token string\">\"mysql\"</span></pre></td></tr><tr><td data-num=\"82\"></td><td><pre>    min-conn = <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"83\"></td><td><pre>    max-conn = <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"84\"></td><td><pre>    global.table = <span class=\"token string\">\"global_table\"</span></pre></td></tr><tr><td data-num=\"85\"></td><td><pre>    branch.table = <span class=\"token string\">\"branch_table\"</span></pre></td></tr><tr><td data-num=\"86\"></td><td><pre>    lock-table = <span class=\"token string\">\"lock_table\"</span></pre></td></tr><tr><td data-num=\"87\"></td><td><pre>    query-limit = <span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"88\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"89\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"90\"></td><td><pre>lock <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"91\"></td><td><pre>  ## the lock store mode<span class=\"token operator\">:</span> local、remote</pre></td></tr><tr><td data-num=\"92\"></td><td><pre>  mode = <span class=\"token string\">\"remote\"</span></pre></td></tr><tr><td data-num=\"93\"></td><td><pre></pre></td></tr><tr><td data-num=\"94\"></td><td><pre>  local <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"95\"></td><td><pre>    ## store locks in user's database</pre></td></tr><tr><td data-num=\"96\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"97\"></td><td><pre></pre></td></tr><tr><td data-num=\"98\"></td><td><pre>  remote <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"99\"></td><td><pre>    ## store locks in the seata's server</pre></td></tr><tr><td data-num=\"100\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"101\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"102\"></td><td><pre>recovery <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"103\"></td><td><pre>  committing-retry-delay = <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"104\"></td><td><pre>  asyn-committing-retry-delay = <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"105\"></td><td><pre>  rollbacking-retry-delay = <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"106\"></td><td><pre>  timeout-retry-delay = <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"107\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"108\"></td><td><pre></pre></td></tr><tr><td data-num=\"109\"></td><td><pre>transaction <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"110\"></td><td><pre>  undo.data.validation = <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"111\"></td><td><pre>  undo.log.serialization = <span class=\"token string\">\"jackson\"</span></pre></td></tr><tr><td data-num=\"112\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"113\"></td><td><pre></pre></td></tr><tr><td data-num=\"114\"></td><td><pre>## metrics settings</pre></td></tr><tr><td data-num=\"115\"></td><td><pre>metrics <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"116\"></td><td><pre>  enabled = <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"117\"></td><td><pre>  registry-type = <span class=\"token string\">\"compact\"</span></pre></td></tr><tr><td data-num=\"118\"></td><td><pre>  # multi exporters use comma divided</pre></td></tr><tr><td data-num=\"119\"></td><td><pre>  exporter-list = <span class=\"token string\">\"prometheus\"</span></pre></td></tr><tr><td data-num=\"120\"></td><td><pre>  exporter-prometheus-port = <span class=\"token number\">9898</span></pre></td></tr><tr><td data-num=\"121\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>异常</strong></p>\n<pre><code>org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'globalTransactionScanner' defined in class path resource [com/alibaba/cloud/seata/GlobalTransactionAutoConfiguration.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [io.seata.spring.annotation.GlobalTransactionScanner]: Factory method 'globalTransactionScanner' threw exception; nested exception is io.seata.common.exception.NotSupportYetException: not support register type: null\n</code></pre>\n<p><strong>原因是因为导入了 seata，而 seata 接管事务是需要我们配置的，要不然 seata 拿不到配置的数据源则会报 null，不需要的排除 seata 就行，引用的需要配置</strong></p>\n<h4 id=\"注意\"><a class=\"anchor\" href=\"#注意\">#</a> 注意：</h4>\n<p>所有想要用到分布式事务的微服务使用 seata DataSourceProxy 代理自己的数据源</p>\n<h4 id=\"步骤7配置\"><a class=\"anchor\" href=\"#步骤7配置\">#</a> 步骤 7：配置</h4>\n<p>首先需要导入软件包中的两个配置文件到需要使用 seata 的服务的配置下</p>\n<p><img data-src=\"../../../../assets/image-20210727133200515.png\" alt=\"image-20210727133200515\" /></p>\n<p>并修改如下配置</p>\n<p><strong>file.conf</strong></p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>service <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  #vgroup->rgroup</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  vgroup_mapping.gulimall-order-fescar-service-group = <span class=\"token string\">\"default\"</span>  <span class=\"token comment\">// 此处 gulimall-order - 为服务的名字需要与 yml 配置文件的 applicationname 相同</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  #only support single node</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  default.grouplist = <span class=\"token string\">\"127.0.0.1:8091\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  #degrade current not support</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  enableDegrade = <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  #disable</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  disable = <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  #unit ms<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">,</span>d represents milliseconds<span class=\"token punctuation\">,</span> seconds<span class=\"token punctuation\">,</span> minutes<span class=\"token punctuation\">,</span> hours<span class=\"token punctuation\">,</span> days<span class=\"token punctuation\">,</span> default permanent</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  max.commit.retry.timeout = <span class=\"token string\">\"-1\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  max.rollback.retry.timeout = <span class=\"token string\">\"-1\"</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>为 seata 配置接管事务，用 DataSourceProxy 去代理事务（必须配置，否则导入 seata 在 spring 容器中进行加载 seata 配置 的时候为报错）</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author WangXuefeng</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @date 2021/7/27 13:34</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @description</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Configuration</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MySeataConfig</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     * </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>     * 获取数据源配置，springboot 把数据原所有配置封装到了 DataSourceProperties 中</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token annotation punctuation\">@Autowired</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token class-name\">DataSourceProperties</span> dataSourceProperties<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     * 配置 seata 接管原先我们的数据源，此处用的是 springboot 默认的 HikariDataSource 数据原，</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     * 我们需要将数据源交给 DataSourceProxy 也就 seata 代理</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>     * @param dataSourceProperties</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>     * @return</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>     */</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token annotation punctuation\">@Bean</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">DataSource</span> <span class=\"token function\">dataSource</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSourceProperties</span> dataSourceProperties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token class-name\">HikariDataSource</span> hikariDataSource <span class=\"token operator\">=</span> dataSourceProperties<span class=\"token punctuation\">.</span><span class=\"token function\">initializeDataSourceBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">HikariDataSource</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">StringUtils</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasText</span><span class=\"token punctuation\">(</span>dataSourceProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            hikariDataSource<span class=\"token punctuation\">.</span><span class=\"token function\">setPoolName</span><span class=\"token punctuation\">(</span>dataSourceProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span>  <span class=\"token class-name\">DataSourceProxy</span><span class=\"token punctuation\">(</span>hikariDataSource<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"步骤8加全局注解\"><a class=\"anchor\" href=\"#步骤8加全局注解\">#</a> 步骤 8：加全局注解</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@GlobalTransactional</span> <span class=\"token comment\">// 在主事务上加</span></pre></td></tr></table></figure><p><strong>问题：不适合高并发场景（因为 AT 模式需要加很多锁，所以高并发性能很低）</strong></p>\n<h3 id=\"高并发方式分布式\"><a class=\"anchor\" href=\"#高并发方式分布式\">#</a> 高并发方式分布式</h3>\n<p>分布式事务几种方案中的 3 和 4 柔性事务最终一致性</p>\n<p>使用消息中间来完成业务逻辑</p>\n<p><strong>RabbitMQ:<a href=\"https://oxyzen-wxf.github.io/database/msg/rabbitmq-1/\">https://oxyzen-wxf.github.io/database/msg/rabbitmq-1/</a></strong></p>\n",
            "tags": [
                "计算机科学",
                "Java",
                "微服务分布式",
                "java",
                "Transaction"
            ]
        },
        {
            "id": "https://oxyzen-wxf.github.io/computer-science/vue/vue-2/",
            "url": "https://oxyzen-wxf.github.io/computer-science/vue/vue-2/",
            "title": "vue中$refs, $emit, $on, $once, $off的使用详解",
            "date_published": "2021-07-14T05:44:55.000Z",
            "content_html": "<h2 id=\"1refs的使用场景\"><a class=\"anchor\" href=\"#1refs的使用场景\">#</a> <strong>1.$refs 的使用场景</strong></h2>\n<p>父组件调用子组件的方法，可以传递数据。</p>\n<p>父组件：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"app\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>child<span class=\"token operator\">-</span>a ref<span class=\"token operator\">=</span><span class=\"token string\">\"child\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>child<span class=\"token operator\">-</span>a<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"getMyEvent\"</span><span class=\"token operator\">></span>点击父组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">import</span> ChildA <span class=\"token keyword\">from</span> <span class=\"token string\">'./child.vue'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    components<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      ChildA</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        msg<span class=\"token operator\">:</span><span class=\"token string\">'我是父组件的数据'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    methods<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token function\">getMyEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 调用子组件的方法，child 是上边 ref 起的名字，emitEvent 是子组件的方法。</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>child<span class=\"token punctuation\">.</span><span class=\"token function\">emitEvent</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>子组件：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>button<span class=\"token operator\">></span>点击我<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    methods<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token function\">emitEvent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'接收的数据------'</span><span class=\"token operator\">+</span>msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"2emit的使用\"><a class=\"anchor\" href=\"#2emit的使用\">#</a> <strong>2.$emit 的使用</strong></h2>\n<p>子组件调用父组件的方法并传递数据。</p>\n<p>子组件：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"emitEvent\"</span><span class=\"token operator\">></span>点击我<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">return</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        msg<span class=\"token operator\">:</span><span class=\"token string\">'我是子组件的数据'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    methods<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token function\">emitEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">// 通过按钮的点击事件触发方法，然后用 $emit 触发一个 my-event 的自定义方法，传递 this.msg 数据。</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-event'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>父组件：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>div id<span class=\"token operator\">=</span><span class=\"token string\">\"app\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>child<span class=\"token operator\">-</span>a @my<span class=\"token operator\">-</span>event<span class=\"token operator\">=</span><span class=\"token string\">\"getMyEvent\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>child<span class=\"token operator\">-</span>a<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 父组件通过监测 my-event 事件执行一个方法，然后取到子组件中传递过来的值。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">import</span> childA <span class=\"token keyword\">from</span> <span class=\"token string\">'./child.vue'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    components<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      childA</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    methods<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token function\">getMyEvent</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>       console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'接收数据---'</span><span class=\"token operator\">+</span>msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>       <span class=\"token comment\">// 接收数据，我是子组件的数据</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"3on的使用场景\"><a class=\"anchor\" href=\"#3on的使用场景\">#</a> <strong>3.$on 的使用场景</strong></h2>\n<p>兄弟组件之间相互传递数据。</p>\n<p>首先创建一个 Vue 的空白实例（兄弟组件的桥梁）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>子组件 A: 发送放使用 $emit 自定义事件把数据带过去。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span><span class=\"token constant\">A</span>组件<span class=\"token operator\">-</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"把A组件数据传递给B\"</span> @click<span class=\"token operator\">=</span><span class=\"token string\">\"send\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">import</span> eventBus <span class=\"token keyword\">from</span> <span class=\"token string\">'./eventBus'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token keyword\">return</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        msg<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          a<span class=\"token operator\">:</span><span class=\"token string\">'111'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          b<span class=\"token operator\">:</span><span class=\"token string\">'222'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    methods<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        eventBus<span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aevent'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>子组件 B: 接收方通过 $on 监听自定义事件的 callback 接收数据</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>span<span class=\"token operator\">></span><span class=\"token constant\">B</span>组件，<span class=\"token constant\">A</span>传的数据为<span class=\"token operator\">--</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">1</span><span class=\"token operator\">--</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>span<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">import</span> eventBus <span class=\"token keyword\">from</span> <span class=\"token string\">'./eventBus.vue'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token keyword\">return</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        msg<span class=\"token operator\">:</span><span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      eventBus<span class=\"token punctuation\">.</span><span class=\"token function\">$on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aevent'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">val</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 监听事件 aevent，回调函数要使用箭头函数。</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 打印结果；我是 a 组件的数据。</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>父组件：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span>  </pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>childa<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>childa<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span>childb<span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>childb<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">import</span> childa <span class=\"token keyword\">from</span> <span class=\"token string\">'./childa.vue'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">import</span> childb <span class=\"token keyword\">from</span> <span class=\"token string\">'./childb.vue'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    componets<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      childa<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      childb</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">return</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        msg<span class=\"token operator\">:</span><span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><h2 id=\"4once\"><a class=\"anchor\" href=\"#4once\">#</a> 4.$once</h2>\n<p><strong>$once</strong></p>\n<p>使用：vm.$once (' 事件名称 ',callback)</p>\n<p>说明：监听当前实例 (vm) 中的自定义事件，事件可以由 $emit 定义，但是只会触发一次，触发后即解除</p>\n<p><strong>$on</strong></p>\n<p>使用：vm.$on (' 事件名称 ',callback)</p>\n<p>说明：监听当前实例 (vm) 中的自定义事件，事件可以由 $emit 定义</p>\n<h2 id=\"5off\"><a class=\"anchor\" href=\"#5off\">#</a> 5.$off</h2>\n<p>使用：vm.$off (' 事件名称 ')</p>\n<p>说明：关闭当前实例中的自定义事件</p>\n<p>代码示例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>子组件：</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"clickFn\"</span><span class=\"token operator\">></span>我是子组件<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"removeListener\"</span><span class=\"token operator\">></span>解除监听<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">created</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ChildClickFn'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">arg</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我是用$on监听事件并触发的，子组件的clickFn被执行了,参数是:'</span><span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$once</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ChildClickFn'</span><span class=\"token punctuation\">,</span> <span class=\"token parameter\">arg</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我是用$once监听事件并触发的,参数是:'</span><span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token function\">clickFn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ChildClickFn'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'is Child Data'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token function\">removeListener</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$off</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ChildClickFn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'解除监听'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>父组件：</pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token operator\">&lt;</span>Test @ChildClickFn<span class=\"token operator\">=</span><span class=\"token string\">\"parentClickFn\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre><span class=\"token keyword\">import</span> Test <span class=\"token keyword\">from</span> <span class=\"token string\">'./views/test3/index'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'App'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>    components<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> Test <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token function\">parentClickFn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'我是父组件，子组件传过来的参数是：'</span><span class=\"token punctuation\">,</span> arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure><p>效果：</p>\n<p><img data-src=\"https://img2020.cnblogs.com/blog/1064787/202102/1064787-20210227141750977-836368062.gif\" alt=\"img\" /></p>\n",
            "tags": [
                "计算机科学",
                "Vue",
                "vue"
            ]
        },
        {
            "id": "https://oxyzen-wxf.github.io/computer-science/vue/vue-4/",
            "url": "https://oxyzen-wxf.github.io/computer-science/vue/vue-4/",
            "title": "vue中传值的使用",
            "date_published": "2021-07-14T05:44:55.000Z",
            "content_html": "<h3 id=\"父传子传值\"><a class=\"anchor\" href=\"#父传子传值\">#</a> 父传子传值</h3>\n<ul>\n<li>\n<p>第一个就是要明白怎么在父页面中向子组件中传值？你可以给子组件传入一个静态的值：</p>\n<p><img data-src=\"../../../assets/image-20210714164444699.png\" alt=\"image-20210714164444699\" /></p>\n</li>\n<li>\n<p>但我们一般都是需要传动态的值，所以需要 <code>v-bind</code>  绑定，当然，你传的值可以是数字、对象、数组等等，<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rcy5qaWFuc2h1LmNvbS9nbz90bz1odHRwcyUzQSUyRiUyRmNuLnZ1ZWpzLm9yZyUyRnYyJTJGZ3VpZGUlMkZjb21wb25lbnRzLXByb3BzLmh0bWw=\">参见 vue 官网</span>。</p>\n<p><img data-src=\"../../../assets/image-20210714164616866.png\" alt=\"image-20210714164616866\" /></p>\n</li>\n<li>\n<p>第二个就是要知道如何在子组件中接受父页面传过来的值，有几点需要了解：</p>\n<ul>\n<li>组件实例的作用域是孤立的。</li>\n<li>子组件要显式的用 <code>props</code>  选项声明它预期的数据，如：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 某个子组件中：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  props<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    title<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token string\">'hello world'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><div class=\"note information_desk_person:\">\n<p>以上就是 <code>单向数据流</code> 的一般表现了： 父级 prop 的更新会向下流动到子组件中，但是反过来则不行。</p>\n</div>\n<h3 id=\"子传父传值\"><a class=\"anchor\" href=\"#子传父传值\">#</a> 子传父传值</h3>\n<h4 id=\"1-基本概念\"><a class=\"anchor\" href=\"#1-基本概念\">#</a> 1. 基本概念</h4>\n<ul>\n<li>\n<p>在 vue 中，父子组件的关系可以总结为 <code>prop</code>  向下传递， <code>事件</code> 向上传递。父组件通过 <code>prop</code>  给子组件下发数据，子组件通过 <code>事件</code> 给父组件发送信息。</p>\n<p><img data-src=\"../../../assets/image-20210714164741928.png\" alt=\"image-20210714164741928\" /></p>\n</li>\n<li>\n<p>每个 Vue 实例都实现了事件接口：使用 <code>$on(evntName)</code>  监听事件；使用 <code>$emit(eventName,optionalPayload)</code>  触发事件。另外，父组件可以在使用子组件的地方直接用 <code>v-on</code>  来监听子组件触发的事件。</p>\n</li>\n</ul>\n<h4 id=\"2-举例说明\"><a class=\"anchor\" href=\"#2-举例说明\">#</a> 2. 举例说明</h4>\n<ul>\n<li>\n<p>父组件在组件上定义了一个自定义事件 <code>childFn</code> ，事件名为 <code>parentFn</code>  用于接受子组件传过来的 <code>message</code>  值。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 父组件 <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"test\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token operator\">&lt;</span>test<span class=\"token operator\">-</span>com @childFn<span class=\"token operator\">=</span><span class=\"token string\">\"parentFn\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>test<span class=\"token operator\">-</span>com<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token operator\">&lt;</span>br<span class=\"token operator\">/</span><span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      子组件传来的值 <span class=\"token operator\">:</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>swig￼<span class=\"token number\">0</span><span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>             message<span class=\"token operator\">:</span> <span class=\"token string\">''</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>       <span class=\"token function\">parentFn</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> payload<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<p>子组件是一个 <code>buttton</code>  按钮，并为其添加了一个 <code>click</code>  事件，当点击的时候使用 <code>$emit()</code>  触发事件，把 <code>message</code>  传给父组件。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span> 子组件 <span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>template<span class=\"token operator\">></span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>div <span class=\"token keyword\">class</span><span class=\"token operator\">=</span><span class=\"token string\">\"testCom\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span> v<span class=\"token operator\">-</span>model<span class=\"token operator\">=</span><span class=\"token string\">\"message\"</span> <span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span>button @click<span class=\"token operator\">=</span><span class=\"token string\">\"click\"</span><span class=\"token operator\">></span>Send<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>template<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token comment\">// 默认</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          message<span class=\"token operator\">:</span> <span class=\"token string\">'我是来自子组件的消息'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'childFn'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span>    </pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n<li>\n<p>这样我们就基本实现了子组件向父组件发送值了:</p>\n<p><img data-src=\"../../../assets/image-20210714164928038.png\" alt=\"image-20210714164928038\" /></p>\n</li>\n</ul>\n<h3 id=\"通过sync实现数据双向绑定-从而同步父子组件数据\"><a class=\"anchor\" href=\"#通过sync实现数据双向绑定-从而同步父子组件数据\">#</a> 通过 sync 实现数据双向绑定， 从而同步父子组件数据</h3>\n<p><strong>在某些特殊的需求场景下，我们可能会希望父子组件中的数据时刻保持同步</strong>， 这时候你可能会像下面这样做：</p>\n<p>这是父组件中的 template:</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>son</span> <span class=\"token attr-name\">:foo</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bar<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">v-on:</span>update</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>val => bar = val<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>son</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>在子组件中， 我们通过 props 声明的方式接收 foo 并使用</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>props<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     foo<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>同时每当子组件中数据改变的时候，通过</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'update'</span><span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>把参数 newValue 传递给父组件 template 中监听函数中的 &quot;val&quot;。然后通过</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token parameter\">val</span> <span class=\"token operator\">=></span> bar <span class=\"token operator\">=</span> val</pre></td></tr></table></figure><p>这个表达式就实现了 bar = newValue. 这个时候，我们发现父组件中的关键数据 bar 被子组件改变（相等）了！</p>\n<p><strong>通过数据的双向绑定， 父（组件）可以修改子的数据， 子也可以修改父的数据</strong></p>\n<p>Vue 提供了 sync 修饰符简化上面的代码，例如：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>comp</span> <span class=\"token attr-name\">:foo.sync</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bar<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>comp</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>会被扩展为：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>comp</span> <span class=\"token attr-name\">:foo</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>bar<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\"><span class=\"token namespace\">@update:</span>foo</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>val => bar = val<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>comp</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>然后你需要在子组件中改变父组件数据的时候， 需要触发以下的自定义事件:</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"update:foo\"</span><span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>来源：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vcGVuZ2h1d2FuL3AvNzQ3MzM3NS5odG1s\">https://www.cnblogs.com/penghuwan/p/7473375.html</span></strong></p>\n<h3 id=\"非父子组件传值一\"><a class=\"anchor\" href=\"#非父子组件传值一\">#</a> 非父子组件传值（一）</h3>\n<p><strong>非父子组件（跨级组件和兄弟组件）通信时，使用了 <code>bus</code> （中央事件总线）的一个方法，用来触发和接收事件，进一步起到通信的作用。</strong></p>\n<p>公共 js</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 公共 bus.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 非父子组件之间传值，需要定义个公共的公共实例文件 bus.js，作为中间仓库来传值，不然路由组件之间达不到传值的效果</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 组件 B</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 引入公共的 bug，来做为中间传达的工具</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> Bus <span class=\"token keyword\">from</span> <span class=\"token string\">'./bus.js'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 在 mounted 进行监听</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">mounted</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 用 $on 事件来接收参数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    Bus<span class=\"token punctuation\">.</span><span class=\"token function\">$on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'msgToB'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token comment\">//data 就是组件 A 传过来的值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>组件<span class=\"token constant\">A</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 引入公共的 bug，来做为中间传达的工具</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> Bus <span class=\"token keyword\">from</span> <span class=\"token string\">'./bus.js'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 创建方法进行传递值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 用 $emit 事件来传递参数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Bus<span class=\"token punctuation\">.</span><span class=\"token function\">$emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'msgToB'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>msg<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"非父子组件传值二\"><a class=\"anchor\" href=\"#非父子组件传值二\">#</a> 非父子组件传值（二）</h3>\n<p><strong>Vue 组件间的通信 pubsub-js 实现步骤解析</strong></p>\n<ol>\n<li>\n<p>首先安装 pubsub-js</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> --save pubsub-js</pre></td></tr></table></figure></li>\n<li>\n<p>订阅方组件</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> PubSub <span class=\"token keyword\">from</span> <span class=\"token string\">'pubsub-js'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 执行异常代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre> <span class=\"token comment\">// 订阅消息</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre> PubSub<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'deleteTodo'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">msg<span class=\"token punctuation\">,</span>index</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">deleteTodo</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 调用 deleteTodo 方法执行真正的业务逻辑</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure></li>\n<li>\n<p>发布方组件</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token keyword\">import</span> PubSub <span class=\"token keyword\">from</span> <span class=\"token string\">'pubsub-js'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> <span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>   <span class=\"token function\">handlerEnter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">isEnter</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isEnter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bgColor <span class=\"token operator\">=</span> <span class=\"token string\">'gray'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isShow <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>bgColor <span class=\"token operator\">=</span> <span class=\"token string\">'white'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>isShow <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>   <span class=\"token function\">deleteItem</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 表示从 this 对象中取出 todo,index,deleteTodo 三个对象</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>todo<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> deleteTodo<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span><span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">确认删除</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>todo<span class=\"token punctuation\">.</span>title<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">吗？</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>     <span class=\"token comment\">// 发布消息</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>     PubSub<span class=\"token punctuation\">.</span><span class=\"token function\">publish</span><span class=\"token punctuation\">(</span><span class=\"token string\">'deleteTodo'</span><span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//deleteTodo 一定要与订阅方名称一样，index 是通信的具体数据</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre> </pre></td></tr><tr><td data-num=\"23\"></td><td><pre>   <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n</ol>\n<p>也可以在 src 下的 main.js 中引用：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> PubSub <span class=\"token keyword\">from</span> <span class=\"token string\">'pubsub-js'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>PubSub <span class=\"token operator\">=</span> PubSub</pre></td></tr></table></figure>",
            "tags": [
                "计算机科学",
                "Vue",
                "vue"
            ]
        },
        {
            "id": "https://oxyzen-wxf.github.io/worknote/Interview-2/",
            "url": "https://oxyzen-wxf.github.io/worknote/Interview-2/",
            "title": "面试题笔记记录(二)面试必考题（通俗易懂精华版）",
            "date_published": "2021-07-10T03:44:55.000Z",
            "content_html": "<div class=\"note info\">\n<p>B 站图灵课堂：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWFNNHkxVDdQWT9mcm9tPXNlYXJjaCZhbXA7c2VpZD0xMTgwNTk0OTg2MDA4NjI3MjMwMA==\">https://www.bilibili.com/video/BV1aM4y1T7PY?from=search&amp;seid=11805949860086272300</span></p>\n</div>\n<h2 id=\"笔试\"><a class=\"anchor\" href=\"#笔试\">#</a> 笔试</h2>\n<h3 id=\"看一下代码回答问题一\"><a class=\"anchor\" href=\"#看一下代码回答问题一\">#</a> 看一下代码回答问题（一）</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>*   问题：在这中间可以添加 N 行代码，但必须保证 s 引用的指向不变，最终将输出变成 abcd</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * 核心考的是反射，而不是使用 replace 或者 stringbuilder</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 在这中间可以添加 N 行代码，但必须保证 s 引用的指向不变，最终将输出变成 abcd</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 利用反射，string 源码中的就是利用属性名为 value 的 char 类型数组组成的我们只需要通过反射来修改属性 value 就好了</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">Field</span> value <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    value<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    value<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token string\">\"abcd\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"看一下代码回答问题二\"><a class=\"anchor\" href=\"#看一下代码回答问题二\">#</a> 看一下代码回答问题（二）</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 首先 s1 == s2 考察的是 s1 是 new 在堆空间开辟内存空间，s1 指向的是堆内存地址</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * s2 则是首先判断字符串常量池有没有 abc，有则引用没有则添加到常量池，所以是</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * s1 == s2 为 false</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * </pre></td></tr><tr><td data-num=\"6\"></td><td><pre> * 首先了解下 intern 方法，然后理解以后 s2 == s3 为 true 是因为 s1 调用 intern 方法首先</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> * 会去常量池去找引用，而此时 s2 已经在常量池中添加了 abc，所以 s1 的 intern 方法直接把</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> * abc 在常量池的引用给了 s3，所以 s3 等于 s2</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">review2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">String</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// s1 == s2  true or false?</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s1 <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">//string 对象的 intern 方法，首先会检查字符串常量池中是否存在 \"abc\"，</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\">// 如果存在则返回该字符串引用，如果不存在，则把 \"abc\" 添加到字符串常量中，</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 并返回该字符串常量的引用。</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token class-name\">String</span> s3 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">intern</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// s3 == s2  true or false?</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s3 <span class=\"token operator\">==</span> s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"看一下代码回答问题三\"><a class=\"anchor\" href=\"#看一下代码回答问题三\">#</a> 看一下代码回答问题（三）</h3>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> *  原理可以参考 integer 源码，</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> *  在 interger 类中，存在一个静态内部类 IntegerCache，该类中存在一个 integer cachel，</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> *  并且存在一个 static 块，会在加载类的时候执行，</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> *  会将 - 128 至 127 这些数字提前生成 integer 对象，并缓存在 cache 数组中，当我们在定义 Integer 数字时，</pre></td></tr><tr><td data-num=\"7\"></td><td><pre> *  会调用 IntegerSvalueo 防法，valueo 仿法会判断所定义的数字是否在 - 128 至 127 之间，</pre></td></tr><tr><td data-num=\"8\"></td><td><pre> *  如果存在则直接从 cache 数组中获取 integer 对象，如果超过，则生成一个新的 nteger 对象。</pre></td></tr><tr><td data-num=\"9\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">review3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token class-name\">Integer</span> i1 <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 直接写数字赋值给 i1 等同于 调用了 integer 的 valueof 方法</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token class-name\">Integer</span> i2 <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i1 <span class=\"token operator\">==</span> i2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token class-name\">Integer</span> i3 <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token class-name\">Integer</span> i4 <span class=\"token operator\">=</span> <span class=\"token number\">128</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i3 <span class=\"token operator\">==</span> i4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"string-stringbuffer-stringbuilder区别\"><a class=\"anchor\" href=\"#string-stringbuffer-stringbuilder区别\">#</a> String、StringBuffer、StringBuilder 区别</h2>\n<p>1.String 是不可变的，如果尝试去修改，会新生成一个字符串对象，StringBuffer 和 StringBuilder 是可变的 2.StringBuffer 是线程安全的，StringBuilder 是线程不安全的，所以在单线程环境下 StringBuilder 效率会更高</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> *String、StringBuffer、StringBuilder 区别</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> *</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * 1.String 是不可变的，如果尝试去修改，会新生成一个字符串对象，StringBuffer 和 StringBuilder 是可变的</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * 2.StringBuffer 是线程安全的，StringBuilder 是线程不安全的，所以在单线程环境下 StringBuilder 效率会更高</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token annotation punctuation\">@Test</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">review4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">String</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"abcd\"</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 即使引用地址不会变化，但是却生成了新的字符串对象</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// StringBuffer StringBuilder 不会生成新的字符串对象</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"arraylist和linkedlist有哪些区别\"><a class=\"anchor\" href=\"#arraylist和linkedlist有哪些区别\">#</a> ArrayList 和 LinkedList 有哪些区别？</h2>\n<ol>\n<li>\n<p>首先，他们的底层数据结构不同，Arraylist 底层是基于数组实现的，LinkedList 底层是基于链表实现的</p>\n</li>\n<li>\n<p>由于底层数据结构不同，他们所适用的场景也不同，Arraylist 更适合随机查找，Linkedlist 更适合删除和添加，查询、添加、删除的时间复杂度不同</p>\n</li>\n<li>\n<p>另外 ArrayList 和 LinkedList 都实现了 List 接口，但是 LinkedList 还额外实现了 Deque 接口，所以 LinkedList 还可以当做队列来使用</p>\n</li>\n</ol>\n<p><strong>Arraylist 底层是基于数组</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">ensureCapacityInternal</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Increments modCount!!</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    elementData<span class=\"token punctuation\">[</span>size<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 基于数组实现的</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>strings<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 该方法由于底层是数组定为索引为 3 特别快，但是由于集合要扩容，还有后面数据索引往后移动，所以 size 越大速度会变慢</span></pre></td></tr></table></figure><p><strong>LinkedList 底层是基于链表</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">linkLast</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">void</span> <span class=\"token function\">linkLast</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> l <span class=\"token operator\">=</span> last<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 链表实现的</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">final</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> newNode <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span> e<span class=\"token punctuation\">,</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        last <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>l <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            first <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            l<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> newNode<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        size<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        modCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>linkedList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 由于底层是链表所以不需要扩容，但是索引需要找到头节点遍历到索引为 3，需要遍历</span></pre></td></tr></table></figure><h2 id=\"copyonwritearraylist的底层原理是怎样的\"><a class=\"anchor\" href=\"#copyonwritearraylist的底层原理是怎样的\">#</a> CopyOnWriteArrayList 的底层原理是怎样的？</h2>\n<ol>\n<li>⾸先 CopyOnWriteArrayList 内部也是⽤过数组来实现的，在向 CopyOnWriteArrayList 添加元素<br />\n时，会复制⼀个新的数组，写操作在新数组上进⾏，读操作在原数组上进⾏</li>\n<li>并且，写操作会加锁，防⽌出现并发写⼊丢失数据的问题</li>\n<li>写操作结束之后会把原数组指向新数组</li>\n<li>CopyOnWriteArrayList 允许在写操作时来读取数据，⼤⼤提⾼了读的性能，因此适合读多写少的应<br />\n⽤场景，但是 CopyOnWriteArrayList 会⽐较占内存，同时可能读到的数据不是实时最新的数据，所<br />\n以不适合实时性要求很⾼的场景</li>\n</ol>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Testpublic</span> <span class=\"token keyword\">void</span> <span class=\"token function\">review6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>    <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">></span></span> array <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    array<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 多线程高并发的时候，假设 a 线程添加 1，b 线程添加 2，可能会出现 1 添加的呗 b 线程添加的 2 覆盖造成数据丢失    array.add (\"2\");    CopyOnWriteArrayList&lt;String> list = new CopyOnWriteArrayList&lt;>();    list.add (\"\");  // 写不会出现数据丢失，因为枷锁了线程写操作需要排队&#125;</span></pre></td></tr></table></figure><p><strong>源代码</strong></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>    <span class=\"token keyword\">final</span> <span class=\"token class-name\">ReentrantLock</span> lock <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 加锁保证高并发不会出现数据丢失问题    lock.lock ();    try &#123;        Object [] elements = getArray ();   // 获取原数组        int len = elements.length;          Object [] newElements = Arrays.copyOf (elements, len + 1);  // 创建新数组复制并 + 1        newElements [len] = e;   // 赋值        setArray (newElements);  // 重新赋值原数组变为新数组，并且还支持写操作的读，但是由于复制操作        // 读 读的是原数组如果没完成 setArray 方法会读到不是最新数据        return true;    &#125; finally &#123;        lock.unlock ();    &#125;&#125;</span></pre></td></tr></table></figure><h2 id=\"hashmap中put方法的过程\"><a class=\"anchor\" href=\"#hashmap中put方法的过程\">#</a> HashMap 中 put 方法的过程？</h2>\n<ul>\n<li>调用哈希函数获取 <code>Key</code>  对应的 <code>hash</code>  值，再计算其数组下标；</li>\n<li>如果没有出现哈希冲突，则直接放入数组；如果出现哈希冲突，则以链表的方式放在链表后面；</li>\n<li>如果链表长度超过阀值 ( <code>TREEIFYTHRESHOLD==8</code> ), 就把链表转成红黑树，链表长度低于 6, 就把红黑树转回链表；</li>\n<li>如果结点的 <code>key</code>  已经存在，则替换其 <code>value</code>  即可；</li>\n<li>如果集合中的键值对大于 12, 调用 <code>resize</code>  方法进行数组扩容。</li>\n</ul>\n<p><img data-src=\"../../assets/image-20210802222533959.png\" alt=\"image-20210802222533959\" /></p>\n<h2 id=\"说说你对红黑树的见解\"><a class=\"anchor\" href=\"#说说你对红黑树的见解\">#</a> 说说你对红黑树的见解？</h2>\n<ul>\n<li>1、每个节点非红即黑</li>\n<li>2、根节点总是黑色的</li>\n<li>3、如果节点是红色的，则它的子节点必须是黑色的 (反之不一定)</li>\n<li>4、每个叶子节点都是黑色的空节点 (NIL 节点)</li>\n<li>5、从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点 (即相同的黑色高度)</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NjEwNDYyL2FydGljbGUvZGV0YWlscy84MzI3NzUyNA==\">https://blog.csdn.net/qq_36610462/article/details/83277524</span></li>\n</ul>\n<h2 id=\"hashmaplinkedhashmaptreemap有什么区别\"><a class=\"anchor\" href=\"#hashmaplinkedhashmaptreemap有什么区别\">#</a> HashMap,LinkedHashMap,TreeMap 有什么区别？</h2>\n<ul>\n<li><code>HashMap</code>  参考其他问题；</li>\n<li><code>LinkedHashMap</code>  保存了记录的插入顺序，在用 <code>Iterator</code>  遍历时，先取到的记录肯定是先插入的；遍历比 <code>HashMap</code>  慢；</li>\n<li><code>TreeMap</code>  实现 <code>SortMap</code>  接口，能够把它保存的记录根据键排序 (默认按键值升序排序，也可以指定排序的比较器)</li>\n</ul>\n<h2 id=\"hashmap待续\"><a class=\"anchor\" href=\"#hashmap待续\">#</a> HashMap 待续...</h2>\n<h2 id=\"concurrenthashmap\"><a class=\"anchor\" href=\"#concurrenthashmap\">#</a> ConcurrentHashMap……</h2>\n<h2 id=\"threadlocal的底层原理\"><a class=\"anchor\" href=\"#threadlocal的底层原理\">#</a> ThreadLocal 的底层原理</h2>\n<ol>\n<li>ThreadLocal 是 Java 中所提供的线程本地存储机制，可以利⽤该机制将数据<strong>缓存在某个线程内部</strong>，<br />\n该线程可以在任意时刻、任意⽅法中获取缓存的数据</li>\n<li>ThreadLocal 底层是通过<strong> ThreadLocalMap 来实现的</strong>，每个 Thread 对象（注意不是 ThreadLocal 对<br />\n象）中都存在⼀个<strong> ThreadLocalMap</strong>，Map 的<strong> key</strong> 为<strong> ThreadLocal</strong> 对象，Map 的<strong> value</strong> 为需要缓存的<br />\n<strong>值</strong></li>\n<li>如果在线程池中使⽤ ThreadLocal 会造成内存泄漏，因为当 ThreadLocal 对象使⽤完之后，应该要<br />\n把设置的 key，value，也就是 Entry 对象进⾏回收，但线程池中的线程不会回收，⽽线程对象是通过<br />\n<strong>强引⽤</strong>指向 ThreadLocalMap，<strong>ThreadLocalMap</strong> 也是通过强引⽤指向 Entry 对象，<strong>线程不被回收</strong>，<br />\nEntry 对象也就不会被回收，从⽽出现<strong>内存泄漏</strong>，<strong>解决办法是</strong>，在使⽤了 ThreadLocal 对象之后，<strong>⼿</strong><br />\n<strong>动调⽤ ThreadLocal 的 remove ⽅法，⼿动清楚 Entry 对象</strong></li>\n<li>ThreadLocal 经典的应⽤场景就是连接管理（⼀个线程持有⼀个连接，该连接对象可以在不同的⽅<br />\n法之间进⾏传递，线程之间不共享同⼀个连接）</li>\n</ol>\n<h2 id=\"如何理解volatile关键字\"><a class=\"anchor\" href=\"#如何理解volatile关键字\">#</a> 如何理解 volatile 关键字</h2>\n<p>在并发领域中，存在三⼤特性：原⼦性、有序性、可⻅性。volatile 关键字⽤来修饰对象的属性，在并发 环境下可以保证这个属性的可⻅性，对于加了 volatile 关键字的属性，在对这个属性进⾏修改时，会直接 将 CPU ⾼级缓存中的数据写回到主内存，对这个变量的读取也会直接从主内存中读取，从⽽保证了可⻅ 性，底层是通过操作系统的内存屏障来实现的，由于使⽤了内存屏障，所以会禁⽌指令重排，所以同时 也就保证了有序性，在很多并发场景下，如果⽤好 volatile 关键字可以很好的提⾼执⾏效率。</p>\n<h2 id=\"reentrantlock中的公平锁和非公平锁的底层实现\"><a class=\"anchor\" href=\"#reentrantlock中的公平锁和非公平锁的底层实现\">#</a> ReentrantLock 中的公平锁和⾮公平锁的底层实现</h2>\n<p>⾸先不管是公平锁和⾮公平锁，它们的底层实现都会使⽤ AQS 来进⾏排队，它们的区别在于：线程在使 ⽤ lock () ⽅法加锁时，如果是公平锁，会先检查 AQS 队列中是否存在线程在排队，如果有线程在排队， 则当前线程也进⾏排队，如果是⾮公平锁，则不会去检查是否有线程在排队，⽽是直接竞争锁。</p>\n<p>不管是公平锁还是⾮公平锁，⼀旦没竞争到锁，都会进⾏排队，当锁释放时，都是唤醒排在最前⾯的线 程，所以⾮公平锁只是体现在了线程加锁阶段，⽽没有体现在线程被唤醒阶段。</p>\n<p>另外，ReentrantLock 是可重⼊锁，不管是公平锁还是⾮公平锁都是可重⼊的。</p>\n<h2 id=\"reentrantlock中trylock和lock方法的区别\"><a class=\"anchor\" href=\"#reentrantlock中trylock和lock方法的区别\">#</a> ReentrantLock 中 tryLock () 和 lock () ⽅法的区别</h2>\n<ol>\n<li>tryLock () 表示尝试加锁，可能加到，也可能加不到，该⽅法不会阻塞线程，如果加到锁则返回<br />\n true，没有加到则返回 false</li>\n<li>lock () 表示阻塞加锁，线程会阻塞直到加到锁，⽅法也没有返回值</li>\n</ol>\n<h2 id=\"countdownlatch和semaphore的区别和底层原理\"><a class=\"anchor\" href=\"#countdownlatch和semaphore的区别和底层原理\">#</a> CountDownLatch 和 Semaphore 的区别和底层原理</h2>\n<p>CountDownLatch 表示计数器，可以给 CountDownLatch 设置⼀个数字，⼀个线程调⽤<br />\n CountDownLatch 的 await () 将会阻塞，其他线程可以调⽤ CountDownLatch 的 countDown () ⽅法来对<br />\n CountDownLatch 中的数字减⼀，当数字被减成 0 后，所有 await 的线程都将被唤醒。<br />\n对应的底层原理就是，调⽤ await () ⽅法的线程会利⽤ AQS 排队，⼀旦数字被减为 0，则会将 AQS 中<br />\n排队的线程依次唤醒。</p>\n<p>Semaphore 表示信号量，可以设置许可的个数，表示同时允许最多多少个线程使⽤该信号量，通<br />\n过 acquire () 来获取许可，如果没有许可可⽤则线程阻塞，并通过 AQS 来排队，可以通过 release () ⽅法来释放许可，当某个线程释放了某个许可后，会从 AQS 中正在排队的第⼀个线程开始依次唤 醒，直到没有空闲许可。</p>\n<h2 id=\"sychronized的偏向锁-轻量级锁-重量级锁\"><a class=\"anchor\" href=\"#sychronized的偏向锁-轻量级锁-重量级锁\">#</a> Sychronized 的偏向锁、轻量级锁、重量级锁</h2>\n<ol>\n<li>** 偏向锁：** 在锁对象的对象头中记录⼀下当前获取到该锁的线程 ID，该线程下次如果⼜来获取该锁就<br />\n可以直接获取到了</li>\n<li>** 轻量级锁：** 由偏向锁升级⽽来，当⼀个线程获取到锁后，此时这把锁是偏向锁，此时如果有第⼆个<br />\n线程来竞争锁，偏向锁就会升级为轻量级锁，之所以叫轻量级锁，是为了和重量级锁区分开来，轻<br />\n量级锁底层是通过⾃旋来实现的，并不会阻塞线程</li>\n<li>如果⾃旋次数过多仍然没有获取到锁，则会升级为重量级锁，重量级锁会导致线程阻塞</li>\n<li>** ⾃旋锁：** ⾃旋锁就是线程在获取锁的过程中，不会去阻塞线程，也就⽆所谓唤醒线程，阻塞和唤醒<br />\n这两个步骤都是需要操作系统去进⾏的，⽐较消耗时间，⾃旋锁是线程通过 CAS 获取预期的⼀个标<br />\n记，如果没有获取到，则继续循环获取，如果获取到了则表示获取到了锁，这个过程线程⼀直在运<br />\n⾏中，相对⽽⾔没有使⽤太多的操作系统资源，⽐较轻量。</li>\n</ol>\n<h2 id=\"sychronized和reentrantlock的区别\"><a class=\"anchor\" href=\"#sychronized和reentrantlock的区别\">#</a> Sychronized 和 ReentrantLock 的区别</h2>\n<ol>\n<li>sychronized 是⼀个关键字，ReentrantLock 是⼀个类</li>\n<li>sychronized 会⾃动的加锁与释放锁，ReentrantLock 需要程序员⼿动加锁与释放锁</li>\n<li>sychronized 的底层是 JVM 层⾯的锁，ReentrantLock 是 API 层⾯的锁</li>\n<li>sychronized 是⾮公平锁，ReentrantLock 可以选择公平锁或⾮公平锁</li>\n<li>sychronized 锁的是对象，锁信息保存在对象头中，ReentrantLock 通过代码中 int 类型的 state 标识<br />\n来标识锁的状态</li>\n<li>sychronized 底层有⼀个锁升级的过程</li>\n</ol>\n<h2 id=\"线程池的底层工作原理\"><a class=\"anchor\" href=\"#线程池的底层工作原理\">#</a> 线程池的底层⼯作原理</h2>\n<p>线程池内部是通过队列 + 线程实现的，当我们利⽤线程池执⾏任务时：</p>\n<ol>\n<li>如果此时线程池中的线程数量⼩于 corePoolSize，即使线程池中的线程都处于空闲状态，也要创建<br />\n新的线程来处理被添加的任务。</li>\n<li>如果此时线程池中的线程数量等于 corePoolSize，但是缓冲队列 workQueue 未满，那么任务被放⼊<br />\n缓冲队列。</li>\n<li>如果此时线程池中的线程数量⼤于等于 corePoolSize，缓冲队列 workQueue 满，并且线程池中的数<br />\n量⼩于 maximumPoolSize，建新的线程来处理被添加的任务。</li>\n<li>如果此时线程池中的线程数量⼤于 corePoolSize，缓冲队列 workQueue 满，并且线程池中的数量等<br />\n于 maximumPoolSize，那么通过 handler 所指定的策略来处理此任务。</li>\n<li>当线程池中的线程数量⼤于 corePoolSize 时，如果某线程空闲时间超过 keepAliveTime，线程将被<br />\n终⽌。这样，线程池可以动态的调整池中的线程数</li>\n</ol>\n<h2 id=\"jvm中哪些是线程共享区\"><a class=\"anchor\" href=\"#jvm中哪些是线程共享区\">#</a> JVM 中哪些是线程共享区</h2>\n<p><img data-src=\"../../assets/image-20210804143116316.png\" alt=\"image-20210804143116316\" /></p>\n<h2 id=\"jvm中哪些可以作为gc-root\"><a class=\"anchor\" href=\"#jvm中哪些可以作为gc-root\">#</a> JVM 中哪些可以作为 gc root</h2>\n<p>什么是 gc root，JVM 在进⾏垃圾回收时，需要找到 “垃圾” 对象，也就是没有被引⽤的对象，但是直接 找 “垃圾” 对象是⽐较耗时的，所以反过来，先找 “⾮垃圾” 对象，也就是正常对象，那么就需要从某 些 “根” 开始去找，根据这些 “根” 的引⽤路径找到正常对象，⽽这些 “根” 有⼀个特征，就是它只会引⽤其 他对象，⽽不会被其他对象引⽤，例如：栈中的本地变量、⽅法区中的静态变量、本地⽅法栈中的变 量、正在运⾏的线程等可以作为 gc root。</p>\n<h2 id=\"说说类加载器双亲委派模型\"><a class=\"anchor\" href=\"#说说类加载器双亲委派模型\">#</a> 说说类加载器双亲委派模型</h2>\n<p>JVM 中存在三个默认的类加载器：</p>\n<ol>\n<li>BootstrapClassLoader</li>\n<li>ExtClassLoader</li>\n<li>AppClassLoader</li>\n</ol>\n<p>AppClassLoader 的⽗加载器是 ExtClassLoader，ExtClassLoader 的⽗加载器是<br />\n BootstrapClassLoader。</p>\n<p>JVM 在加载⼀个类时，会调⽤ AppClassLoader 的 loadClass ⽅法来加载这个类，不过在这个⽅法中，会先使⽤ ExtClassLoader 的 loadClass ⽅法来加载类，同样 ExtClassLoader 的 loadClass ⽅法中会先使⽤<br />\n BootstrapClassLoader 来加载类，如果 BootstrapClassLoader 加载到了就直接成功，如果 BootstrapClassLoader 没有加载到，那么 ExtClassLoader 就会⾃⼰尝试加载该类，如果没有加载到，<br />\n那么则会由 AppClassLoader 来加载这个类。</p>\n<p>所以，双亲委派指得是，JVM 在加载类时，会委派给 Ext 和 Bootstrap 进⾏加载，如果没加载到才由⾃⼰<br />\n进⾏加载。</p>\n<h2 id=\"tomcat中为什么要使用自定义类加载器\"><a class=\"anchor\" href=\"#tomcat中为什么要使用自定义类加载器\">#</a> Tomcat 中为什么要使⽤⾃定义类加载器</h2>\n<p>⼀个 Tomcat 中可以部署多个应⽤，⽽每个应⽤中都存在很多类，并且各个应⽤中的类是独⽴的，全类 名是可以相同的，⽐如⼀个订单系统中可能存在 com.zhouyu.User 类，⼀个库存系统中可能也存在 com.zhouyu.User 类，⼀个 Tomcat，不管内部部署了多少应⽤，Tomcat 启动之后就是⼀个 Java 进程， 也就是⼀个 JVM，所以如果 Tomcat 中只存在⼀个类加载器，⽐如默认的 AppClassLoader，那么就只能 加载⼀个 com.zhouyu.User 类，这是有问题的，⽽在 Tomcat 中，<strong>会为部署的每个应⽤都⽣成⼀个类加载 器实例</strong>，名字叫做<strong> WebAppClassLoader</strong>，这样<strong> Tomcat 中每个应⽤就可以使⽤⾃⼰的类加载器去加载⾃ ⼰的类</strong>，从⽽达到应⽤之间的类隔离，不出现冲突。另外 Tomcat 还利⽤⾃定义加载器实现了热加载功 能。</p>\n<h2 id=\"tomcat如何进行优化\"><a class=\"anchor\" href=\"#tomcat如何进行优化\">#</a> Tomcat 如何进⾏优化？</h2>\n<p>对于 Tomcat 调优，可以从两个⽅⾯来进⾏调整：<strong>内存和线程。</strong><br />\n⾸先启动 Tomcat，实际上就是启动了⼀个<strong> JVM</strong>，所以可以按<strong> JVM 调优</strong>的⽅式来进⾏调整，从⽽达到<br />\n Tomcat 优化的⽬的。<br />\n另外 Tomcat 中设计了⼀些<strong>缓存区</strong>，⽐如 appReadBufSize、bufferPoolSize 等缓存区来提⾼吞吐量。<br />\n还可以<strong>调整 Tomcat 的线程</strong>，⽐如调整<strong> minSpareThreads</strong> 参数来改变 Tomcat<strong> 空闲时</strong>的线程数，调整<br />\n<strong> maxThreads</strong> 参数来设置 Tomcat<strong> 处理连接的最⼤线程数。</strong><br />\n并且还可以调整 IO 模型，⽐如使⽤ NIO、APR 这种相⽐于 BIO 更加⾼效的 IO 模型。(默认 Tomcat7 使用的是 bio)</p>\n<h2 id=\"浏览器发出一个请求到收到响应经历了哪些步骤\"><a class=\"anchor\" href=\"#浏览器发出一个请求到收到响应经历了哪些步骤\">#</a> 浏览器发出⼀个请求到收到响应经历了哪些步骤？</h2>\n<ol>\n<li>浏览器解析⽤户输⼊的 URL，⽣成⼀个 HTTP 格式的请求</li>\n<li>先根据 URL 域名从本地 hosts ⽂件查找是否有映射 IP，如果没有就将域名发送给电脑所配置的 DNS 进<br />\n⾏域名解析，得到 IP 地址</li>\n<li>浏览器通过操作系统将请求通过四层⽹络协议发送出去</li>\n<li>途中可能会经过各种路由器、交换机，最终到达服务器</li>\n<li>服务器收到请求后，根据请求所指定的端⼝，将请求传递给绑定了该端⼝的应⽤程序，⽐如 8080 被<br />\n tomcat 占⽤了</li>\n<li>tomcat 接收到请求数据后，按照 http 协议的格式进⾏解析，解析得到所要访问的 servlet</li>\n<li>然后 servlet 来处理这个请求，如果是 SpringMVC 中的 DispatcherServlet，那么则会找到对应的<br />\n Controller 中的⽅法，并执⾏该⽅法得到结果</li>\n<li>Tomcat 得到响应结果后封装成 HTTP 响应的格式，并再次通过⽹络发送给浏览器所在的服务器</li>\n<li>浏览器所在的服务器拿到结果后再传递给浏览器，浏览器则负责解析并渲染</li>\n</ol>\n<h2 id=\"跨域请求是什么有什么问题怎么解决\"><a class=\"anchor\" href=\"#跨域请求是什么有什么问题怎么解决\">#</a> 跨域请求是什么？有什么问题？怎么解决？</h2>\n<p>跨域是指浏览器在发起⽹络请求时，会检查该请求所对应的协议、域名、端⼝和当前⽹⻚是否⼀致，如<br />\n果不⼀致则浏览器会进⾏限制，⽐如在 www.baidu.com 的某个⽹⻚中，如果使⽤ ajax 去访问<br />\n www.jd.com 是不⾏的，但是如果是 img、iframe、script 等标签的 src 属性去访问则是可以的，之所以浏<br />\n览器要做这层限制，是为了⽤户信息安全。但是如果开发者想要绕过这层限制也是可以的：</p>\n<ol>\n<li>response 添加 header，⽐如 resp.setHeader (&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;); 表示可以访问<br />\n所有⽹站，不受是否同源的限制</li>\n<li>jsonp 的⽅式，该技术底层就是基于 script 标签来实现的，因为 script 标签是可以跨域的</li>\n<li>后台⾃⼰控制，先访问同域名下的接⼝，然后在接⼝中再去使⽤ HTTPClient 等⼯具去调⽤⽬标接⼝</li>\n<li>⽹关，和第三种⽅式类似，都是交给后台服务来进⾏跨域访问</li>\n</ol>\n<h2 id=\"spring中的bean创建的生命周期有哪些步骤\"><a class=\"anchor\" href=\"#spring中的bean创建的生命周期有哪些步骤\">#</a> Spring 中的 Bean 创建的⽣命周期有哪些步骤</h2>\n<p>Spring 中⼀个 Bean 的创建⼤概分为以下⼏个步骤：</p>\n<ol>\n<li>推断构造⽅法</li>\n<li>实例化</li>\n<li>填充属性，也就是依赖注⼊</li>\n<li>处理 Aware 回调</li>\n<li>初始化前，处理 @PostConstruct 注解</li>\n<li>初始化，处理 InitializingBean 接⼝</li>\n<li>初始化后，进⾏ AOP</li>\n</ol>\n<p><img data-src=\"../../assets/image-20210804154634179.png\" alt=\"image-20210804154634179\" /></p>\n<h2 id=\"spring中bean是线程安全的吗\"><a class=\"anchor\" href=\"#spring中bean是线程安全的吗\">#</a> Spring 中 Bean 是线程安全的吗</h2>\n<p>Spring 本身并没有针对 Bean 做线程安全的处理，所以：</p>\n<ol>\n<li>如果 Bean 是⽆状态的，那么 Bean 则是线程安全的</li>\n<li>如果 Bean 是有状态的，那么 Bean 则不是线程安全的<br />\n另外，Bean 是不是线程安全，跟 Bean 的作⽤域没有关系，Bean 的作⽤域只是表示 Bean 的⽣命周期范<br />\n围，对于任何⽣命周期的 Bean 都是⼀个对象，这个对象是不是线程安全的，还是得看这个 Bean 对象本<br />\n身。</li>\n</ol>\n<h2 id=\"applicationcontext和beanfactory有什么区别\"><a class=\"anchor\" href=\"#applicationcontext和beanfactory有什么区别\">#</a> ApplicationContext 和 BeanFactory 有什么区别</h2>\n<p>BeanFactory 是 Spring 中⾮常核⼼的组件，表示 Bean ⼯⼚，可以⽣成 Bean，维护 Bean，⽽ ApplicationContext 继承了 BeanFactory，所以 ApplicationContext 拥有 BeanFactory 所有的特点，也 是⼀个 Bean ⼯⼚，但是 ApplicationContext 除开继承了 BeanFactory 之外，还继承了诸如 EnvironmentCapable、MessageSource、ApplicationEventPublisher 等接⼝，从⽽ ApplicationContext 还有获取系统环境变量、国际化、事件发布等功能，这是 BeanFactory 所不具备的</p>\n<h2 id=\"spring中的事务是如何实现的\"><a class=\"anchor\" href=\"#spring中的事务是如何实现的\">#</a> Spring 中的事务是如何实现的</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>timeout <span class=\"token operator\">=</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//a 事务  b 会随 a 的超时时间不会用自己的子事务无效  （同一个 service 调用 bc 方法其实还是共用一个事务）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// （同一个 service 调用 bc 方法其实还是共用一个事务）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">OrderServiceImpl</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">OrderServiceImpl</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">AopContext</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentProxy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    o<span class=\"token punctuation\">.</span><span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//a 事务</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    o<span class=\"token punctuation\">.</span><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 新事务  （不随 a 回滚）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span>REQUIRED<span class=\"token punctuation\">,</span>timeout <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 需要一个事务：如果前面有了就公用一个事务</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">b</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token annotation punctuation\">@Transactional</span><span class=\"token punctuation\">(</span>propagation <span class=\"token operator\">=</span> <span class=\"token class-name\">Propagation</span><span class=\"token punctuation\">.</span>REQUIRES_NEW<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 需要一个新的事务，自己用一个事务</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol>\n<li>Spring 事务底层是基于数据库事务和 AOP 机制的</li>\n<li>⾸先对于使⽤了 @Transactional 注解的 Bean，Spring 会创建⼀个代理对象作为 Bean</li>\n<li>当调⽤代理对象的⽅法时，会先判断该⽅法上是否加了 @Transactional 注解</li>\n<li>如果加了，那么则利⽤事务管理器创建⼀个数据库连接</li>\n<li>并且修改数据库连接的 autocommit 属性为 false，禁⽌此连接的⾃动提交，这是实现 Spring 事务⾮<br />\n常重要的⼀步</li>\n</ol>\n<h2 id=\"spring中什么时候transactional会失效\"><a class=\"anchor\" href=\"#spring中什么时候transactional会失效\">#</a> Spring 中什么时候 @Transactional 会失效</h2>\n<p>因为 Spring 事务是基于代理来实现的，所以某个加了 @Transactional 的⽅法<strong>只有是被代理对象调⽤时</strong>， 那么这个<strong>注解才会⽣效</strong>，所以如果是被代理对象来调⽤这个⽅法，那么 @Transactional 是不会失效的。</p>\n<p>（比如自己 new 一个不用依赖注入就不会生效）</p>\n<p>同时如果某个⽅法是<strong> private</strong> 的，那么 @Transactional 也会失效，<strong>因为底层 cglib 是基于⽗⼦类来实现 的，⼦类是不能重载⽗类的 private ⽅法的</strong>，所以⽆法很好的利⽤代理，也会<strong>导致 @Transactianal 失效</strong></p>\n<h2 id=\"spring容器启动流程是怎样的\"><a class=\"anchor\" href=\"#spring容器启动流程是怎样的\">#</a> Spring 容器启动流程是怎样的</h2>\n<ol>\n<li>在创建 Spring 容器，也就是启动 Spring 时：</li>\n<li>⾸先会进⾏扫描，扫描得到所有的 BeanDefinition 对象，并存在⼀个 Map 中</li>\n<li>然后筛选出⾮懒加载的单例 BeanDefinition 进⾏创建 Bean，对于多例 Bean 不需要在启动过程中去<br />\n进⾏创建，对于多例 Bean 会在每次获取 Bean 时利⽤ BeanDefinition 去创建</li>\n<li>利⽤ BeanDefinition 创建 Bean 就是 Bean 的创建⽣命周期，这期间包括了合并 BeanDefinitio<br />\n 构造⽅法、实例化、属性填充、初始化前、初始化、初始化后等步骤，其中 AOP 就是发⽣在初始化<br />\n后这⼀步骤中</li>\n<li>单例 Bean 创建完了之后，Spring 会发布⼀个容器启动事件</li>\n<li>Spring 启动结束</li>\n<li>在源码中会更复杂，⽐如源码中会提供⼀些模板⽅法，让⼦类来实现，⽐如源码中还涉及到⼀些<br />\n BeanFactoryPostProcessor 和 BeanPostProcessor 的注册，Spring 的扫描就是通过<br />\n BenaFactoryPostProcessor 来实现的，依赖注⼊就是通过 BeanPostProcessor 来实现的</li>\n<li>在 Spring 启动过程中还会去处理 @Import 等注解</li>\n</ol>\n<h2 id=\"spring用到了哪些设计模式\"><a class=\"anchor\" href=\"#spring用到了哪些设计模式\">#</a> Spring ⽤到了哪些设计模式</h2>\n<p><img data-src=\"../../assets/image-20210804161449340.png\" alt=\"image-20210804161449340\" /></p>\n<h2 id=\"springmvc的底层工作流程\"><a class=\"anchor\" href=\"#springmvc的底层工作流程\">#</a> SpringMVC 的底层⼯作流程</h2>\n<ol>\n<li>⽤户发送请求⾄前端控制器 DispatcherServlet。</li>\n<li>DispatcherServlet 收到请求调⽤ HandlerMapping 处理器映射器。</li>\n<li>处理器映射器找到具体的处理器 (可以根据 xml 配置、注解进⾏查找)，⽣成处理器及处理器拦截器<br />\n (如果有则⽣成) ⼀并返回给 DispatcherServlet。</li>\n<li>DispatcherServlet 调⽤ HandlerAdapter 处理器适配器。</li>\n<li>HandlerAdapter 经过适配调⽤具体的处理器 (Controller，也叫后端控制器)</li>\n<li>Controller 执⾏完成返回 ModelAndView。</li>\n<li>HandlerAdapter 将 controller 执⾏结果 ModelAndView 返回给 DispatcherServle</li>\n<li>DispatcherServlet 将 ModelAndView 传给 ViewReslover 视图解析器。</li>\n<li>ViewReslover 解析后返回具体 View。</li>\n<li>DispatcherServlet 根据 View 进⾏渲染视图（即将模型数据填充⾄视图中）。</li>\n</ol>\n<h2 id=\"spring-refresh\"><a class=\"anchor\" href=\"#spring-refresh\">#</a> Spring refresh</h2>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">refresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">BeansException</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IllegalStateException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">synchronized</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>startupShutdownMonitor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 准备，记录容器的启动时间 startupDate, 标记容器为激活，初始化上下文环境如文件路径信息，验证必填属性是否填写 </span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">prepareRefresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 这步比较重要 (解析)，告诉子类去刷新 bean 工厂，这步完成后配置文件就解析成一个个 bean 定义，注册到 BeanFactory（但是未被初始化，仅将信息写到了 beanDefination 的 map 中）</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token class-name\">ConfigurableListableBeanFactory</span> beanFactory <span class=\"token operator\">=</span> <span class=\"token function\">obtainFreshBeanFactory</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 设置 beanFactory 类加载器，添加多个 beanPostProcesser</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">prepareBeanFactory</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token comment\">// 允许子类上下文中对 beanFactory 做后期处理</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token function\">postProcessBeanFactory</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre> </pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token comment\">// 调用 BeanFactoryPostProcessor 各个实现类的方法</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token function\">invokeBeanFactoryPostProcessors</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre> </pre></td></tr><tr><td data-num=\"24\"></td><td><pre> </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        <span class=\"token comment\">// 注册 BeanPostProcessor 的实现类，注意看和 BeanFactoryPostProcessor 的区别</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>         <span class=\"token comment\">// 此接口两个方法: postProcessBeforeInitialization 和 postProcessAfterInitialization</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>         <span class=\"token comment\">// 两个方法分别在 Bean 初始化之前和初始化之后得到执行。注意，到这里 Bean 还没初始化</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token function\">registerBeanPostProcessors</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre> </pre></td></tr><tr><td data-num=\"30\"></td><td><pre> </pre></td></tr><tr><td data-num=\"31\"></td><td><pre>        <span class=\"token comment\">// 初始化 ApplicationContext 的 MessageSource</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token function\">initMessageSource</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre> </pre></td></tr><tr><td data-num=\"34\"></td><td><pre> </pre></td></tr><tr><td data-num=\"35\"></td><td><pre>        <span class=\"token comment\">// 初始化 ApplicationContext 事件广播器</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token function\">initApplicationEventMulticaster</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre> </pre></td></tr><tr><td data-num=\"38\"></td><td><pre> </pre></td></tr><tr><td data-num=\"39\"></td><td><pre>        <span class=\"token comment\">// 初始化子类特殊 bean（钩子方法）</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>        <span class=\"token function\">onRefresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre> </pre></td></tr><tr><td data-num=\"42\"></td><td><pre> </pre></td></tr><tr><td data-num=\"43\"></td><td><pre>        <span class=\"token comment\">// 注册事件监听器</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token function\">registerListeners</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre> </pre></td></tr><tr><td data-num=\"46\"></td><td><pre> </pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token comment\">// 初始化所有 singleton bean  重点！！重点！！</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>        <span class=\"token function\">finishBeanFactoryInitialization</span><span class=\"token punctuation\">(</span>beanFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre> </pre></td></tr><tr><td data-num=\"50\"></td><td><pre> </pre></td></tr><tr><td data-num=\"51\"></td><td><pre>        <span class=\"token comment\">// 广播事件，ApplicationContext 初始化完成</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>        <span class=\"token function\">finishRefresh</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">BeansException</span> ex<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>1、prepareRefresh();<br />\n 容器刷新前的准备，设置上下文状态，获取属性，验证必要的属性等</p>\n<p>2、ConfigurableListableBeanFactory beanFactory = obtainFreshBeanFactory();<br />\n 获取新的 beanFactory，销毁原有 beanFactory、为每个 bean 生成 BeanDefinition 等</p>\n<p>3、prepareBeanFactory(beanFactory);<br />\n 配置标准的 beanFactory，设置 ClassLoader，设置 SpEL 表达式解析器等</p>\n<p>4、postProcessBeanFactory(beanFactory);<br />\n 模板方法，允许在子类中对 beanFactory 进行后置处理。</p>\n<p>5、invokeBeanFactoryPostProcessors(beanFactory);<br />\n 实例化并调用所有注册的 beanFactory 后置处理器（实现接口 BeanFactoryPostProcessor 的 bean，在 beanFactory 标准初始化之后执行）。<br />\n例如:<br />\nPropertyPlaceholderConfigurer (处理占位符)</p>\n<p>6、registerBeanPostProcessors(beanFactory);<br />\n 实例化和注册 beanFactory 中扩展了 BeanPostProcessor 的 bean。<br />\n例如：<br />\nAutowiredAnnotationBeanPostProcessor (处理被 @Autowired 注解修饰的 bean 并注入)<br />\n RequiredAnnotationBeanPostProcessor (处理被 @Required 注解修饰的方法)<br />\n CommonAnnotationBeanPostProcessor (处理 @PreDestroy、@PostConstruct、@Resource 等多个注解的作用) 等。</p>\n<p>7、initMessageSource();<br />\n 初始化国际化工具类 MessageSource</p>\n<p>8、initApplicationEventMulticaster();<br />\n 初始化时间广播器</p>\n<p>9、onRefresh();<br />\n 模板方法，在容器刷新的时候可以自定义逻辑，不同的 Spring 容器做不同的事情。</p>\n<p>10、registerListeners();<br />\n 注册监听器，广播 early application events</p>\n<p>11、finishBeanFactoryInitialization(beanFactory);<br />\n 实例化所有剩余的（非懒加载）单例<br />\n比如 invokeBeanFactoryPostProcessors 方法中根据各种注解解析出来的类，在这个时候都会被初始化。<br />\n实例化的过程各种 BeanPostProcessor 开始起作用。</p>\n<p>12、finishRefresh();<br />\nrefresh 做完之后需要做的其他事情。<br />\n清除上下文资源缓存（如扫描中的 ASM 元数据）<br />\n初始化上下文的生命周期处理器，并刷新（找出 Spring 容器中实现了 Lifecycle 接口的 bean 并执行 start () 方法）。<br />\n发布 ContextRefreshedEvent 事件告知对应的 ApplicationListener 进行响应的操作</p>\n<h2 id=\"springboot中常用注解及其底层实现\"><a class=\"anchor\" href=\"#springboot中常用注解及其底层实现\">#</a> SpringBoot 中常⽤注解及其底层实现</h2>\n<ol>\n<li>@SpringBootApplication 注解：这个注解标识了⼀个 SpringBoot ⼯程，它实际上是另外三个注解<br />\n的组合，这三个注解是：<br />\na. @SpringBootConfiguration：这个注解实际就是⼀个 @Configuration，表示启动类也是⼀个<br />\n配置类<br />\n b. @EnableAutoConfiguration：向 Spring 容器中导⼊了⼀个 Selector，⽤来加载 ClassPath 下<br />\n SpringFactories 中所定义的⾃动配置类，将这些⾃动加载为配置 Bean<br />\nc. @ComponentScan：标识扫描路径，因为默认是没有配置实际扫描路径，所以 SpringBoot 扫<br />\n描的路径是启动类所在的当前⽬录</li>\n<li>@Bean 注解：⽤来定义 Bean，类似于 XML 中的 &lt;bean&gt; 标签，Spring 在启动时，会对加了 @Bean 注<br />\n解的⽅法进⾏解析，将⽅法的名字做为 beanName，并通过执⾏⽅法得到 bean 对象</li>\n<li>@Controller、@Service、@ResponseBody、@Autowired 都可以说</li>\n</ol>\n<h2 id=\"springboot是如何启动tomcat的\"><a class=\"anchor\" href=\"#springboot是如何启动tomcat的\">#</a> SpringBoot 是如何启动 Tomcat 的</h2>\n<ol>\n<li>⾸先，SpringBoot 在启动时会先创建⼀个 Spring 容器</li>\n<li>在创建 Spring 容器过程中，会利⽤ @ConditionalOnClass 技术来判断当前 classpath 中是否存在<br />\n Tomcat 依赖，如果存在则会⽣成⼀个启动 Tomcat 的 Bean</li>\n<li>Spring 容器创建完之后，就会获取启动 Tomcat 的 Bean，并创建 Tomcat 对象，并绑定端⼝等，然后<br />\n启动 Tomcat</li>\n</ol>\n<h2 id=\"mybatis存在哪些优点和缺点\"><a class=\"anchor\" href=\"#mybatis存在哪些优点和缺点\">#</a> Mybatis 存在哪些优点和缺点</h2>\n<p>优点：</p>\n<ol>\n<li>基于 SQL 语句编程，相当灵活，不会对应⽤程序或者数据库的现有设计造成任何影响，SQL 单独<br />\n写，解除 sql 与程序代码的耦合，便于统⼀管理。</li>\n<li>与 JDBC 相⽐，减少了 50% 以上的代码量，消除了 JDBC ⼤量冗余的代码，不需要⼿动开关连<br />\n接；</li>\n<li>很好的与各种数据库兼容（ 因为 MyBatis 使⽤ JDBC 来连接数据库，所以只要 JDBC ⽀持的数据<br />\n库 MyBatis 都⽀持）。</li>\n<li>能够与 Spring 很好的集成；</li>\n<li>提供映射标签， ⽀持对象与数据库的 ORM 字段关系映射； 提供对象关系映射标签， ⽀持对象关<br />\n系组件维护。</li>\n</ol>\n<h2 id=\"mybatis中和的区别是什么\"><a class=\"anchor\" href=\"#mybatis中和的区别是什么\">#</a> Mybatis 中 #{} 和 ${} 的区别是什么？</h2>\n<ol>\n<li>#{} 是预编译处理、是占位符， ${} 是字符串替换、是拼接符</li>\n<li>Mybatis 在处理 #{} 时，会将 sql 中的 #{} 替换为？号，调⽤ PreparedStatement 来赋值</li>\n<li>Mybatis 在处理<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mrow></mrow><mtext>时，就是把</mtext></mrow><annotation encoding=\"application/x-tex\">{}时， 就是把</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\"></span><span class=\"mord cjk_fallback\">时</span><span class=\"mord cjk_fallback\">，</span><span class=\"mord cjk_fallback\">就</span><span class=\"mord cjk_fallback\">是</span><span class=\"mord cjk_fallback\">把</span></span></span></span> {} 替换成变量的值，调⽤ Statement 来赋值</li>\n<li>使⽤ #{} 可以有效的防⽌ SQL 注⼊，提⾼系统安全性</li>\n</ol>\n<p><img data-src=\"../../assets/image-20210804165002553.png\" alt=\"image-20210804165002553\" /></p>\n<h2 id=\"什么是cap理论\"><a class=\"anchor\" href=\"#什么是cap理论\">#</a> 什么是 CAP 理论</h2>\n<p>CAP 理论是分布式领域中⾮常重要的⼀个指导理论，C（Consistency）表示强⼀致性， A（Availability）表示可⽤性，P（Partition Tolerance）表示分区容错性，CAP 理论指出在⽬前的硬件 条件下，⼀个分布式系统是必须要保证分区容错性的，⽽在这个前提下，分布式系统要么保证 CP，要么 保证 AP，⽆法同时保证 CAP。</p>\n<p>分区容错性表示，⼀个系统虽然是分布式的，但是对外看上去应该是⼀个整体，不能由于分布式系统内 部的某个结点挂点，或⽹络出现了故障，⽽导致系统对外出现异常。所以，对于分布式系统⽽⾔是⼀定 要保证分区容错性的。</p>\n<p>强⼀致性表示，⼀个分布式系统中各个结点之间能及时的同步数据，在数据同步过程中，是不能对外提 供服务的，不然就会造成数据不⼀致，所以强⼀致性和可⽤性是不能同时满⾜的。</p>\n<p>可⽤性表示，⼀个分布式系统对外要保证可⽤。</p>\n<h2 id=\"什么是base理论\"><a class=\"anchor\" href=\"#什么是base理论\">#</a> 什么是 BASE 理论</h2>\n<p>由于不能同时满⾜ CAP，所以出现了 BASE 理论：</p>\n<ol>\n<li>BA：Basically Available，表示基本可⽤，表示可以允许⼀定程度的不可⽤，⽐如由于系统故障，<br />\n请求时间变⻓，或者由于系统故障导致部分⾮核⼼功能不可⽤，都是允许的</li>\n<li>S：Soft state：表示分布式系统可以处于⼀种中间状态，⽐如数据正在同步</li>\n<li>E：Eventually consistent，表示最终⼀致性，不要求分布式系统数据实时达到⼀致，允许在经过⼀<br />\n段时间后再达到⼀致，在达到⼀致过程中，系统也是可⽤的</li>\n</ol>\n<h2 id=\"什么是rpc\"><a class=\"anchor\" href=\"#什么是rpc\">#</a> 什么是 RPC</h2>\n<p>RPC，表示远程过程调⽤，对于 Java 这种⾯试对象语⾔，也可以理解为<strong>远程⽅法调⽤</strong>，RPC 调⽤和 HTTP 调⽤是有区别的，RPC 表示的是⼀种调⽤远程⽅法的⽅式，可以使⽤ HTTP 协议、或直接基于 TCP 协议来实现 RPC，在 Java 中，我们可以通过直接使⽤某个服务接⼝的代理对象来执⾏⽅法，⽽底层则通 过构造 HTTP 请求来调⽤远端的⽅法，所以，有⼀种说法是 RPC 协议是 HTTP 协议之上的⼀种协议，也是 可以理解的。</p>\n<h2 id=\"分布式id是什么有哪些解决方案\"><a class=\"anchor\" href=\"#分布式id是什么有哪些解决方案\">#</a> 分布式 ID 是什么？有哪些解决⽅案？</h2>\n<p>在开发中，我们通常会需要⼀个唯⼀ ID 来标识数据，如果是单体架构，我们可以通过数据库的主键，或<br />\n直接在内存中维护⼀个⾃增数字来作为 ID 都是可以的，但对于⼀个分布式系统，就会有可能会出现 ID 冲<br />\n什么是 CAP 理论<br />\n什么是 BASE 理论<br />\n什么是 RPC<br />\n 分布式 ID 是什么？有哪些解决⽅案？<br />\n22<br />\n 突，此时有以下解决⽅案：</p>\n<ol>\n<li>uuid，这种⽅案复杂度最低，但是会影响存储空间和性能</li>\n<li>利⽤单机数据库的⾃增主键，作为分布式 ID 的⽣成器，复杂度适中，ID ⻓度较之 uuid 更短，但是受<br />\n到单机数据库性能的限制，并发量⼤的时候，此⽅案也不是最优⽅案</li>\n<li>利⽤ redis、zookeeper 的特性来⽣成 id，⽐如 redis 的⾃增命令、zookeeper 的顺序节点，这种⽅案<br />\n和单机数据库 (mysql) 相⽐，性能有所提⾼，可以适当选⽤</li>\n<li>雪花算法，⼀切问题如果能直接⽤算法解决，那就是最合适的，利⽤雪花算法也可以⽣成分布式<br />\n ID，底层原理就是通过某台机器在某⼀毫秒内对某⼀个数字⾃增，这种⽅案也能保证分布式架构中<br />\n的系统 id 唯⼀，但是只能保证趋势递增。业界存在 tinyid、leaf 等开源中间件实现了雪花算法。</li>\n</ol>\n<h2 id=\"分布式锁的使用场景是什么有哪些实现方案\"><a class=\"anchor\" href=\"#分布式锁的使用场景是什么有哪些实现方案\">#</a> 分布式锁的使⽤场景是什么？有哪些实现⽅案？</h2>\n<p>在单体架构中，多个线程都是属于同⼀个进程的，所以在线程并发执⾏时，遇到资源竞争时，可以利⽤<br />\n ReentrantLock、synchronized 等技术来作为锁，来控制共享资源的使⽤。</p>\n<p>⽽在分布式架构中，多个线程是可能处于不同进程中的，⽽这些线程并发执⾏遇到资源竞争时，利⽤<br />\n ReentrantLock、synchronized 等技术是没办法来控制多个进程中的线程的，所以需要分布式锁，意思<br />\n就是，需要⼀个分布式锁⽣成器，分布式系统中的应⽤程序都可以来使⽤这个⽣成器所提供的锁，从⽽<br />\n达到多个进程中的线程使⽤同⼀把锁。</p>\n<p>⽬前主流的分布式锁的实现⽅案有两种：</p>\n<ol>\n<li>zookeeper：利⽤的是 zookeeper 的临时节点、顺序节点、watch 机制来实现的，zookeeper 分布式<br />\n锁的特点是⾼⼀致性，因为 zookeeper 保证的是 CP，所以由它实现的分布式锁更可靠，不会出现混<br />\n乱</li>\n<li>redis：利⽤ redis 的 setnx、lua 脚本、消费订阅等机制来实现的，redis 分布式锁的特点是⾼可⽤，<br />\n因为 redis 保证的是 AP，所以由它实现的分布式锁可能不可靠，不稳定（⼀旦 redis 中的数据出现了<br />\n不⼀致），可能会出现多个客户端同时加到锁的情况</li>\n</ol>\n<h2 id=\"spring-cloud有哪些常用组件作用是什么\"><a class=\"anchor\" href=\"#spring-cloud有哪些常用组件作用是什么\">#</a> Spring Cloud 有哪些常⽤组件，作⽤是什么？</h2>\n<ol>\n<li>Eureka：注册中⼼</li>\n<li>Nacos：注册中⼼、配置中⼼</li>\n<li>Consul：注册中⼼、配置中⼼</li>\n<li>Spring Cloud Config：配置中⼼</li>\n<li>Feign/OpenFeign：RPC 调⽤</li>\n<li>Kong：服务⽹关</li>\n<li>Zuul：服务⽹关</li>\n<li>Spring Cloud Gateway：服务⽹关</li>\n<li>Ribbon：负载均衡</li>\n<li>Spring CLoud Sleuth：链路追踪</li>\n<li>Zipkin：链路追踪</li>\n<li>Seata：分布式事务</li>\n<li>Dubbo：RPC 调⽤</li>\n<li>Sentinel：服务熔断</li>\n<li>Hystrix：服务熔断</li>\n</ol>\n<h2 id=\"什么是服务雪崩什么是服务限流\"><a class=\"anchor\" href=\"#什么是服务雪崩什么是服务限流\">#</a> 什么是服务雪崩？什么是服务限流？</h2>\n<ol>\n<li>当服务 A 调⽤服务 B，服务 B 调⽤ C，此时⼤量请求突然请求服务 A，假如服务 A 本身能抗住这些请<br />\n求，但是如果服务 C 抗不住，导致服务 C 请求堆积，从⽽服务 B 请求堆积，从⽽服务 A 不可⽤，这就<br />\n是服务雪崩，解决⽅式就是服务降级和服务熔断。</li>\n<li>服务限流是指在⾼并发请求下，为了保护系统，可以对访问服务的请求进⾏数量上的限制，从⽽防<br />\n⽌系统不被⼤量请求压垮，在秒杀中，限流是⾮常重要的。</li>\n</ol>\n<h2 id=\"什么是服务熔断什么是服务降级区别是什么\"><a class=\"anchor\" href=\"#什么是服务熔断什么是服务降级区别是什么\">#</a> 什么是服务熔断？什么是服务降级？区别是什么？</h2>\n<ol>\n<li>服务熔断是指，当服务 A 调⽤的某个服务 B 不可⽤时，上游服务 A 为了保证⾃⼰不受影响，从⽽不再<br />\n调⽤服务 B，直接返回⼀个结果，减轻服务 A 和服务 B 的压⼒，直到服务 B 恢复。</li>\n<li>服务降级是指，当发现系统压⼒过载时，可以通过关闭某个服务，或限流某个服务来减轻系统压<br />\n⼒，这就是服务降级。</li>\n</ol>\n<pre><code>相同点：\n1. 都是为了防⽌系统崩溃\n2. 都让⽤户体验到某些功能暂时不可⽤\n不同点：熔断是下游服务故障触发的，降级是为了降低系统负载\n</code></pre>\n<h2 id=\"bio-nio-aio分别是什么\"><a class=\"anchor\" href=\"#bio-nio-aio分别是什么\">#</a> BIO、NIO、AIO 分别是什么</h2>\n<ol>\n<li>BIO：同步阻塞 IO，使⽤ BIO 读取数据时，线程会阻塞住，并且需要线程主动去查询是否有数据可<br />\n读，并且需要处理完⼀个 Socket 之后才能处理下⼀个 Socket</li>\n<li>NIO：同步⾮阻塞 IO，使⽤ NIO 读取数据时，线程不会阻塞，但需要线程主动的去查询是否有 IO 事件</li>\n<li>AIO：也叫做 NIO 2.0，异步⾮阻塞 IO，使⽤ AIO 读取数据时，线程不会阻塞，并且当有数据可读时<br />\n会通知给线程，不需要线程主动去查询</li>\n</ol>\n<h2 id=\"零拷是什么\"><a class=\"anchor\" href=\"#零拷是什么\">#</a> 零拷⻉是什么</h2>\n<p>零拷⻉指的是，应⽤程序在需要把内核中的⼀块区域数据转移到另外⼀块内核区域去时，不需要经过先 复制到⽤户空间，再转移到⽬标内核区域去了，⽽直接实现转移。</p>\n<p><img data-src=\"../../assets/image-20210804210529492.png\" alt=\"image-20210804210529492\" /></p>\n<h3 id=\"netty是什么和tomcat有什么区别特点是什么\"><a class=\"anchor\" href=\"#netty是什么和tomcat有什么区别特点是什么\">#</a> Netty 是什么？和 Tomcat 有什么区别？特点是什么？</h3>\n<p>Netty 是⼀个基于 NIO 的异步⽹络通信框架，性能⾼，封装了原⽣ NIO 编码的复杂度，开发者可以直接使<br />\n⽤ Netty 来开发⾼效率的各种⽹络服务器，并且编码简单。<br />\nTomcat 是⼀个 Web 服务器，是⼀个 Servlet 容器，基本上 Tomcat 内部只会运⾏ Servlet 程序，并处理<br />\n HTTP 请求，⽽ Netty 封装的是底层 IO 模型，关注的是⽹络数据的传输，⽽不关⼼具体的协议，可定制性<br />\n更⾼。</p>\n<p>Netty 的特点：</p>\n<ol>\n<li>异步、NIO 的⽹络通信框架</li>\n<li>⾼性能</li>\n<li>⾼扩展，⾼定制性</li>\n<li>易⽤性</li>\n</ol>\n<h2 id=\"netty的高性能体现在哪些方面\"><a class=\"anchor\" href=\"#netty的高性能体现在哪些方面\">#</a> Netty 的⾼性能体现在哪些⽅⾯</h2>\n<ol>\n<li>NIO 模型，⽤最少的资源做更多的事情。</li>\n<li>内存零拷⻉，尽量减少不必要的内存拷⻉，实现了更⾼效率的传输。</li>\n<li>内存池设计，申请的内存可以重⽤，主要指直接内存。内部实现是⽤⼀颗⼆叉查找树管理内存分配<br />\n情况。</li>\n<li>串⾏化处理读写 ：避免使⽤锁带来的性能开销。即消息的处理尽可能再同⼀个线程内完成，期间不<br />\n进⾏线程切换，这样就避免了多线程竞争和同步锁。表⾯上看，串⾏化设计似乎 CPU 利⽤率不⾼，<br />\n并发程度不够。但是，通过调整 NIO 线程池的线程参数，可以同时启动多个串⾏化的线程并⾏运<br />\n⾏，这种局部⽆锁化的串⾏线程设计相⽐⼀个队⾥ - 多个⼯作线程模型性能更优。</li>\n<li>⾼性能序列化协议 ：⽀持 protobuf 等⾼性能序列化协议。</li>\n<li>⾼效并发编程的体现 ：volatile 的⼤量、正确使⽤；CAS 和原⼦类的⼴泛使⽤；线程安全容器的使⽤；通过读写锁提升并发性能。</li>\n</ol>\n<h2 id=\"redis有哪些数据结构分别有哪些典型的应用场景\"><a class=\"anchor\" href=\"#redis有哪些数据结构分别有哪些典型的应用场景\">#</a> Redis 有哪些数据结构？分别有哪些典型的应⽤场景？</h2>\n<p>Redis 的数据结构有：</p>\n<ol>\n<li>字符串：可以⽤来做最简单的数据，可以缓存某个简单的字符串，也可以缓存某个 json 格式的字符<br />\n串，Redis 分布式锁的实现就利⽤了这种数据结构，还包括可以实现计数器、Session 共享、分布式<br />\n ID</li>\n<li>哈希表：可以⽤来存储⼀些 key-value 对，更适合⽤来存储对象</li>\n<li>列表：Redis 的列表通过命令的组合，既可以当做栈，也可以当做队列来使⽤，可以⽤来缓存类似<br />\n微信公众号、微博等消息流数据</li>\n<li>集合：和列表类似，也可以存储多个元素，但是不能重复，集合可以进⾏交集、并集、差集操作，<br />\n从⽽可以实现类似，我和某⼈共同关注的⼈、朋友圈点赞等功能</li>\n<li>有序集合：集合是⽆序的，有序集合可以设置顺序，可以⽤来实现排⾏榜功能</li>\n</ol>\n<h2 id=\"redis分布式锁底层是如何实现的\"><a class=\"anchor\" href=\"#redis分布式锁底层是如何实现的\">#</a> Redis 分布式锁底层是如何实现的？</h2>\n<ol>\n<li>⾸先利⽤ setnx 来保证：如果 key 不存在才能获取到锁，如果 key 存在，则获取不到锁</li>\n<li>然后还要利⽤ lua 脚本来保证多个 redis 操作的原⼦性</li>\n<li>同时还要考虑到锁过期，所以需要额外的⼀个看⻔狗定时任务来监听锁是否需要续约</li>\n<li>同时还要考虑到 redis 节点挂掉后的情况，所以需要采⽤红锁的⽅式来同时向 N/2+1 个节点申请锁，<br />\n都申请到了才证明获取锁成功，这样就算其中某个 redis 节点挂掉了，锁也不能被其他客户端获取到</li>\n</ol>\n<h2 id=\"redis主从复制的核心原理\"><a class=\"anchor\" href=\"#redis主从复制的核心原理\">#</a> Redis 主从复制的核⼼原理</h2>\n<p>Redis 的主从复制是提⾼ Redis 的可靠性的有效措施，主从复制的流程如下：</p>\n<ol>\n<li>集群启动时，主从库间会先建⽴连接，为全量复制做准备</li>\n<li>主库将所有数据同步给从库。从库收到数据后，在本地完成数据加载，这个过程依赖于内存快照<br />\n RDB</li>\n<li>在主库将数据同步给从库的过程中，主库不会阻塞，仍然可以正常接收请求。否则，redis 的服务就被中断<br />\n了。但是，这些请求中的写操作并没有记录到刚刚⽣成的 RDB ⽂件中。为了保证主从库的数据⼀致性，主<br />\n库会在内存中⽤专⻔的 replication buffer，记录 RDB ⽂件⽣成收到的所有写操作。</li>\n<li>最后，也就是第三个阶段，主库会把第⼆阶段执⾏过程中新收到的写命令，再发送给从库。具体的操作<br />\n是，当主库完成 RDB ⽂件发送后，就会把此时 replocation buffer 中修改操作发送给从库，从库再执⾏这些<br />\n操作。这样⼀来，主从库就实现同步了</li>\n<li>后续主库和从库都可以处理客户端读操作，写操作只能交给主库处理，主库接收到写操作后，还会将写操<br />\n作发送给从库，实现增量同步</li>\n</ol>\n<h2 id=\"缓存穿透-缓存击穿-缓存雪崩分别是什么\"><a class=\"anchor\" href=\"#缓存穿透-缓存击穿-缓存雪崩分别是什么\">#</a> 缓存穿透、缓存击穿、缓存雪崩分别是什么</h2>\n<p>缓存中存放的⼤多都是热点数据，⽬的就是防⽌请求可以直接从缓存中获取到数据，⽽不⽤访问 Mysql。</p>\n<ol>\n<li>缓存雪崩：如果缓存中某⼀时刻⼤批热点数据同时过期，那么就可能导致⼤量请求直接访问 Mysql<br />\n 了，解决办法就是在过期时间上增加⼀点随机值，另外如果搭建⼀个⾼可⽤的 Redis 集群也是防⽌<br />\n缓存雪崩的有效⼿段</li>\n<li>缓存击穿：和缓存雪崩类似，缓存雪崩是⼤批热点数据失效，⽽缓存击穿是指某⼀个热点 key 突然<br />\n失效，也导致了⼤量请求直接访问 Mysql 数据库，这就是缓存击穿，解决⽅案就是考虑这个热点 key<br />\n 不设过期时间</li>\n<li>缓存穿透：假如某⼀时刻访问 redis 的⼤量 key 都在 redis 中不存在（⽐如⿊客故意伪造⼀些乱七⼋糟<br />\n的 key），那么也会给数据造成压⼒，这就是缓存穿透，解决⽅案是使⽤布隆过滤器，它的作⽤就<br />\n是如果它认为⼀个 key 不存在，那么这个 key 就肯定不存在，所以可以在缓存之前加⼀层布隆过滤器<br />\n来拦截不存在的 key</li>\n</ol>\n<h2 id=\"redis和mysql如何保证数据一致\"><a class=\"anchor\" href=\"#redis和mysql如何保证数据一致\">#</a> Redis 和 Mysql 如何保证数据⼀致</h2>\n<ol>\n<li>先更新 Mysql，再更新 Redis，如果更新 Redis 失败，可能仍然不⼀致</li>\n<li>先删除 Redis 缓存数据，再更新 Mysql，再次查询的时候在将数据添加到缓存中，这种⽅案能解决 1<br />\n ⽅案的问题，但是在⾼并发下性能较低，⽽且仍然会出现数据不⼀致的问题，⽐如线程 1 删除了<br />\n Redis 缓存数据，正在更新 Mysql，此时另外⼀个查询再查询，那么就会把 Mysql 中⽼数据⼜查到<br />\n Redis 中</li>\n<li>延时双删，步骤是：先删除 Redis 缓存数据，再更新 Mysql，延迟⼏百毫秒再删除 Redis 缓存数据，<br />\n这样就算在更新 Mysql 时，有其他线程读了 Mysql，把⽼数据读到了 Redis 中，那么也会被删除掉，<br />\n从⽽把数据保持⼀致</li>\n</ol>\n<h2 id=\"explain语句结果中各个字段分表表示什么\"><a class=\"anchor\" href=\"#explain语句结果中各个字段分表表示什么\">#</a> Explain 语句结果中各个字段分表表示什么</h2>\n<p><img data-src=\"../../assets/image-20210804214815365.png\" alt=\"image-20210804214815365\" /></p>\n<h2 id=\"索引覆盖是什么\"><a class=\"anchor\" href=\"#索引覆盖是什么\">#</a> 索引覆盖是什么</h2>\n<p>索引覆盖就是⼀个 SQL 在执⾏时，可以利⽤索引来快速查找，并且此 SQL 所要查询的字段在当前索引对 应的字段中都包含了，那么就表示此 SQL ⾛完索引后不⽤回表了，所需要的字段都在当前索引的叶⼦节 点上存在，可以直接作为结果返回了</p>\n<h2 id=\"最左前缀原则是什么\"><a class=\"anchor\" href=\"#最左前缀原则是什么\">#</a> 最左前缀原则是什么</h2>\n<p>当⼀个 SQL 想要利⽤索引是，就⼀定要提供该索引所对应的字段中最左边的字段，也就是排在最前⾯的 字段，⽐如针对 a,b,c 三个字段建⽴了⼀个联合索引，那么在写⼀个 sql 时就⼀定要提供 a 字段的条件，这 样才能⽤到联合索引，这是由于在建⽴ a,b,c 三个字段的联合索引时，底层的 B + 树是按照 a,b,c 三个字段 从左往右去⽐较⼤⼩进⾏排序的，所以如果想要利⽤ B + 树进⾏快速查找也得符合这个规则</p>\n<h2 id=\"innodb是如何实现事务的\"><a class=\"anchor\" href=\"#innodb是如何实现事务的\">#</a> Innodb 是如何实现事务的</h2>\n<p>Innodb 通过 Buffer Pool，LogBuffer，Redo Log，Undo Log 来实现事务，以⼀个 update 语句为例：</p>\n<ol>\n<li>Innodb 在收到⼀个 update 语句后，会先根据条件找到数据所在的⻚，并将该⻚缓存在 Buffer Pool<br />\n 中</li>\n<li>执⾏ update 语句，修改 Buffer Pool 中的数据，也就是内存中的数据</li>\n<li>针对 update 语句⽣成⼀个 RedoLog 对象，并存⼊ LogBuffer 中</li>\n<li>针对 update 语句⽣成 undolog ⽇志，⽤于事务回滚</li>\n<li>如果事务提交，那么则把 RedoLog 对象进⾏持久化，后续还有其他机制将 Buffer Pool 中所修改的<br />\n数据⻚持久化到磁盘中</li>\n<li>如果事务回滚，则利⽤ undolog ⽇志进⾏回滚</li>\n</ol>\n<h2 id=\"b树和b树的区别为什么mysql使用b树\"><a class=\"anchor\" href=\"#b树和b树的区别为什么mysql使用b树\">#</a> B 树和 B + 树的区别，为什么 Mysql 使⽤ B + 树</h2>\n<p>B 树的特点：</p>\n<ol>\n<li>节点排序</li>\n<li>⼀个节点了可以存多个元素，多个元素也排序了<br />\n B + 树的特点：</li>\n<li>拥有 B 树的特点</li>\n<li>叶⼦节点之间有指针</li>\n<li>⾮叶⼦节点上的元素在叶⼦节点上都冗余了，也就是叶⼦节点中存储了所有的元素，并且排好顺序<br />\n Mysql 索引使⽤的是 B + 树，因为索引是⽤来加快查询的，⽽ B + 树通过对数据进⾏排序所以是可以提⾼查<br />\n询速度的，然后通过⼀个节点中可以存储多个元素，从⽽可以使得 B + 树的⾼度不会太⾼，在 Mysql 中⼀<br />\n个 Innodb ⻚就是⼀个 B + 树节点，⼀个 Innodb ⻚默认 16kb，所以⼀般情况下⼀颗两层的 B + 树可以存 2000<br />\n 万⾏左右的数据，然后通过利⽤ B + 树叶⼦节点存储了所有数据并且进⾏了排序，并且叶⼦节点之间有指<br />\n针，可以很好的⽀持全表扫描，范围查找等 SQL 语句。</li>\n</ol>\n<h2 id=\"mysql锁有哪些如何理解\"><a class=\"anchor\" href=\"#mysql锁有哪些如何理解\">#</a> Mysql 锁有哪些，如何理解</h2>\n<p>按锁粒度分类：</p>\n<ol>\n<li>⾏锁：锁某⾏数据，锁粒度最⼩，并发度⾼</li>\n<li>表锁：锁整张表，锁粒度最⼤，并发度低</li>\n<li>间隙锁：锁的是⼀个区间<br />\n还可以分为：</li>\n<li>共享锁：也就是读锁，⼀个事务给某⾏数据加了读锁，其他事务也可以读，但是不能写</li>\n<li>排它锁：也就是写锁，⼀个事务给某⾏数据加了写锁，其他事务不能读，也不能写<br />\n还可以分为：</li>\n<li>乐观锁：并不会真正的去锁某⾏记录，⽽是通过⼀个版本号来实现的</li>\n<li>悲观锁：上⾯所的⾏锁、表锁等都是悲观锁<br />\n在事务的隔离级别实现中，就需要利⽤锁来解决幻读</li>\n</ol>\n<h2 id=\"mysql慢查询该如何优化\"><a class=\"anchor\" href=\"#mysql慢查询该如何优化\">#</a> Mysql 慢查询该如何优化？</h2>\n<ol>\n<li>检查是否⾛了索引，如果没有则优化 SQL 利⽤索引</li>\n<li>检查所利⽤的索引，是否是最优索引</li>\n<li>检查所查字段是否都是必须的，是否查询了过多字段，查出了多余数据</li>\n<li>检查表中数据是否过多，是否应该进⾏分库分表了</li>\n<li>检查数据库实例所在机器的性能配置，是否太低，是否可以适当增加资源</li>\n</ol>\n<h2 id=\"消息队列有哪些作用\"><a class=\"anchor\" href=\"#消息队列有哪些作用\">#</a> 消息队列有哪些作⽤</h2>\n<ol>\n<li>解耦：使⽤消息队列来作为两个系统之间的通讯⽅式，两个系统不需要相互依赖了</li>\n<li>异步：系统 A 给消息队列发送完消息之后，就可以继续做其他事情了</li>\n<li>流量削峰：如果使⽤消息队列的⽅式来调⽤某个系统，那么消息将在队列中排队，由消费者⾃⼰控<br />\n制消费速度</li>\n</ol>\n<h2 id=\"死信队列是什么延时队列是什么\"><a class=\"anchor\" href=\"#死信队列是什么延时队列是什么\">#</a> 死信队列是什么？延时队列是什么？</h2>\n<ol>\n<li>死信队列也是⼀个消息队列，它是⽤来存放那些没有成功消费的消息的，通常可以⽤来作为消息重<br />\n试</li>\n<li>延时队列就是⽤来存放需要在指定时间被处理的元素的队列，通常可以⽤来处理⼀些具有过期性操<br />\n作的业务，⽐如⼗分钟内未⽀付则取消订单</li>\n</ol>\n",
            "tags": [
                "工作日常笔记",
                "Java",
                "java",
                "interview"
            ]
        },
        {
            "id": "https://oxyzen-wxf.github.io/worknote/digui-1/",
            "url": "https://oxyzen-wxf.github.io/worknote/digui-1/",
            "title": "递归解决权限树或多级联动的两种方法",
            "date_published": "2021-07-10T03:44:55.000Z",
            "content_html": "<h2 id=\"工作中解决权限树类使用递归的两种方法\"><a class=\"anchor\" href=\"#工作中解决权限树类使用递归的两种方法\">#</a> 工作中解决权限树类使用递归的两种方法</h2>\n<h4 id=\"方法一用普通方式首先找到所有顶级分类然后通过递归获取所有子集分类\"><a class=\"anchor\" href=\"#方法一用普通方式首先找到所有顶级分类然后通过递归获取所有子集分类\">#</a> 方法一：用普通方式首先找到所有顶级分类，然后通过递归获取所有子集分类</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CategoryEntity</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">listTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CategoryEntity</span><span class=\"token punctuation\">></span></span> entityList <span class=\"token operator\">=</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CategoryEntity</span><span class=\"token punctuation\">></span></span> collect <span class=\"token operator\">=</span> <span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span>entityList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> collect<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CategoryEntity</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getChildren</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CategoryEntity</span><span class=\"token punctuation\">></span></span> entityList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CategoryEntity</span><span class=\"token punctuation\">></span></span> resList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CategoryEntity</span> entity <span class=\"token operator\">:</span> entityList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">==</span> entity<span class=\"token punctuation\">.</span><span class=\"token function\">getCatLevel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                resList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">getChildrens</span><span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">,</span> entityList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token keyword\">return</span> resList<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">CategoryEntity</span> <span class=\"token function\">getChildrens</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CategoryEntity</span> entity<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CategoryEntity</span><span class=\"token punctuation\">></span></span> entityList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CategoryEntity</span><span class=\"token punctuation\">></span></span> resList <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">CategoryEntity</span> en <span class=\"token operator\">:</span> entityList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>entity<span class=\"token punctuation\">.</span><span class=\"token function\">getCatId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> en<span class=\"token punctuation\">.</span><span class=\"token function\">getParentCid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>                resList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token function\">getChildrens</span><span class=\"token punctuation\">(</span>en<span class=\"token punctuation\">,</span> entityList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>        entity<span class=\"token punctuation\">.</span><span class=\"token function\">setChildrens</span><span class=\"token punctuation\">(</span>resList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        <span class=\"token keyword\">return</span> entity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h4 id=\"方法二利用java8流处理原理和上面相同只不过这样代码简洁\"><a class=\"anchor\" href=\"#方法二利用java8流处理原理和上面相同只不过这样代码简洁\">#</a> 方法二：利用 java8 流处理，原理和上面相同只不过这样代码简洁</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CategoryEntity</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">listTree</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CategoryEntity</span><span class=\"token punctuation\">></span></span> entityList <span class=\"token operator\">=</span> <span class=\"token function\">list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CategoryEntity</span><span class=\"token punctuation\">></span></span> collect <span class=\"token operator\">=</span> entityList<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>category <span class=\"token operator\">-></span> category<span class=\"token punctuation\">.</span><span class=\"token function\">getParentCid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>menu <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                    menu<span class=\"token punctuation\">.</span><span class=\"token function\">setChildrens</span><span class=\"token punctuation\">(</span><span class=\"token function\">getChildrenJava8</span><span class=\"token punctuation\">(</span>menu<span class=\"token punctuation\">,</span>entityList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                    <span class=\"token keyword\">return</span> menu<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> collect<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">private</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CategoryEntity</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">getChildrenJava8</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CategoryEntity</span> menu<span class=\"token punctuation\">,</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CategoryEntity</span><span class=\"token punctuation\">></span></span> entityList<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> entityList<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> e<span class=\"token punctuation\">.</span><span class=\"token function\">getParentCid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> menu<span class=\"token punctuation\">.</span><span class=\"token function\">getCatId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>e <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            e<span class=\"token punctuation\">.</span><span class=\"token function\">setChildrens</span><span class=\"token punctuation\">(</span><span class=\"token function\">getChildrenJava8</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span>entityList<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Collectors</span><span class=\"token punctuation\">.</span><span class=\"token function\">toList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>​</p>\n",
            "tags": [
                "工作日常笔记",
                "Java",
                "Java常用工具",
                "java",
                "递归"
            ]
        },
        {
            "id": "https://oxyzen-wxf.github.io/worknote/interview-4/",
            "url": "https://oxyzen-wxf.github.io/worknote/interview-4/",
            "title": "面试总结之北京行",
            "date_published": "2021-07-10T03:44:55.000Z",
            "content_html": "<div class=\"note info\">\n<p>记沈工作结束后去北面试简单总结。</p>\n</div>\n<h2 id=\"锁升级\"><a class=\"anchor\" href=\"#锁升级\">#</a> 锁升级</h2>\n<p><img data-src=\"../../assets/image-20210826141049201.png\" alt=\"image-20210826141049201\" /></p>\n<h3 id=\"锁的状态\"><a class=\"anchor\" href=\"#锁的状态\">#</a> 锁的状态</h3>\n<ul>\n<li>无锁</li>\n<li>偏向锁</li>\n<li>轻量级锁</li>\n<li>重量级锁</li>\n</ul>\n<p>我们的锁信息是存放在对象头的 markword 里面的。</p>\n<h3 id=\"无锁\"><a class=\"anchor\" href=\"#无锁\">#</a> 无锁</h3>\n<p>无锁是指没有对资源进行锁定，所有的线程都能访问并修改同一个资源，但同时只有一个线程能修改成功。</p>\n<p>无锁的特点是修改操作会在循环内进行，线程会不断的尝试修改共享资源。如果没有冲突就修改成功并退出，否则就会继续循环尝试。如果有多个线程修改同一个值，必定会有一个线程能修改成功，而其他修改失败的线程会不断重试直到修改成功。</p>\n<h3 id=\"偏向锁\"><a class=\"anchor\" href=\"#偏向锁\">#</a> 偏向锁</h3>\n<p>偏向锁是指当一段同步代码一直被同一个线程所访问时，即不存在多个线程的竞争时，那么该线程在后续访问时便会自动获得锁，从而降低获取锁带来的消耗，即提高性能。</p>\n<p>初次执行到 synchronized 代码块的时候，锁对象变成偏向锁（通过 CAS 修改对象头里的锁标志位），字面意思是 “偏向于第一个获得它的线程” 的锁。执行完同步代码块后，线程并不会主动释放偏向锁。当第二次到达同步代码块时，线程会判断此时持有锁的线程是否就是自己（持有锁的线程 ID 也在对象头里），如果是则正常往下执行。由于之前没有释放锁，这里也就不需要重新加锁。如果自始至终使用锁的线程只有一个，很明显偏向锁几乎没有额外开销，性能极高。</p>\n<h3 id=\"轻量级锁\"><a class=\"anchor\" href=\"#轻量级锁\">#</a> 轻量级锁</h3>\n<p>轻量级锁是指当锁是偏向锁的时候，却被另外的线程所访问，此时偏向锁就会升级为轻量级锁，其他线程会通过自旋（关于自旋的介绍见文末）的形式尝试获取锁，线程不会阻塞，从而提高性能。</p>\n<p>在轻量级锁状态下继续锁竞争，没有抢到锁的线程将自旋，即不停地循环判断锁是否能够被成功获取。获取锁的操作，其实就是通过 CAS 修改对象头里的锁标志位。先比较当前锁标志位是否为 “释放”，如果是则将其设置为 “锁定”，比较并设置是原子性发生的。这就算抢到锁了，然后线程将当前锁的持有者信息修改为自己。</p>\n<h3 id=\"重量级锁\"><a class=\"anchor\" href=\"#重量级锁\">#</a> 重量级锁</h3>\n<p>重量级锁是指当有一个线程获取锁之后，其余所有等待获取该锁的线程都会处于阻塞状态。</p>\n<p>简言之，就是所有的控制权都交给了操作系统，由操作系统来负责线程间的调度和线程的状态变更。而这样会出现频繁地对线程运行状态的切换，线程的挂起和唤醒，从而消耗大量的系统资源。</p>\n<h3 id=\"锁升级过程\"><a class=\"anchor\" href=\"#锁升级过程\">#</a> 锁升级过程</h3>\n<h4 id=\"无锁到偏向锁\"><a class=\"anchor\" href=\"#无锁到偏向锁\">#</a> 无锁到偏向锁</h4>\n<p>初次执行到 synchronized 代码块的时候，锁对象变成偏向锁，通过 CAS 修改对象头里的锁标志位。</p>\n<h4 id=\"偏向锁到轻量级锁\"><a class=\"anchor\" href=\"#偏向锁到轻量级锁\">#</a> 偏向锁到轻量级锁</h4>\n<p>轻量级锁是指当锁是偏向锁的时候，却被另外的线程所访问，此时偏向锁就会升级为轻量级锁</p>\n<h4 id=\"轻量级锁到重量级锁\"><a class=\"anchor\" href=\"#轻量级锁到重量级锁\">#</a> 轻量级锁到重量级锁</h4>\n<p>如果锁竞争情况严重，某个达到最大自旋次数的线程，会将轻量级锁升级为重量级锁，依然是 CAS 修改锁标志位，但不修改持有锁的线程 ID。</p>\n<p><img data-src=\"../../assets/image-20210826141320248.png\" alt=\"image-20210826141320248\" /></p>\n<h3 id=\"锁升级的目的\"><a class=\"anchor\" href=\"#锁升级的目的\">#</a> 锁升级的目的</h3>\n<h4 id=\"锁竞争\"><a class=\"anchor\" href=\"#锁竞争\">#</a> 锁竞争</h4>\n<p>这里要明确一下什么是锁竞争：如果多个线程轮流获取一个锁，但是每次获取锁的时候都很顺利，没有发生阻塞，那么就不存在锁竞争。只有当某线程尝试获取锁的时候，发现该锁已经被占用，只能等待其释放，这才发生了锁竞争。</p>\n<p>我们 Java 团队发现，很多情况下，即便是多线程环境，由于每次占用资源的时间短，实际上可能没有发生锁竞争，偏向锁主要就是对这个层面进行优化。</p>\n<h4 id=\"自旋\"><a class=\"anchor\" href=\"#自旋\">#</a> 自旋</h4>\n<p>轻量级锁是通过自选的方式来等待资源的，在 Jdk1.6 我们的自旋尝试次数是一个 JVM 参数，默认是 10。但是在后序版本中，自旋的尝试次数都交给 JVM 进行控制，也就是编程了自适应自旋锁。</p>\n<p>简单的说就是锁变聪明了，假如上一次 CAS 尝试了十次并且成功了。我们此次 CAS 自旋了十次也没有成功，但是由于上一次 CAS 成功了，我们自适应自旋锁认为本次也很可能成功，会多尝试几次。</p>\n<h4 id=\"忙等\"><a class=\"anchor\" href=\"#忙等\">#</a> 忙等</h4>\n<p>长时间的自旋操作是非常消耗资源的，一个线程持有锁，其他线程就只能在原地空耗 CPU，执行不了任何有效的任务，这种现象叫做忙等（busy-waiting）。如果多个线程用一个锁，但是没有发生锁竞争，或者发生了很轻微的锁竞争，那么 synchronized 就用轻量级锁，允许短时间的忙等现象。这是一种折衷的想法，短时间的忙等，换取线程在用户态和内核态之间切换的开销。</p>\n<p>用户态和内核态</p>\n<h4 id=\"线程挂起\"><a class=\"anchor\" href=\"#线程挂起\">#</a> 线程挂起</h4>\n<p>重量级锁是指当有一个线程获取锁之后，其余所有等待获取该锁的线程都会处于阻塞状态。</p>\n<p>简言之，就是所有的控制权都交给了操作系统，由操作系统来负责线程间的调度和线程的状态变更。而这样会出现频繁地对线程运行状态的切换，线程的挂起和唤醒，从而消耗大量的系统资源。</p>\n<p><strong>转载原文链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDE0MTQ5NS9hcnRpY2xlL2RldGFpbHMvMTA4NTUzMjc2\">https://blog.csdn.net/weixin_44141495/article/details/108553276</span></strong></p>\n<h2 id=\"接口安全性\"><a class=\"anchor\" href=\"#接口安全性\">#</a> 接口安全性</h2>\n<p><a href=\"https://oxyzen-wxf.github.io/worknote/interface-safety-1/\">https://oxyzen-wxf.github.io/worknote/interface-safety-1/</a></p>\n<h2 id=\"mysql排名\"><a class=\"anchor\" href=\"#mysql排名\">#</a> mysql 排名</h2>\n<p><a href=\"https://oxyzen-wxf.github.io/database/mysql/mysql-3/\">https://oxyzen-wxf.github.io/database/mysql/mysql-3/</a></p>\n<h3 id=\"内存泄漏\"><a class=\"anchor\" href=\"#内存泄漏\">#</a> 内存泄漏</h3>\n<p>例如数据库连接 io 流连接 未关闭可能会导致内存泄漏</p>\n",
            "tags": [
                "工作日常笔记",
                "Java",
                "java",
                "interview"
            ]
        },
        {
            "id": "https://oxyzen-wxf.github.io/worknote/interview-3/",
            "url": "https://oxyzen-wxf.github.io/worknote/interview-3/",
            "title": "面试题笔记记录(三)周阳尚硅谷版",
            "date_published": "2021-07-10T03:44:55.000Z",
            "content_html": "<h2 id=\"自旋锁\"><a class=\"anchor\" href=\"#自旋锁\">#</a> 自旋锁</h2>\n<h2 id=\"cas原理\"><a class=\"anchor\" href=\"#cas原理\">#</a> CAS 原理</h2>\n<p><img data-src=\"../../assets/image-20210804132130276.png\" alt=\"image-20210804132130276\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getAndAddInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> var1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> var2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> var4<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">int</span> var5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 自旋锁   ，获取最新值判断成功去修改，不成功继续循环</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        var5 <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">getIntVolatile</span><span class=\"token punctuation\">(</span>var1<span class=\"token punctuation\">,</span> var2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSwapInt</span><span class=\"token punctuation\">(</span>var1<span class=\"token punctuation\">,</span> var2<span class=\"token punctuation\">,</span> var5<span class=\"token punctuation\">,</span> var5 <span class=\"token operator\">+</span> var4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> var5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"../../assets/image-20210804132556849.png\" alt=\"image-20210804132556849\" /></p>\n<p><img data-src=\"../../assets/image-20210804132612313.png\" alt=\"image-20210804132612313\" /></p>\n<p><img data-src=\"../../assets/image-20210804132739152.png\" alt=\"image-20210804132739152\" /></p>\n<h3 id=\"aba问题\"><a class=\"anchor\" href=\"#aba问题\">#</a> ABA 问题</h3>\n<p><img data-src=\"../../assets/image-20210804132956499.png\" alt=\"image-20210804132956499\" /></p>\n<p><img data-src=\"../../assets/image-20210804133452388.png\" alt=\"image-20210804133452388\" /></p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @author WangXuefeng</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @version 1.0</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @date 2021/8/4 13:54</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @description ABA 问题</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ABADemo</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">AtomicReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> atomicInteger <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicReference</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token class-name\">AtomicStampedReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Integer</span><span class=\"token punctuation\">></span></span> reference <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AtomicStampedReference</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">InterruptedException</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"========================以下是ABA问题的产生========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>            atomicInteger<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">101</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            atomicInteger<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token number\">101</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 实际已经操作过了 100</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"t1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>                <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>atomicInteger<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2021</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" -> \"</span> <span class=\"token operator\">+</span> atomicInteger<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token comment\">//true -> 2021 还是修改成功了，未管原来的 100 是否被人动过</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"t2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"========================以下是解决ABA问题========================\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>                <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"当前版本号：\"</span> <span class=\"token operator\">+</span> reference<span class=\"token punctuation\">.</span><span class=\"token function\">getStamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>            reference<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">101</span><span class=\"token punctuation\">,</span> reference<span class=\"token punctuation\">.</span><span class=\"token function\">getStamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> reference<span class=\"token punctuation\">.</span><span class=\"token function\">getStamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第二次版本号：\"</span> <span class=\"token operator\">+</span> reference<span class=\"token punctuation\">.</span><span class=\"token function\">getStamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            reference<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token number\">101</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> reference<span class=\"token punctuation\">.</span><span class=\"token function\">getStamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> reference<span class=\"token punctuation\">.</span><span class=\"token function\">getStamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"第三次版本号：\"</span> <span class=\"token operator\">+</span> reference<span class=\"token punctuation\">.</span><span class=\"token function\">getStamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"t3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>            <span class=\"token keyword\">int</span> stamp <span class=\"token operator\">=</span> reference<span class=\"token punctuation\">.</span><span class=\"token function\">getStamp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\"当前版本号：\"</span> <span class=\"token operator\">+</span> stamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>            <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>                <span class=\"token class-name\">TimeUnit</span><span class=\"token punctuation\">.</span>SECONDS<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"53\"></td><td><pre>                e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>            <span class=\"token keyword\">boolean</span> b <span class=\"token operator\">=</span> reference<span class=\"token punctuation\">.</span><span class=\"token function\">compareAndSet</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2021</span><span class=\"token punctuation\">,</span> stamp<span class=\"token punctuation\">,</span> stamp <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>            <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"修改是否成功：\"</span> <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> <span class=\"token string\">\"当前值\"</span> <span class=\"token operator\">+</span> reference<span class=\"token punctuation\">.</span><span class=\"token function\">getReference</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"t4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre></pre></td></tr><tr><td data-num=\"60\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "工作日常笔记",
                "Java",
                "java",
                "interview"
            ]
        },
        {
            "id": "https://oxyzen-wxf.github.io/worknote/note-1/",
            "url": "https://oxyzen-wxf.github.io/worknote/note-1/",
            "title": "日常笔记之Spring Boot配置指定配置类",
            "date_published": "2021-07-10T03:44:55.000Z",
            "content_html": "<p>在微服务分模块开发的时候我们需要引入公共模块，如果公共模块有配置文件，我们需要指定服务启动的时候扫描对应路径，但是当我们不需要某些配置的时候，直接启动服务则会报错，所以我们可以使用下面方法排除指定的配置类。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token annotation punctuation\">@EnableDiscoveryClient</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token annotation punctuation\">@EnableFeignClients</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"com.atguigu.gulimall.gulimallsearch.feign\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token annotation punctuation\">@ComponentScan</span><span class=\"token punctuation\">(</span>basePackages <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"com.atguigu\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>excludeFilters <span class=\"token operator\">=</span> <span class=\"token annotation punctuation\">@ComponentScan.Filter</span><span class=\"token punctuation\">(</span>type <span class=\"token operator\">=</span> <span class=\"token class-name\">FilterType</span><span class=\"token punctuation\">.</span>ASSIGNABLE_TYPE<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>value <span class=\"token operator\">=</span> <span class=\"token class-name\">GulimallSessionConfig</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token annotation punctuation\">@SpringBootApplication</span><span class=\"token punctuation\">(</span>exclude <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token class-name\">DataSourceAutoConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">IdentifierGeneratorAutoConfiguration</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GulimallSearchApplication</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token class-name\">SpringApplication</span><span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">GulimallSearchApplication</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>@ComponentScan(basePackages = {&quot;com.atguigu&quot;},excludeFilters = @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE,<br />\nvalue = GulimallSessionConfig.class)) 指定扫描路径，并排除该路径下的对应类型是 class 的值是某个类.class</p>\n<p>@SpringBootApplication (exclude = {DataSourceAutoConfiguration.class, IdentifierGeneratorAutoConfiguration.class}) 这里只能排除自动 配置的类 我们自定义的配置类是不可以排除的</p>\n",
            "tags": [
                "工作日常笔记",
                "Java",
                "java",
                "Spring Boot"
            ]
        }
    ]
}